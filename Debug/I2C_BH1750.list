
I2C_BH1750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a248  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800a358  0800a358  0000b358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a808  0800a808  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a808  0800a808  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a810  0800a810  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a810  0800a810  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a818  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  0800a9ec  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800a9ec  0000c444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7b5  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af7  00000000  00000000  000169b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000184b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e5  00000000  00000000  00018ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e34  00000000  00000000  000196b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde1  00000000  00000000  000314e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086411  00000000  00000000  0003e2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c46db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f58  00000000  00000000  000c4720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c8678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a340 	.word	0x0800a340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a340 	.word	0x0800a340

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <BH1750_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef BH1750_Init(I2C_HandleTypeDef *hi2c) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	6078      	str	r0, [r7, #4]
    uint8_t cmd = BH1750_POWER_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000dfc:	f107 020e 	add.w	r2, r7, #14
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	2146      	movs	r1, #70	@ 0x46
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f001 f8e4 	bl	8001fd8 <HAL_I2C_Master_Transmit>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <BH1750_Init+0x2e>
        return ret;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	e00e      	b.n	8000e3c <BH1750_Init+0x4c>
    }

    cmd = BH1750_CONTINUOUS_HIGH_RES_MODE;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000e22:	f107 020e 	add.w	r2, r7, #14
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2146      	movs	r1, #70	@ 0x46
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f001 f8d1 	bl	8001fd8 <HAL_I2C_Master_Transmit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <BH1750_ReadLux>:

HAL_StatusTypeDef BH1750_ReadLux(I2C_HandleTypeDef *hi2c, float *lux) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Master_Receive(hi2c, BH1750_ADDR, data, 2, HAL_MAX_DELAY);
 8000e4e:	f107 0208 	add.w	r2, r7, #8
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	2146      	movs	r1, #70	@ 0x46
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f001 f9b9 	bl	80021d4 <HAL_I2C_Master_Receive>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <BH1750_ReadLux+0x2c>
        return ret;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	e01e      	b.n	8000eae <BH1750_ReadLux+0x6a>
    }

    uint16_t raw_value = (data[0] << 8) | data[1];
 8000e70:	7a3b      	ldrb	r3, [r7, #8]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	7a7b      	ldrb	r3, [r7, #9]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	81bb      	strh	r3, [r7, #12]
    *lux = (float)raw_value / 1.2; // Công thức chuyển đổi từ giá trị thô sang lux
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff26 	bl	8000cd4 <__aeabi_ui2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff facc 	bl	8000428 <__aeabi_f2d>
 8000e90:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <BH1750_ReadLux+0x74>)
 8000e96:	f7ff fc49 	bl	800072c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe11 	bl	8000ac8 <__aeabi_d2f>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	3ff33333 	.word	0x3ff33333

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fb41 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f84d 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f8df 	bl	800108c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ece:	f000 f885 	bl	8000fdc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 f8b1 	bl	8001038 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (BH1750_Init(&hi2c1) != HAL_OK) {
 8000ed6:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <main+0x8c>)
 8000ed8:	f7ff ff8a 	bl	8000df0 <BH1750_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <main+0x34>
     // Xử lý lỗi khởi tạo (ví dụ: in ra lỗi qua UART)
       printf("BH1750 init failed!\r\n");
 8000ee2:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <main+0x90>)
 8000ee4:	f005 fdf6 	bl	8006ad4 <puts>
        Error_Handler(); // Hàm xử lý lỗi của CubeMX
 8000ee8:	f000 f91c 	bl	8001124 <Error_Handler>
        while (1);
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <main+0x30>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (BH1750_ReadLux(&hi2c1, &lux_value) == HAL_OK) {
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <main+0x8c>)
 8000ef6:	f7ff ffa5 	bl	8000e44 <BH1750_ReadLux>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <main+0x58>
		        // In giá trị lux ra UART (nếu đã cấu hình UART)
		        printf("Lux: %.2f\r\n", lux_value);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa90 	bl	8000428 <__aeabi_f2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <main+0x94>)
 8000f0e:	f005 fd79 	bl	8006a04 <iprintf>
 8000f12:	e002      	b.n	8000f1a <main+0x5e>

		      } else
		      {
		          printf("BH1750 read failed!\r\n");
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <main+0x98>)
 8000f16:	f005 fddd 	bl	8006ad4 <puts>
		      }
		      HAL_Delay(1000); // Đọc giá trị mỗi 1 giây
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f000 fb75 	bl	800160c <HAL_Delay>
	  	  sprintf(receive,"value light sensor %.2f\n",lux_value);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fa7f 	bl	8000428 <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	490a      	ldr	r1, [pc, #40]	@ (8000f58 <main+0x9c>)
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <main+0xa0>)
 8000f32:	f005 fdd7 	bl	8006ae4 <siprintf>

	  HAL_UART_Transmit(&huart1, receive,100, 1000);
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	2264      	movs	r2, #100	@ 0x64
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <main+0xa0>)
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <main+0xa4>)
 8000f40:	f004 f86c 	bl	800501c <HAL_UART_Transmit>
	  if (BH1750_ReadLux(&hi2c1, &lux_value) == HAL_OK) {
 8000f44:	e7d4      	b.n	8000ef0 <main+0x34>
 8000f46:	bf00      	nop
 8000f48:	200001f0 	.word	0x200001f0
 8000f4c:	0800a358 	.word	0x0800a358
 8000f50:	0800a370 	.word	0x0800a370
 8000f54:	0800a37c 	.word	0x0800a37c
 8000f58:	0800a394 	.word	0x0800a394
 8000f5c:	2000028c 	.word	0x2000028c
 8000f60:	20000244 	.word	0x20000244

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	@ 0x40
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2228      	movs	r2, #40	@ 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 feae 	bl	8006cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fbde 	bl	800475c <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f8bd 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fe4c 	bl	8004c60 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f8a9 	bl	8001124 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3740      	adds	r7, #64	@ 0x40
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_I2C1_Init+0x50>)
 8000fe2:	4a13      	ldr	r2, [pc, #76]	@ (8001030 <MX_I2C1_Init+0x54>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_I2C1_Init+0x50>)
 8000fe8:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_I2C1_Init+0x50>)
 8000ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_I2C1_Init+0x50>)
 800101a:	f000 fe85 	bl	8001d28 <HAL_I2C_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001024:	f000 f87e 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001f0 	.word	0x200001f0
 8001030:	40005400 	.word	0x40005400
 8001034:	000186a0 	.word	0x000186a0

08001038 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <MX_USART1_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001070:	f003 ff84 	bl	8004f7c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f853 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000244 	.word	0x20000244
 8001088:	40013800 	.word	0x40013800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_GPIO_Init+0x90>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <MX_GPIO_Init+0x90>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_GPIO_Init+0x90>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_GPIO_Init+0x90>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <MX_GPIO_Init+0x90>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_GPIO_Init+0x90>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_GPIO_Init+0x90>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a11      	ldr	r2, [pc, #68]	@ (800111c <MX_GPIO_Init+0x90>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_GPIO_Init+0x90>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ee:	480c      	ldr	r0, [pc, #48]	@ (8001120 <MX_GPIO_Init+0x94>)
 80010f0:	f000 fe02 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_GPIO_Init+0x94>)
 800110e:	f000 fc6f 	bl	80019f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40011000 	.word	0x40011000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_MspInit+0x5c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_MspInit+0x5c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_MspInit+0x5c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x5c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_MspInit+0x60>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_MspInit+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <HAL_I2C_MspInit+0x90>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d133      	bne.n	800121c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011cc:	23c0      	movs	r3, #192	@ 0xc0
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4813      	ldr	r0, [pc, #76]	@ (800122c <HAL_I2C_MspInit+0x98>)
 80011e0:	f000 fc06 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ee:	61d3      	str	r3, [r2, #28]
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	201f      	movs	r0, #31
 8001202:	f000 fafe 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001206:	201f      	movs	r0, #31
 8001208:	f000 fb17 	bl	800183a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2020      	movs	r0, #32
 8001212:	f000 faf6 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001216:	2020      	movs	r0, #32
 8001218:	f000 fb0f 	bl	800183a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a20      	ldr	r2, [pc, #128]	@ (80012cc <HAL_UART_MspInit+0x9c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d139      	bne.n	80012c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a1e      	ldr	r2, [pc, #120]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 8001256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_UART_MspInit+0xa0>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	480f      	ldr	r0, [pc, #60]	@ (80012d4 <HAL_UART_MspInit+0xa4>)
 8001296:	f000 fbab 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800129a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <HAL_UART_MspInit+0xa4>)
 80012b0:	f000 fb9e 	bl	80019f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2025      	movs	r0, #37	@ 0x25
 80012ba:	f000 faa2 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012be:	2025      	movs	r0, #37	@ 0x25
 80012c0:	f000 fabb 	bl	800183a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010800 	.word	0x40010800

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 f954 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <I2C1_EV_IRQHandler+0x10>)
 8001336:	f001 f9b9 	bl	80026ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001f0 	.word	0x200001f0

08001344 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <I2C1_ER_IRQHandler+0x10>)
 800134a:	f001 fb02 	bl	8002952 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001f0 	.word	0x200001f0

08001358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <USART1_IRQHandler+0x10>)
 800135e:	f003 fee9 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000244 	.word	0x20000244

0800136c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <_kill>:

int _kill(int pid, int sig)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001384:	f005 fcf8 	bl	8006d78 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	2216      	movs	r2, #22
 800138c:	601a      	str	r2, [r3, #0]
  return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_exit>:

void _exit (int status)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a2:	f04f 31ff 	mov.w	r1, #4294967295
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffe7 	bl	800137a <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <_exit+0x12>

080013b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e009      	b.n	8001410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf1      	blt.n	80013fc <_write+0x12>
  }
  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_close>:

int _close(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	605a      	str	r2, [r3, #4]
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f005 fc60 	bl	8006d78 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20005000 	.word	0x20005000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	200002f0 	.word	0x200002f0
 80014ec:	20000448 	.word	0x20000448

080014f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff fff8 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	@ (8001530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001502:	490c      	ldr	r1, [pc, #48]	@ (8001534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001504:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001518:	4c09      	ldr	r4, [pc, #36]	@ (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f005 fc2d 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fcc7 	bl	8000ebc <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001538:	0800a818 	.word	0x0800a818
  ldr r2, =_sbss
 800153c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001540:	20000444 	.word	0x20000444

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x28>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f947 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fde4 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f95f 	bl	8001856 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f927 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200002f4 	.word	0x200002f4

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	@ (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200002f4 	.word	0x200002f4

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff fff0 	bl	80015f8 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffe0 	bl	80015f8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4906      	ldr	r1, [pc, #24]	@ (80016ec <__NVIC_EnableIRQ+0x34>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff90 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff2d 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff42 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff35 	bl	80016b8 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e020      	b.n	80018da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d005      	beq.n	8001908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2204      	movs	r2, #4
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e051      	b.n	80019ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_DMA_Abort_IT+0xd4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d029      	beq.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_Abort_IT+0xd8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Abort_IT+0x9e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_DMA_Abort_IT+0xdc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01a      	beq.n	800197c <HAL_DMA_Abort_IT+0x98>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_DMA_Abort_IT+0xe0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d012      	beq.n	8001976 <HAL_DMA_Abort_IT+0x92>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_DMA_Abort_IT+0xe4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_DMA_Abort_IT+0x8c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_DMA_Abort_IT+0xe8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <HAL_DMA_Abort_IT+0x86>
 8001964:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001968:	e00e      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800196a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196e:	e00b      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001974:	e008      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	e005      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800197c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001980:	e002      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001982:	2310      	movs	r3, #16
 8001984:	e000      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001986:	2301      	movs	r3, #1
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_DMA_Abort_IT+0xec>)
 800198a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
    } 
  }
  return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020008 	.word	0x40020008
 80019bc:	4002001c 	.word	0x4002001c
 80019c0:	40020030 	.word	0x40020030
 80019c4:	40020044 	.word	0x40020044
 80019c8:	40020058 	.word	0x40020058
 80019cc:	4002006c 	.word	0x4002006c
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019e2:	b2db      	uxtb	r3, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b08b      	sub	sp, #44	@ 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	e169      	b.n	8001cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8158 	bne.w	8001cd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a9a      	ldr	r2, [pc, #616]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a2c:	4a98      	ldr	r2, [pc, #608]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d875      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a32:	4a98      	ldr	r2, [pc, #608]	@ (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d058      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a38:	4a96      	ldr	r2, [pc, #600]	@ (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d86f      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a3e:	4a96      	ldr	r2, [pc, #600]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d052      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a44:	4a94      	ldr	r2, [pc, #592]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d869      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a4a:	4a94      	ldr	r2, [pc, #592]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04c      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a50:	4a92      	ldr	r2, [pc, #584]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d863      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a56:	4a92      	ldr	r2, [pc, #584]	@ (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d046      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a5c:	4a90      	ldr	r2, [pc, #576]	@ (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d85d      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d82a      	bhi.n	8001abc <HAL_GPIO_Init+0xcc>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d859      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <HAL_GPIO_Init+0x80>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001ad7 	.word	0x08001ad7
 8001a7c:	08001b19 	.word	0x08001b19
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001b1f 	.word	0x08001b1f
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b1f 	.word	0x08001b1f
 8001a98:	08001b1f 	.word	0x08001b1f
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b1f 	.word	0x08001b1f
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001b1f 	.word	0x08001b1f
 8001aac:	08001b1f 	.word	0x08001b1f
 8001ab0:	08001b1f 	.word	0x08001b1f
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	4a79      	ldr	r2, [pc, #484]	@ (8001ca4 <HAL_GPIO_Init+0x2b4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e029      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e024      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01f      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e01a      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e009      	b.n	8001b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          break;
 8001b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	@ 0xff
 8001b24:	d801      	bhi.n	8001b2a <HAL_GPIO_Init+0x13a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_Init+0x13e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	@ 0xff
 8001b34:	d802      	bhi.n	8001b3c <HAL_GPIO_Init+0x14c>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x152>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80b1 	beq.w	8001cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	4a48      	ldr	r2, [pc, #288]	@ (8001cac <HAL_GPIO_Init+0x2bc>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_GPIO_Init+0x1ec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00d      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <HAL_GPIO_Init+0x1e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e004      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	4093      	lsls	r3, r2
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bee:	492f      	ldr	r1, [pc, #188]	@ (8001cac <HAL_GPIO_Init+0x2bc>)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	492c      	ldr	r1, [pc, #176]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4928      	ldr	r1, [pc, #160]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c30:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4922      	ldr	r1, [pc, #136]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	491e      	ldr	r1, [pc, #120]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4918      	ldr	r1, [pc, #96]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4914      	ldr	r1, [pc, #80]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d021      	beq.n	8001cc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	490e      	ldr	r1, [pc, #56]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e021      	b.n	8001cd2 <HAL_GPIO_Init+0x2e2>
 8001c8e:	bf00      	nop
 8001c90:	10320000 	.word	0x10320000
 8001c94:	10310000 	.word	0x10310000
 8001c98:	10220000 	.word	0x10220000
 8001c9c:	10210000 	.word	0x10210000
 8001ca0:	10120000 	.word	0x10120000
 8001ca4:	10110000 	.word	0x10110000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	40010c00 	.word	0x40010c00
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40011400 	.word	0x40011400
 8001cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4909      	ldr	r1, [pc, #36]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f ae8e 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	372c      	adds	r7, #44	@ 0x2c
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e12b      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fa20 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	@ 0x24
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d8c:	f003 f8b0 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a81      	ldr	r2, [pc, #516]	@ (8001f9c <HAL_I2C_Init+0x274>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d807      	bhi.n	8001dac <HAL_I2C_Init+0x84>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a80      	ldr	r2, [pc, #512]	@ (8001fa0 <HAL_I2C_Init+0x278>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e006      	b.n	8001dba <HAL_I2C_Init+0x92>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a7d      	ldr	r2, [pc, #500]	@ (8001fa4 <HAL_I2C_Init+0x27c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e7      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a78      	ldr	r2, [pc, #480]	@ (8001fa8 <HAL_I2C_Init+0x280>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9b      	lsrs	r3, r3, #18
 8001dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f9c <HAL_I2C_Init+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d802      	bhi.n	8001dfc <HAL_I2C_Init+0xd4>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	e009      	b.n	8001e10 <HAL_I2C_Init+0xe8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	4a69      	ldr	r2, [pc, #420]	@ (8001fac <HAL_I2C_Init+0x284>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	3301      	adds	r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	495c      	ldr	r1, [pc, #368]	@ (8001f9c <HAL_I2C_Init+0x274>)
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d819      	bhi.n	8001e64 <HAL_I2C_Init+0x13c>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e59      	subs	r1, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e44:	400b      	ands	r3, r1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_I2C_Init+0x138>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e59      	subs	r1, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	e051      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e04f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_I2C_Init+0x168>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e012      	b.n	8001eb6 <HAL_I2C_Init+0x18e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x196>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e022      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_I2C_Init+0x1bc>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e58      	subs	r0, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6911      	ldr	r1, [r2, #16]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	001e847f 	.word	0x001e847f
 8001fa4:	003d08ff 	.word	0x003d08ff
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	2b80      	cmp	r3, #128	@ 0x80
 8001fc4:	d103      	bne.n	8001fce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fb04 	bl	80015f8 <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 80e0 	bne.w	80021c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	4970      	ldr	r1, [pc, #448]	@ (80021cc <HAL_I2C_Master_Transmit+0x1f4>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f002 f924 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	e0d3      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2C_Master_Transmit+0x50>
 8002024:	2302      	movs	r3, #2
 8002026:	e0cc      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d007      	beq.n	800204e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2221      	movs	r2, #33	@ 0x21
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2210      	movs	r2, #16
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	893a      	ldrh	r2, [r7, #8]
 800207e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a50      	ldr	r2, [pc, #320]	@ (80021d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f001 fee6 	bl	8003e68 <I2C_MasterRequestWrite>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e08d      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020bc:	e066      	b.n	800218c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	6a39      	ldr	r1, [r7, #32]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f002 f9e2 	bl	800448c <I2C_WaitOnTXEFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b04      	cmp	r3, #4
 8002126:	d11b      	bne.n	8002160 <HAL_I2C_Master_Transmit+0x188>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d017      	beq.n	8002160 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6a39      	ldr	r1, [r7, #32]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f002 f9d9 	bl	800451c <I2C_WaitOnBTFFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b04      	cmp	r3, #4
 8002176:	d107      	bne.n	8002188 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01a      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d194      	bne.n	80020be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	00100002 	.word	0x00100002
 80021d0:	ffff0000 	.word	0xffff0000

080021d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	@ 0x30
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	461a      	mov	r2, r3
 80021e0:	460b      	mov	r3, r1
 80021e2:	817b      	strh	r3, [r7, #10]
 80021e4:	4613      	mov	r3, r2
 80021e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fa04 	bl	80015f8 <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	f040 824b 	bne.w	8002696 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2319      	movs	r3, #25
 8002206:	2201      	movs	r2, #1
 8002208:	497f      	ldr	r1, [pc, #508]	@ (8002408 <HAL_I2C_Master_Receive+0x234>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f002 f824 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	e23e      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2C_Master_Receive+0x54>
 8002224:	2302      	movs	r3, #2
 8002226:	e237      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d007      	beq.n	800224e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800225c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2222      	movs	r2, #34	@ 0x22
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2210      	movs	r2, #16
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a5f      	ldr	r2, [pc, #380]	@ (800240c <HAL_I2C_Master_Receive+0x238>)
 800228e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002290:	8979      	ldrh	r1, [r7, #10]
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 fe68 	bl	8003f6c <I2C_MasterRequestRead>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1f8      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e1cc      	b.n	8002670 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11e      	bne.n	800231c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ee:	b672      	cpsid	i
}
 80022f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002318:	b662      	cpsie	i
}
 800231a:	e035      	b.n	8002388 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11e      	bne.n	8002362 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002334:	b672      	cpsid	i
}
 8002336:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800235e:	b662      	cpsie	i
}
 8002360:	e012      	b.n	8002388 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002388:	e172      	b.n	8002670 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238e:	2b03      	cmp	r3, #3
 8002390:	f200 811f 	bhi.w	80025d2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b01      	cmp	r3, #1
 800239a:	d123      	bne.n	80023e4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f002 f935 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e173      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023e2:	e145      	b.n	8002670 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d152      	bne.n	8002492 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	4906      	ldr	r1, [pc, #24]	@ (8002410 <HAL_I2C_Master_Receive+0x23c>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f001 ff2e 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e148      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
 8002406:	bf00      	nop
 8002408:	00100002 	.word	0x00100002
 800240c:	ffff0000 	.word	0xffff0000
 8002410:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002414:	b672      	cpsid	i
}
 8002416:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800245a:	b662      	cpsie	i
}
 800245c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002490:	e0ee      	b.n	8002670 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	2200      	movs	r2, #0
 800249a:	4981      	ldr	r1, [pc, #516]	@ (80026a0 <HAL_I2C_Master_Receive+0x4cc>)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f001 fedb 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0f5      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024bc:	b672      	cpsid	i
}
 80024be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024f2:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <HAL_I2C_Master_Receive+0x4d0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	08db      	lsrs	r3, r3, #3
 80024f8:	4a6b      	ldr	r2, [pc, #428]	@ (80026a8 <HAL_I2C_Master_Receive+0x4d4>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0a1a      	lsrs	r2, r3, #8
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	3b01      	subs	r3, #1
 8002510:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d118      	bne.n	800254a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800253a:	b662      	cpsie	i
}
 800253c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0a6      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d1d9      	bne.n	800250c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800259a:	b662      	cpsie	i
}
 800259c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025d0:	e04e      	b.n	8002670 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f002 f81a 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e058      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d124      	bne.n	8002670 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f ae88 	bne.w	800238a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	@ 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	00010004 	.word	0x00010004
 80026a4:	20000000 	.word	0x20000000
 80026a8:	14f8b589 	.word	0x14f8b589

080026ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d003      	beq.n	80026e4 <HAL_I2C_EV_IRQHandler+0x38>
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b40      	cmp	r3, #64	@ 0x40
 80026e0:	f040 80b1 	bne.w	8002846 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_I2C_EV_IRQHandler+0x6e>
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002704:	d003      	beq.n	800270e <HAL_I2C_EV_IRQHandler+0x62>
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800270c:	d101      	bne.n	8002712 <HAL_I2C_EV_IRQHandler+0x66>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_I2C_EV_IRQHandler+0x68>
 8002712:	2300      	movs	r3, #0
 8002714:	2b01      	cmp	r3, #1
 8002716:	f000 8114 	beq.w	8002942 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_I2C_EV_IRQHandler+0x90>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 fff9 	bl	8004726 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fd74 	bl	8003222 <I2C_Master_SB>
 800273a:	e083      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_I2C_EV_IRQHandler+0xac>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fdeb 	bl	800332c <I2C_Master_ADD10>
 8002756:	e075      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_I2C_EV_IRQHandler+0xc8>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fe06 	bl	800337e <I2C_Master_ADDR>
 8002772:	e067      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800278c:	f000 80db 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9d4 	bl	8002b5c <I2C_MasterTransmit_TXE>
 80027b4:	e046      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80c2 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80bc 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	2b21      	cmp	r3, #33	@ 0x21
 80027d2:	d103      	bne.n	80027dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fa5d 	bl	8002c94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027da:	e0b4      	b.n	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b40      	cmp	r3, #64	@ 0x40
 80027e0:	f040 80b1 	bne.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 facb 	bl	8002d80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ea:	e0ac      	b.n	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027fa:	f000 80a4 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_I2C_EV_IRQHandler+0x178>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_I2C_EV_IRQHandler+0x178>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fb47 	bl	8002eb0 <I2C_MasterReceive_RXNE>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 808b 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8085 	beq.w	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fbff 	bl	8003040 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002842:	e080      	b.n	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
 8002844:	e07f      	b.n	8002946 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e007      	b.n	8002868 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800288c:	69b9      	ldr	r1, [r7, #24]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 ffcc 	bl	800382c <I2C_Slave_ADDR>
 8002894:	e05a      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x206>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f001 f806 	bl	80038bc <I2C_Slave_STOPF>
 80028b0:	e04c      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028b2:	7bbb      	ldrb	r3, [r7, #14]
 80028b4:	2b21      	cmp	r3, #33	@ 0x21
 80028b6:	d002      	beq.n	80028be <HAL_I2C_EV_IRQHandler+0x212>
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	2b29      	cmp	r3, #41	@ 0x29
 80028bc:	d120      	bne.n	8002900 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_I2C_EV_IRQHandler+0x238>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_I2C_EV_IRQHandler+0x238>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fee9 	bl	80036b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028e2:	e032      	b.n	800294a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02d      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x29e>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d028      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 ff18 	bl	800372e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028fe:	e024      	b.n	800294a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x27a>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x27a>
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff25 	bl	800376e <I2C_SlaveReceive_RXNE>
 8002924:	e012      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 ff55 	bl	80037ea <I2C_SlaveReceive_BTF>
 8002940:	e004      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800294a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b08a      	sub	sp, #40	@ 0x28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002974:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_I2C_ER_IRQHandler+0x5a>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800299a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_I2C_ER_IRQHandler+0x80>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80029d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03e      	beq.n	8002a5a <HAL_I2C_ER_IRQHandler+0x108>
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d039      	beq.n	8002a5a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80029e6:	7efb      	ldrb	r3, [r7, #27]
 80029e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a00:	7ebb      	ldrb	r3, [r7, #26]
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d112      	bne.n	8002a2c <HAL_I2C_ER_IRQHandler+0xda>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10f      	bne.n	8002a2c <HAL_I2C_ER_IRQHandler+0xda>
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b21      	cmp	r3, #33	@ 0x21
 8002a10:	d008      	beq.n	8002a24 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b29      	cmp	r3, #41	@ 0x29
 8002a16:	d005      	beq.n	8002a24 <HAL_I2C_ER_IRQHandler+0xd2>
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b28      	cmp	r3, #40	@ 0x28
 8002a1c:	d106      	bne.n	8002a2c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b21      	cmp	r3, #33	@ 0x21
 8002a22:	d103      	bne.n	8002a2c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f879 	bl	8003b1c <I2C_Slave_AF>
 8002a2a:	e016      	b.n	8002a5a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a3e:	7efb      	ldrb	r3, [r7, #27]
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d002      	beq.n	8002a4a <HAL_I2C_ER_IRQHandler+0xf8>
 8002a44:	7efb      	ldrb	r3, [r7, #27]
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_I2C_ER_IRQHandler+0x12e>
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002a7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f001 f8b6 	bl	8003c04 <I2C_ITError>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	@ 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
 8002af4:	4613      	mov	r3, r2
 8002af6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d150      	bne.n	8002c24 <I2C_MasterTransmit_TXE+0xc8>
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b21      	cmp	r3, #33	@ 0x21
 8002b86:	d14d      	bne.n	8002c24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d01d      	beq.n	8002bca <I2C_MasterTransmit_TXE+0x6e>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d01a      	beq.n	8002bca <I2C_MasterTransmit_TXE+0x6e>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b9a:	d016      	beq.n	8002bca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002baa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2211      	movs	r2, #17
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ff6c 	bl	8002aa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bc8:	e060      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	d107      	bne.n	8002c14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff81 	bl	8002b14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c12:	e03b      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff3f 	bl	8002aa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c22:	e033      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b21      	cmp	r3, #33	@ 0x21
 8002c28:	d005      	beq.n	8002c36 <I2C_MasterTransmit_TXE+0xda>
 8002c2a:	7bbb      	ldrb	r3, [r7, #14]
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d12d      	bne.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b22      	cmp	r3, #34	@ 0x22
 8002c34:	d12a      	bne.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c50:	e01c      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d103      	bne.n	8002c66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f88e 	bl	8002d80 <I2C_MemoryTransmit_TXE_BTF>
}
 8002c64:	e012      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c8a:	e7ff      	b.n	8002c8c <I2C_MasterTransmit_TXE+0x130>
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b21      	cmp	r3, #33	@ 0x21
 8002cac:	d164      	bne.n	8002d78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002cdc:	e04c      	b.n	8002d78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d01d      	beq.n	8002d20 <I2C_MasterTransmit_BTF+0x8c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d01a      	beq.n	8002d20 <I2C_MasterTransmit_BTF+0x8c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf0:	d016      	beq.n	8002d20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2211      	movs	r2, #17
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fec1 	bl	8002aa0 <HAL_I2C_MasterTxCpltCallback>
}
 8002d1e:	e02b      	b.n	8002d78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b40      	cmp	r3, #64	@ 0x40
 8002d58:	d107      	bne.n	8002d6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fed6 	bl	8002b14 <HAL_I2C_MemTxCpltCallback>
}
 8002d68:	e006      	b.n	8002d78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fe94 	bl	8002aa0 <HAL_I2C_MasterTxCpltCallback>
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11d      	bne.n	8002dd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10b      	bne.n	8002db8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db0:	1c9a      	adds	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002db6:	e077      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	121b      	asrs	r3, r3, #8
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002dd2:	e069      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10b      	bne.n	8002df4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002df2:	e059      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d152      	bne.n	8002ea2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b22      	cmp	r3, #34	@ 0x22
 8002e00:	d10d      	bne.n	8002e1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e1c:	e044      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b21      	cmp	r3, #33	@ 0x21
 8002e2c:	d112      	bne.n	8002e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e52:	e029      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d124      	bne.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b21      	cmp	r3, #33	@ 0x21
 8002e62:	d121      	bne.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fe3a 	bl	8002b14 <HAL_I2C_MemTxCpltCallback>
}
 8002ea0:	e002      	b.n	8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff f884 	bl	8001fb0 <I2C_Flush_DR>
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b22      	cmp	r3, #34	@ 0x22
 8002ec2:	f040 80b9 	bne.w	8003038 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d921      	bls.n	8002f1e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	f040 8096 	bne.w	8003038 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002f1c:	e08c      	b.n	8003038 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d07f      	beq.n	8003026 <I2C_MasterReceive_RXNE+0x176>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d002      	beq.n	8002f32 <I2C_MasterReceive_RXNE+0x82>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d179      	bne.n	8003026 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f001 fb3a 	bl	80045ac <I2C_WaitOnSTOPRequestThroughIT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d14c      	bne.n	8002fd8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d10a      	bne.n	8002fae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fdbd 	bl	8002b26 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fac:	e044      	b.n	8003038 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d002      	beq.n	8002fc2 <I2C_MasterReceive_RXNE+0x112>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d103      	bne.n	8002fca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc8:	e002      	b.n	8002fd0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2212      	movs	r2, #18
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fd6e 	bl	8002ab2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fd6:	e02f      	b.n	8003038 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fe6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fd8a 	bl	8002b38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003024:	e008      	b.n	8003038 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003034:	605a      	str	r2, [r3, #4]
}
 8003036:	e7ff      	b.n	8003038 <I2C_MasterReceive_RXNE+0x188>
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800308e:	e0c4      	b.n	800321a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d129      	bne.n	80030ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00a      	beq.n	80030c6 <I2C_MasterReceive_BTF+0x86>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d007      	beq.n	80030c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030ec:	e095      	b.n	800321a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d17d      	bne.n	80031f4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d002      	beq.n	8003104 <I2C_MasterReceive_BTF+0xc4>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b10      	cmp	r3, #16
 8003102:	d108      	bne.n	8003116 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e016      	b.n	8003144 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d002      	beq.n	8003122 <I2C_MasterReceive_BTF+0xe2>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d108      	bne.n	8003134 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e007      	b.n	8003144 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003142:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800319e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d10a      	bne.n	80031ca <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fcaf 	bl	8002b26 <HAL_I2C_MemRxCpltCallback>
}
 80031c8:	e027      	b.n	800321a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d002      	beq.n	80031de <I2C_MasterReceive_BTF+0x19e>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d103      	bne.n	80031e6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e4:	e002      	b.n	80031ec <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2212      	movs	r2, #18
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fc60 	bl	8002ab2 <HAL_I2C_MasterRxCpltCallback>
}
 80031f2:	e012      	b.n	800321a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b40      	cmp	r3, #64	@ 0x40
 8003234:	d117      	bne.n	8003266 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800324e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003250:	e067      	b.n	8003322 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]
}
 8003264:	e05d      	b.n	8003322 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800326e:	d133      	bne.n	80032d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b21      	cmp	r3, #33	@ 0x21
 800327a:	d109      	bne.n	8003290 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	e008      	b.n	80032a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <I2C_Master_SB+0x92>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d032      	beq.n	8003322 <I2C_Master_SB+0x100>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02d      	beq.n	8003322 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032d4:	605a      	str	r2, [r3, #4]
}
 80032d6:	e024      	b.n	8003322 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10e      	bne.n	80032fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	11db      	asrs	r3, r3, #7
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0306 	and.w	r3, r3, #6
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f063 030f 	orn	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
}
 80032fc:	e011      	b.n	8003322 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10d      	bne.n	8003322 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	b29b      	uxth	r3, r3
 800330c:	11db      	asrs	r3, r3, #7
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0306 	and.w	r3, r3, #6
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f063 030e 	orn	r3, r3, #14
 800331a:	b2da      	uxtb	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	611a      	str	r2, [r3, #16]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	b2da      	uxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <I2C_Master_ADD10+0x26>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <I2C_Master_ADD10+0x48>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003372:	605a      	str	r2, [r3, #4]
  }
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b091      	sub	sp, #68	@ 0x44
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800338c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b22      	cmp	r3, #34	@ 0x22
 80033a6:	f040 8174 	bne.w	8003692 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <I2C_Master_ADDR+0x54>
 80033b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033b6:	2b40      	cmp	r3, #64	@ 0x40
 80033b8:	d10b      	bne.n	80033d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	e16b      	b.n	80036aa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11d      	bne.n	8003416 <I2C_Master_ADDR+0x98>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80033e2:	d118      	bne.n	8003416 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50
 8003414:	e149      	b.n	80036aa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e120      	b.n	800368a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	f040 808a 	bne.w	8003568 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003456:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800345a:	d137      	bne.n	80034cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800347a:	d113      	bne.n	80034a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	e0f2      	b.n	800368a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e0de      	b.n	800368a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d02e      	beq.n	8003530 <I2C_Master_ADDR+0x1b2>
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d02b      	beq.n	8003530 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	2b12      	cmp	r3, #18
 80034dc:	d102      	bne.n	80034e4 <I2C_Master_ADDR+0x166>
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d125      	bne.n	8003530 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00e      	beq.n	8003508 <I2C_Master_ADDR+0x18a>
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d00b      	beq.n	8003508 <I2C_Master_ADDR+0x18a>
 80034f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d008      	beq.n	8003508 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003516:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	e0ac      	b.n	800368a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e090      	b.n	800368a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d158      	bne.n	8003624 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	2b04      	cmp	r3, #4
 8003576:	d021      	beq.n	80035bc <I2C_Master_ADDR+0x23e>
 8003578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357a:	2b02      	cmp	r3, #2
 800357c:	d01e      	beq.n	80035bc <I2C_Master_ADDR+0x23e>
 800357e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003580:	2b10      	cmp	r3, #16
 8003582:	d01b      	beq.n	80035bc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003592:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e012      	b.n	80035e2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f0:	d14b      	bne.n	800368a <I2C_Master_ADDR+0x30c>
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035f8:	d00b      	beq.n	8003612 <I2C_Master_ADDR+0x294>
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d008      	beq.n	8003612 <I2C_Master_ADDR+0x294>
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	2b08      	cmp	r3, #8
 8003604:	d005      	beq.n	8003612 <I2C_Master_ADDR+0x294>
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	2b10      	cmp	r3, #16
 800360a:	d002      	beq.n	8003612 <I2C_Master_ADDR+0x294>
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	2b20      	cmp	r3, #32
 8003610:	d13b      	bne.n	800368a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	e032      	b.n	800368a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003632:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003642:	d117      	bne.n	8003674 <I2C_Master_ADDR+0x2f6>
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800364a:	d00b      	beq.n	8003664 <I2C_Master_ADDR+0x2e6>
 800364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364e:	2b01      	cmp	r3, #1
 8003650:	d008      	beq.n	8003664 <I2C_Master_ADDR+0x2e6>
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003654:	2b08      	cmp	r3, #8
 8003656:	d005      	beq.n	8003664 <I2C_Master_ADDR+0x2e6>
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	2b10      	cmp	r3, #16
 800365c:	d002      	beq.n	8003664 <I2C_Master_ADDR+0x2e6>
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003672:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003690:	e00b      	b.n	80036aa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
}
 80036a8:	e7ff      	b.n	80036aa <I2C_Master_ADDR+0x32c>
 80036aa:	bf00      	nop
 80036ac:	3744      	adds	r7, #68	@ 0x44
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d02b      	beq.n	8003726 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d114      	bne.n	8003726 <I2C_SlaveTransmit_TXE+0x72>
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b29      	cmp	r3, #41	@ 0x29
 8003700:	d111      	bne.n	8003726 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2221      	movs	r2, #33	@ 0x21
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2228      	movs	r2, #40	@ 0x28
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff f9cf 	bl	8002ac4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02c      	beq.n	80037e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d114      	bne.n	80037e2 <I2C_SlaveReceive_RXNE+0x74>
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80037bc:	d111      	bne.n	80037e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2222      	movs	r2, #34	@ 0x22
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2228      	movs	r2, #40	@ 0x28
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff f97a 	bl	8002ad6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003846:	2b28      	cmp	r3, #40	@ 0x28
 8003848:	d125      	bne.n	8003896 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003858:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	81bb      	strh	r3, [r7, #12]
 8003878:	e002      	b.n	8003880 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003888:	89ba      	ldrh	r2, [r7, #12]
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff f92a 	bl	8002ae8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003894:	e00e      	b.n	80038b4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003918:	d172      	bne.n	8003a00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b22      	cmp	r3, #34	@ 0x22
 800391e:	d002      	beq.n	8003926 <I2C_Slave_STOPF+0x6a>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b2a      	cmp	r3, #42	@ 0x2a
 8003924:	d135      	bne.n	8003992 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003958:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe f838 	bl	80019d4 <HAL_DMA_GetState>
 8003964:	4603      	mov	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d049      	beq.n	80039fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	4a69      	ldr	r2, [pc, #420]	@ (8003b14 <I2C_Slave_STOPF+0x258>)
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd ffb4 	bl	80018e4 <HAL_DMA_Abort_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03d      	beq.n	80039fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003990:	e035      	b.n	80039fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f043 0204 	orr.w	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe f802 	bl	80019d4 <HAL_DMA_GetState>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d014      	beq.n	8003a00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039da:	4a4e      	ldr	r2, [pc, #312]	@ (8003b14 <I2C_Slave_STOPF+0x258>)
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd ff7e 	bl	80018e4 <HAL_DMA_Abort_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039f8:	4610      	mov	r0, r2
 80039fa:	4798      	blx	r3
 80039fc:	e000      	b.n	8003a00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03e      	beq.n	8003a88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d112      	bne.n	8003a3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	d112      	bne.n	8003a72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8b7 	bl	8003c04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a96:	e039      	b.n	8003b0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a9c:	d109      	bne.n	8003ab2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2228      	movs	r2, #40	@ 0x28
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff f812 	bl	8002ad6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b28      	cmp	r3, #40	@ 0x28
 8003abc:	d111      	bne.n	8003ae2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <I2C_Slave_STOPF+0x25c>)
 8003ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff f811 	bl	8002b02 <HAL_I2C_ListenCpltCallback>
}
 8003ae0:	e014      	b.n	8003b0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	2b22      	cmp	r3, #34	@ 0x22
 8003ae8:	d002      	beq.n	8003af0 <I2C_Slave_STOPF+0x234>
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b22      	cmp	r3, #34	@ 0x22
 8003aee:	d10d      	bne.n	8003b0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fe ffe5 	bl	8002ad6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08004109 	.word	0x08004109
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d002      	beq.n	8003b3e <I2C_Slave_AF+0x22>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d129      	bne.n	8003b92 <I2C_Slave_AF+0x76>
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b28      	cmp	r3, #40	@ 0x28
 8003b42:	d126      	bne.n	8003b92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <I2C_Slave_AF+0xe4>)
 8003b48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe ffb9 	bl	8002b02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003b90:	e031      	b.n	8003bf6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b21      	cmp	r3, #33	@ 0x21
 8003b96:	d129      	bne.n	8003bec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <I2C_Slave_AF+0xe4>)
 8003b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bcc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f9e6 	bl	8001fb0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fe ff6d 	bl	8002ac4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bea:	e004      	b.n	8003bf6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bf4:	615a      	str	r2, [r3, #20]
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	ffff0000 	.word	0xffff0000

08003c04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d002      	beq.n	8003c28 <I2C_ITError+0x24>
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	2b40      	cmp	r3, #64	@ 0x40
 8003c26:	d10a      	bne.n	8003c3e <I2C_ITError+0x3a>
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b22      	cmp	r3, #34	@ 0x22
 8003c2c:	d107      	bne.n	8003c3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c44:	2b28      	cmp	r3, #40	@ 0x28
 8003c46:	d107      	bne.n	8003c58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2228      	movs	r2, #40	@ 0x28
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003c56:	e015      	b.n	8003c84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c66:	d00a      	beq.n	8003c7e <I2C_ITError+0x7a>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b60      	cmp	r3, #96	@ 0x60
 8003c6c:	d007      	beq.n	8003c7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c92:	d162      	bne.n	8003d5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d020      	beq.n	8003cf4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8003e60 <I2C_ITError+0x25c>)
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd fe10 	bl	80018e4 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8089 	beq.w	8003dde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4798      	blx	r3
 8003cf2:	e074      	b.n	8003dde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	4a59      	ldr	r2, [pc, #356]	@ (8003e60 <I2C_ITError+0x25c>)
 8003cfa:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fdef 	bl	80018e4 <HAL_DMA_Abort_IT>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d068      	beq.n	8003dde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b40      	cmp	r3, #64	@ 0x40
 8003d18:	d10b      	bne.n	8003d32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	e041      	b.n	8003dde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b60      	cmp	r3, #96	@ 0x60
 8003d64:	d125      	bne.n	8003db2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d10b      	bne.n	8003d9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe fecd 	bl	8002b4a <HAL_I2C_AbortCpltCallback>
 8003db0:	e015      	b.n	8003dde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d10b      	bne.n	8003dd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fe fead 	bl	8002b38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10e      	bne.n	8003e0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d113      	bne.n	8003e58 <I2C_ITError+0x254>
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b28      	cmp	r3, #40	@ 0x28
 8003e34:	d110      	bne.n	8003e58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <I2C_ITError+0x260>)
 8003e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe fe55 	bl	8002b02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	08004109 	.word	0x08004109
 8003e64:	ffff0000 	.word	0xffff0000

08003e68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d006      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d003      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e90:	d108      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00b      	b.n	8003ebc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	2b12      	cmp	r3, #18
 8003eaa:	d107      	bne.n	8003ebc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f9c5 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee2:	d103      	bne.n	8003eec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e035      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef8:	d108      	bne.n	8003f0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f08:	611a      	str	r2, [r3, #16]
 8003f0a:	e01b      	b.n	8003f44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	11db      	asrs	r3, r3, #7
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0306 	and.w	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f063 030f 	orn	r3, r3, #15
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	490e      	ldr	r1, [pc, #56]	@ (8003f64 <I2C_MasterRequestWrite+0xfc>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa0e 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e010      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4907      	ldr	r1, [pc, #28]	@ (8003f68 <I2C_MasterRequestWrite+0x100>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f9fe 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	00010008 	.word	0x00010008
 8003f68:	00010002 	.word	0x00010002

08003f6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	2b11      	cmp	r3, #17
 8003fbe:	d107      	bne.n	8003fd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f93b 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff6:	d103      	bne.n	8004000 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e079      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	e05f      	b.n	80040e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	11db      	asrs	r3, r3, #7
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0306 	and.w	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f063 030f 	orn	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4930      	ldr	r1, [pc, #192]	@ (8004100 <I2C_MasterRequestRead+0x194>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f984 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e054      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4929      	ldr	r1, [pc, #164]	@ (8004104 <I2C_MasterRequestRead+0x198>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f974 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e044      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004092:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8d9 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e017      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	11db      	asrs	r3, r3, #7
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f063 030e 	orn	r3, r3, #14
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4907      	ldr	r1, [pc, #28]	@ (8004104 <I2C_MasterRequestRead+0x198>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f930 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010008 	.word	0x00010008
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004120:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004122:	4b4b      	ldr	r3, [pc, #300]	@ (8004250 <I2C_DMAAbort+0x148>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	4a4a      	ldr	r2, [pc, #296]	@ (8004254 <I2C_DMAAbort+0x14c>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0a1a      	lsrs	r2, r3, #8
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00da      	lsls	r2, r3, #3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800414e:	e00a      	b.n	8004166 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004164:	d0ea      	beq.n	800413c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004172:	2200      	movs	r2, #0
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004194:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	2200      	movs	r2, #0
 80041aa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b8:	2200      	movs	r2, #0
 80041ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b60      	cmp	r3, #96	@ 0x60
 80041d6:	d10e      	bne.n	80041f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7fe fcab 	bl	8002b4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f4:	e027      	b.n	8004246 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041fc:	2b28      	cmp	r3, #40	@ 0x28
 80041fe:	d117      	bne.n	8004230 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800421e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2228      	movs	r2, #40	@ 0x28
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800422e:	e007      	b.n	8004240 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f7fe fc79 	bl	8002b38 <HAL_I2C_ErrorCallback>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000
 8004254:	14f8b589 	.word	0x14f8b589

08004258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004268:	e048      	b.n	80042fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d044      	beq.n	80042fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fd f9c1 	bl	80015f8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d139      	bne.n	80042fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10d      	bne.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	e00c      	b.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d116      	bne.n	80042fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e023      	b.n	8004344 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	e00c      	b.n	800433c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	429a      	cmp	r2, r3
 8004340:	d093      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800435a:	e071      	b.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d123      	bne.n	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004384:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e067      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d041      	beq.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043bc:	f7fd f91c 	bl	80015f8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d302      	bcc.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d136      	bne.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10c      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e00b      	b.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e021      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10c      	bne.n	8004464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e00b      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	43da      	mvns	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f af6d 	bne.w	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004498:	e034      	b.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f915 	bl	80046ca <I2C_IsAcknowledgeFailed>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e034      	b.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d028      	beq.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fd f8a1 	bl	80015f8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11d      	bne.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b80      	cmp	r3, #128	@ 0x80
 80044d4:	d016      	beq.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e007      	b.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d1c3      	bne.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004528:	e034      	b.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8cd 	bl	80046ca <I2C_IsAcknowledgeFailed>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e034      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d028      	beq.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7fd f859 	bl	80015f8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11d      	bne.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d016      	beq.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e007      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d1c3      	bne.n	800452a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045b8:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	4a13      	ldr	r2, [pc, #76]	@ (800460c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0a1a      	lsrs	r2, r3, #8
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e008      	b.n	80045fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f8:	d0e9      	beq.n	80045ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000000 	.word	0x20000000
 800460c:	14f8b589 	.word	0x14f8b589

08004610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800461c:	e049      	b.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d119      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e030      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fc ffca 	bl	80015f8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11d      	bne.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	d016      	beq.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d1ae      	bne.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e0:	d11b      	bne.n	800471a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004736:	d103      	bne.n	8004740 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800473e:	e007      	b.n	8004750 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004748:	d102      	bne.n	8004750 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
	...

0800475c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e272      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8087 	beq.w	800488a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800477c:	4b92      	ldr	r3, [pc, #584]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b04      	cmp	r3, #4
 8004786:	d00c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004788:	4b8f      	ldr	r3, [pc, #572]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b08      	cmp	r3, #8
 8004792:	d112      	bne.n	80047ba <HAL_RCC_OscConfig+0x5e>
 8004794:	4b8c      	ldr	r3, [pc, #560]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d10b      	bne.n	80047ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a2:	4b89      	ldr	r3, [pc, #548]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d06c      	beq.n	8004888 <HAL_RCC_OscConfig+0x12c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d168      	bne.n	8004888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e24c      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x76>
 80047c4:	4b80      	ldr	r3, [pc, #512]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7f      	ldr	r2, [pc, #508]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e02e      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x98>
 80047da:	4b7b      	ldr	r3, [pc, #492]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7a      	ldr	r2, [pc, #488]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b78      	ldr	r3, [pc, #480]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a77      	ldr	r2, [pc, #476]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0xbc>
 80047fe:	4b72      	ldr	r3, [pc, #456]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a71      	ldr	r2, [pc, #452]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b6f      	ldr	r3, [pc, #444]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6e      	ldr	r2, [pc, #440]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 8004818:	4b6b      	ldr	r3, [pc, #428]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6a      	ldr	r2, [pc, #424]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b68      	ldr	r3, [pc, #416]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a67      	ldr	r2, [pc, #412]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800482e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fc fede 	bl	80015f8 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fc feda 	bl	80015f8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e200      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b5d      	ldr	r3, [pc, #372]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xe4>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fc feca 	bl	80015f8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fc fec6 	bl	80015f8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1ec      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x10c>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	4b4c      	ldr	r3, [pc, #304]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048a2:	4b49      	ldr	r3, [pc, #292]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x18c>
 80048ae:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x176>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1c0      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3d      	ldr	r3, [pc, #244]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4939      	ldr	r1, [pc, #228]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b36      	ldr	r3, [pc, #216]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fc fe7f 	bl	80015f8 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fc fe7b 	bl	80015f8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1a1      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b2a      	ldr	r3, [pc, #168]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4927      	ldr	r1, [pc, #156]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b26      	ldr	r3, [pc, #152]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fc fe5e 	bl	80015f8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fc fe5a 	bl	80015f8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e180      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03a      	beq.n	80049e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d019      	beq.n	80049a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004978:	f7fc fe3e 	bl	80015f8 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004980:	f7fc fe3a 	bl	80015f8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e160      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0d      	ldr	r3, [pc, #52]	@ (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800499e:	2001      	movs	r0, #1
 80049a0:	f000 face 	bl	8004f40 <RCC_Delay>
 80049a4:	e01c      	b.n	80049e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a6:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ac:	f7fc fe24 	bl	80015f8 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b2:	e00f      	b.n	80049d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fc fe20 	bl	80015f8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d908      	bls.n	80049d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e146      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	42420000 	.word	0x42420000
 80049d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	4b92      	ldr	r3, [pc, #584]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e9      	bne.n	80049b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a6 	beq.w	8004b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b88      	ldr	r3, [pc, #544]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4a87      	ldr	r2, [pc, #540]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	61d3      	str	r3, [r2, #28]
 8004a0a:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b82      	ldr	r3, [pc, #520]	@ (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b7f      	ldr	r3, [pc, #508]	@ (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fc fde1 	bl	80015f8 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fc fddd 	bl	80015f8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	@ 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e103      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b75      	ldr	r3, [pc, #468]	@ (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x312>
 8004a60:	4b6f      	ldr	r3, [pc, #444]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4a6e      	ldr	r2, [pc, #440]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	e02d      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x334>
 8004a76:	4b6a      	ldr	r3, [pc, #424]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4a69      	ldr	r2, [pc, #420]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6213      	str	r3, [r2, #32]
 8004a82:	4b67      	ldr	r3, [pc, #412]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a66      	ldr	r2, [pc, #408]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x356>
 8004a98:	4b61      	ldr	r3, [pc, #388]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4a60      	ldr	r2, [pc, #384]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4a5a      	ldr	r2, [pc, #360]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6213      	str	r3, [r2, #32]
 8004abe:	4b58      	ldr	r3, [pc, #352]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4a57      	ldr	r2, [pc, #348]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fd91 	bl	80015f8 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fc fd8d 	bl	80015f8 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0b1      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b4b      	ldr	r3, [pc, #300]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x37e>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fc fd7b 	bl	80015f8 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fc fd77 	bl	80015f8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e09b      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1c:	4b40      	ldr	r3, [pc, #256]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4a3b      	ldr	r2, [pc, #236]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8087 	beq.w	8004c52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b44:	4b36      	ldr	r3, [pc, #216]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d061      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d146      	bne.n	8004be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fd4b 	bl	80015f8 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fc fd47 	bl	80015f8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e06d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b78:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d108      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4921      	ldr	r1, [pc, #132]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a19      	ldr	r1, [r3, #32]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	491b      	ldr	r1, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fd1b 	bl	80015f8 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fc fd17 	bl	80015f8 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd8:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x46a>
 8004be4:	e035      	b.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fc fd04 	bl	80015f8 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fc fd00 	bl	80015f8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e026      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x498>
 8004c12:	e01e      	b.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e019      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCC_OscConfig+0x500>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000

08004c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0d0      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b6a      	ldr	r3, [pc, #424]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b67      	ldr	r3, [pc, #412]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 0207 	bic.w	r2, r3, #7
 8004c8a:	4965      	ldr	r1, [pc, #404]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d040      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b41      	ldr	r3, [pc, #260]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e073      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06b      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4936      	ldr	r1, [pc, #216]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fc fc52 	bl	80015f8 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fc fc4e 	bl	80015f8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e053      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d210      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	4922      	ldr	r1, [pc, #136]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <HAL_RCC_ClockConfig+0x1cc>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_RCC_ClockConfig+0x1d0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fbb0 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40022000 	.word	0x40022000
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800a3b0 	.word	0x0800a3b0
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x30>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x36>
 8004e62:	e027      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e64:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004e66:	613b      	str	r3, [r7, #16]
      break;
 8004e68:	e027      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0c9b      	lsrs	r3, r3, #18
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	4a17      	ldr	r2, [pc, #92]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e74:	5cd3      	ldrb	r3, [r2, r3]
 8004e76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e82:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	0c5b      	lsrs	r3, r3, #17
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a0d      	ldr	r2, [pc, #52]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004e96:	fb03 f202 	mul.w	r2, r3, r2
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e004      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	613b      	str	r3, [r7, #16]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004eb6:	613b      	str	r3, [r7, #16]
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	693b      	ldr	r3, [r7, #16]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	007a1200 	.word	0x007a1200
 8004ed0:	0800a3c8 	.word	0x0800a3c8
 8004ed4:	0800a3d8 	.word	0x0800a3d8
 8004ed8:	003d0900 	.word	0x003d0900

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b02      	ldr	r3, [pc, #8]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x10>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff2 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	0800a3c0 	.word	0x0800a3c0

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffde 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	0adb      	lsrs	r3, r3, #11
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	0800a3c0 	.word	0x0800a3c0

08004f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f48:	4b0a      	ldr	r3, [pc, #40]	@ (8004f74 <RCC_Delay+0x34>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f78 <RCC_Delay+0x38>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0a5b      	lsrs	r3, r3, #9
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f5c:	bf00      	nop
  }
  while (Delay --);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <RCC_Delay+0x1c>
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	20000000 	.word	0x20000000
 8004f78:	10624dd3 	.word	0x10624dd3

08004f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc f944 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	@ 0x24
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fd63 	bl	8005a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	d175      	bne.n	8005128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_UART_Transmit+0x2c>
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e06e      	b.n	800512a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2221      	movs	r2, #33	@ 0x21
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800505a:	f7fc facd 	bl	80015f8 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005074:	d108      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e003      	b.n	8005090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005090:	e02e      	b.n	80050f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fb01 	bl	80056a4 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e03a      	b.n	800512a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3302      	adds	r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e007      	b.n	80050e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1cb      	bne.n	8005092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2200      	movs	r2, #0
 8005102:	2140      	movs	r1, #64	@ 0x40
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 facd 	bl	80056a4 <UART_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e006      	b.n	800512a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0ba      	sub	sp, #232	@ 0xe8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
 8005186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fbbc 	bl	8005910 <UART_Receive_IT>
      return;
 8005198:	e25b      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800519a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80de 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
 80051a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80d1 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f043 0202 	orr.w	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
 8005212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	f043 0204 	orr.w	r2, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f043 0208 	orr.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 81f2 	beq.w	8005648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb47 	bl	8005910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_UART_IRQHandler+0x17a>
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04f      	beq.n	800534e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa51 	bl	8005756 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d041      	beq.n	8005346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d9      	bne.n	80052c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d013      	beq.n	800533e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531a:	4a7e      	ldr	r2, [pc, #504]	@ (8005514 <HAL_UART_IRQHandler+0x3e0>)
 800531c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc fade 	bl	80018e4 <HAL_DMA_Abort_IT>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005338:	4610      	mov	r0, r2
 800533a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	e00e      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f99c 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00a      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f998 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e006      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f994 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800535a:	e175      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	bf00      	nop
    return;
 800535e:	e173      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	f040 814f 	bne.w	8005608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8148 	beq.w	8005608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8141 	beq.w	8005608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80b6 	beq.w	8005518 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8145 	beq.w	800564c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ca:	429a      	cmp	r2, r3
 80053cc:	f080 813e 	bcs.w	800564c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b20      	cmp	r3, #32
 80053e0:	f000 8088 	beq.w	80054f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005402:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005410:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800541c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1d9      	bne.n	80053e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005440:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005454:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005458:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800545c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e1      	bne.n	8005430 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800547c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800547e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005482:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005490:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005492:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005496:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800549e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e3      	bne.n	800546c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c4:	f023 0310 	bic.w	r3, r3, #16
 80054c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc f9bd 	bl	800186e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005502:	b29b      	uxth	r3, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	b29b      	uxth	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8bf 	bl	800568e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005510:	e09c      	b.n	800564c <HAL_UART_IRQHandler+0x518>
 8005512:	bf00      	nop
 8005514:	0800581b 	.word	0x0800581b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 808e 	beq.w	8005650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8089 	beq.w	8005650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800554e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005562:	647a      	str	r2, [r7, #68]	@ 0x44
 8005564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e3      	bne.n	800553e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	623b      	str	r3, [r7, #32]
   return(result);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800559a:	633a      	str	r2, [r7, #48]	@ 0x30
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	617b      	str	r3, [r7, #20]
   return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f844 	bl	800568e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005606:	e023      	b.n	8005650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_UART_IRQHandler+0x4f4>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f90e 	bl	8005842 <UART_Transmit_IT>
    return;
 8005626:	e014      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <HAL_UART_IRQHandler+0x51e>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f94d 	bl	80058e0 <UART_EndTransmit_IT>
    return;
 8005646:	e004      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
    return;
 8005648:	bf00      	nop
 800564a:	e002      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
      return;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
      return;
 8005650:	bf00      	nop
  }
}
 8005652:	37e8      	adds	r7, #232	@ 0xe8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b4:	e03b      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d037      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fb ff9b 	bl	80015f8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e03a      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d023      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b80      	cmp	r3, #128	@ 0x80
 80056ea:	d020      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b40      	cmp	r3, #64	@ 0x40
 80056f0:	d01d      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d116      	bne.n	800572e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f81d 	bl	8005756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2208      	movs	r2, #8
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e00f      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4013      	ands	r3, r2
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	429a      	cmp	r2, r3
 800574a:	d0b4      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005756:	b480      	push	{r7}
 8005758:	b095      	sub	sp, #84	@ 0x54
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800577e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d119      	bne.n	8005802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0310 	bic.w	r3, r3, #16
 80057e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ee:	61ba      	str	r2, [r7, #24]
 80057f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6979      	ldr	r1, [r7, #20]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005810:	bf00      	nop
 8005812:	3754      	adds	r7, #84	@ 0x54
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff ff21 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b21      	cmp	r3, #33	@ 0x21
 8005854:	d13e      	bne.n	80058d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800585e:	d114      	bne.n	800588a <UART_Transmit_IT+0x48>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d110      	bne.n	800588a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]
 8005888:	e008      	b.n	800589c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6211      	str	r1, [r2, #32]
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4619      	mov	r1, r3
 80058aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10f      	bne.n	80058d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fea9 	bl	8005658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	@ 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b22      	cmp	r3, #34	@ 0x22
 8005922:	f040 80ae 	bne.w	8005a82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800592e:	d117      	bne.n	8005960 <UART_Receive_IT+0x50>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d113      	bne.n	8005960 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	b29a      	uxth	r2, r3
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	1c9a      	adds	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
 800595e:	e026      	b.n	80059ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005972:	d007      	beq.n	8005984 <UART_Receive_IT+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <UART_Receive_IT+0x82>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e008      	b.n	80059a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4619      	mov	r1, r3
 80059bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d15d      	bne.n	8005a7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0220 	bic.w	r2, r2, #32
 80059d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d135      	bne.n	8005a74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f023 0310 	bic.w	r3, r3, #16
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	623a      	str	r2, [r7, #32]
 8005a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	69f9      	ldr	r1, [r7, #28]
 8005a34:	6a3a      	ldr	r2, [r7, #32]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d10a      	bne.n	8005a66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fe0e 	bl	800568e <HAL_UARTEx_RxEventCallback>
 8005a72:	e002      	b.n	8005a7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fdf8 	bl	800566a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e002      	b.n	8005a84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	@ 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005ac6:	f023 030c 	bic.w	r3, r3, #12
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba0 <UART_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d103      	bne.n	8005afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7ff fa10 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	e002      	b.n	8005b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005afc:	f7ff f9f8 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8005b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009a      	lsls	r2, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	4a22      	ldr	r2, [pc, #136]	@ (8005ba4 <UART_SetConfig+0x118>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	0119      	lsls	r1, r3, #4
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009a      	lsls	r2, r3, #2
 8005b2c:	441a      	add	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <UART_SetConfig+0x118>)
 8005b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2064      	movs	r0, #100	@ 0x64
 8005b42:	fb00 f303 	mul.w	r3, r0, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	3332      	adds	r3, #50	@ 0x32
 8005b4c:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <UART_SetConfig+0x118>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b58:	4419      	add	r1, r3
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009a      	lsls	r2, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <UART_SetConfig+0x118>)
 8005b72:	fba3 0302 	umull	r0, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2064      	movs	r0, #100	@ 0x64
 8005b7a:	fb00 f303 	mul.w	r3, r0, r3
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	3332      	adds	r3, #50	@ 0x32
 8005b84:	4a07      	ldr	r2, [pc, #28]	@ (8005ba4 <UART_SetConfig+0x118>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	f003 020f 	and.w	r2, r3, #15
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	440a      	add	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40013800 	.word	0x40013800
 8005ba4:	51eb851f 	.word	0x51eb851f

08005ba8 <__cvt>:
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bae:	461d      	mov	r5, r3
 8005bb0:	bfbb      	ittet	lt
 8005bb2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005bb6:	461d      	movlt	r5, r3
 8005bb8:	2300      	movge	r3, #0
 8005bba:	232d      	movlt	r3, #45	@ 0x2d
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	4614      	mov	r4, r2
 8005bc0:	bfb8      	it	lt
 8005bc2:	4614      	movlt	r4, r2
 8005bc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005bc6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005bc8:	7013      	strb	r3, [r2, #0]
 8005bca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005bcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005bd0:	f023 0820 	bic.w	r8, r3, #32
 8005bd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bd8:	d005      	beq.n	8005be6 <__cvt+0x3e>
 8005bda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bde:	d100      	bne.n	8005be2 <__cvt+0x3a>
 8005be0:	3601      	adds	r6, #1
 8005be2:	2302      	movs	r3, #2
 8005be4:	e000      	b.n	8005be8 <__cvt+0x40>
 8005be6:	2303      	movs	r3, #3
 8005be8:	aa07      	add	r2, sp, #28
 8005bea:	9204      	str	r2, [sp, #16]
 8005bec:	aa06      	add	r2, sp, #24
 8005bee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bf2:	e9cd 3600 	strd	r3, r6, [sp]
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	f001 f985 	bl	8006f08 <_dtoa_r>
 8005bfe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c02:	4607      	mov	r7, r0
 8005c04:	d119      	bne.n	8005c3a <__cvt+0x92>
 8005c06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c08:	07db      	lsls	r3, r3, #31
 8005c0a:	d50e      	bpl.n	8005c2a <__cvt+0x82>
 8005c0c:	eb00 0906 	add.w	r9, r0, r6
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	f7fa fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8005c1c:	b108      	cbz	r0, 8005c22 <__cvt+0x7a>
 8005c1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c22:	2230      	movs	r2, #48	@ 0x30
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	454b      	cmp	r3, r9
 8005c28:	d31e      	bcc.n	8005c68 <__cvt+0xc0>
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005c30:	1bdb      	subs	r3, r3, r7
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	b008      	add	sp, #32
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c3e:	eb00 0906 	add.w	r9, r0, r6
 8005c42:	d1e5      	bne.n	8005c10 <__cvt+0x68>
 8005c44:	7803      	ldrb	r3, [r0, #0]
 8005c46:	2b30      	cmp	r3, #48	@ 0x30
 8005c48:	d10a      	bne.n	8005c60 <__cvt+0xb8>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8005c56:	b918      	cbnz	r0, 8005c60 <__cvt+0xb8>
 8005c58:	f1c6 0601 	rsb	r6, r6, #1
 8005c5c:	f8ca 6000 	str.w	r6, [sl]
 8005c60:	f8da 3000 	ldr.w	r3, [sl]
 8005c64:	4499      	add	r9, r3
 8005c66:	e7d3      	b.n	8005c10 <__cvt+0x68>
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	9107      	str	r1, [sp, #28]
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e7d9      	b.n	8005c24 <__cvt+0x7c>

08005c70 <__exponent>:
 8005c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c72:	2900      	cmp	r1, #0
 8005c74:	bfb6      	itet	lt
 8005c76:	232d      	movlt	r3, #45	@ 0x2d
 8005c78:	232b      	movge	r3, #43	@ 0x2b
 8005c7a:	4249      	neglt	r1, r1
 8005c7c:	2909      	cmp	r1, #9
 8005c7e:	7002      	strb	r2, [r0, #0]
 8005c80:	7043      	strb	r3, [r0, #1]
 8005c82:	dd29      	ble.n	8005cd8 <__exponent+0x68>
 8005c84:	f10d 0307 	add.w	r3, sp, #7
 8005c88:	461d      	mov	r5, r3
 8005c8a:	270a      	movs	r7, #10
 8005c8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c90:	461a      	mov	r2, r3
 8005c92:	fb07 1416 	mls	r4, r7, r6, r1
 8005c96:	3430      	adds	r4, #48	@ 0x30
 8005c98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	2c63      	cmp	r4, #99	@ 0x63
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ca6:	dcf1      	bgt.n	8005c8c <__exponent+0x1c>
 8005ca8:	3130      	adds	r1, #48	@ 0x30
 8005caa:	1e94      	subs	r4, r2, #2
 8005cac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	1c41      	adds	r1, r0, #1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	d30a      	bcc.n	8005cce <__exponent+0x5e>
 8005cb8:	f10d 0309 	add.w	r3, sp, #9
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	42ac      	cmp	r4, r5
 8005cc0:	bf88      	it	hi
 8005cc2:	2300      	movhi	r3, #0
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	4403      	add	r3, r0
 8005cc8:	1a18      	subs	r0, r3, r0
 8005cca:	b003      	add	sp, #12
 8005ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cd6:	e7ed      	b.n	8005cb4 <__exponent+0x44>
 8005cd8:	2330      	movs	r3, #48	@ 0x30
 8005cda:	3130      	adds	r1, #48	@ 0x30
 8005cdc:	7083      	strb	r3, [r0, #2]
 8005cde:	70c1      	strb	r1, [r0, #3]
 8005ce0:	1d03      	adds	r3, r0, #4
 8005ce2:	e7f1      	b.n	8005cc8 <__exponent+0x58>

08005ce4 <_printf_float>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	b091      	sub	sp, #68	@ 0x44
 8005cea:	460c      	mov	r4, r1
 8005cec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005cf0:	4616      	mov	r6, r2
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	f000 fff5 	bl	8006ce4 <_localeconv_r>
 8005cfa:	6803      	ldr	r3, [r0, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	9308      	str	r3, [sp, #32]
 8005d00:	f7fa fa26 	bl	8000150 <strlen>
 8005d04:	2300      	movs	r3, #0
 8005d06:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d08:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d0e:	3307      	adds	r3, #7
 8005d10:	f023 0307 	bic.w	r3, r3, #7
 8005d14:	f103 0208 	add.w	r2, r3, #8
 8005d18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d1c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d20:	f8c8 2000 	str.w	r2, [r8]
 8005d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fb0 <_printf_float+0x2cc>)
 8005d40:	f7fa fe64 	bl	8000a0c <__aeabi_dcmpun>
 8005d44:	bb70      	cbnz	r0, 8005da4 <_printf_float+0xc0>
 8005d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	4b98      	ldr	r3, [pc, #608]	@ (8005fb0 <_printf_float+0x2cc>)
 8005d50:	f7fa fe3e 	bl	80009d0 <__aeabi_dcmple>
 8005d54:	bb30      	cbnz	r0, 8005da4 <_printf_float+0xc0>
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	f7fa fe2d 	bl	80009bc <__aeabi_dcmplt>
 8005d62:	b110      	cbz	r0, 8005d6a <_printf_float+0x86>
 8005d64:	232d      	movs	r3, #45	@ 0x2d
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d6a:	4a92      	ldr	r2, [pc, #584]	@ (8005fb4 <_printf_float+0x2d0>)
 8005d6c:	4b92      	ldr	r3, [pc, #584]	@ (8005fb8 <_printf_float+0x2d4>)
 8005d6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d72:	bf94      	ite	ls
 8005d74:	4690      	movls	r8, r2
 8005d76:	4698      	movhi	r8, r3
 8005d78:	2303      	movs	r3, #3
 8005d7a:	f04f 0900 	mov.w	r9, #0
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	f02b 0304 	bic.w	r3, fp, #4
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	4633      	mov	r3, r6
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	9700      	str	r7, [sp, #0]
 8005d8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d90:	f000 f9d4 	bl	800613c <_printf_common>
 8005d94:	3001      	adds	r0, #1
 8005d96:	f040 8090 	bne.w	8005eba <_printf_float+0x1d6>
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	b011      	add	sp, #68	@ 0x44
 8005da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fe2e 	bl	8000a0c <__aeabi_dcmpun>
 8005db0:	b148      	cbz	r0, 8005dc6 <_printf_float+0xe2>
 8005db2:	464b      	mov	r3, r9
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfb8      	it	lt
 8005db8:	232d      	movlt	r3, #45	@ 0x2d
 8005dba:	4a80      	ldr	r2, [pc, #512]	@ (8005fbc <_printf_float+0x2d8>)
 8005dbc:	bfb8      	it	lt
 8005dbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc0 <_printf_float+0x2dc>)
 8005dc4:	e7d3      	b.n	8005d6e <_printf_float+0x8a>
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	d13f      	bne.n	8005e50 <_printf_float+0x16c>
 8005dd0:	2306      	movs	r3, #6
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	9206      	str	r2, [sp, #24]
 8005dde:	aa0e      	add	r2, sp, #56	@ 0x38
 8005de0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005de4:	aa0d      	add	r2, sp, #52	@ 0x34
 8005de6:	9203      	str	r2, [sp, #12]
 8005de8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005dec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	4642      	mov	r2, r8
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4628      	mov	r0, r5
 8005df8:	464b      	mov	r3, r9
 8005dfa:	910a      	str	r1, [sp, #40]	@ 0x28
 8005dfc:	f7ff fed4 	bl	8005ba8 <__cvt>
 8005e00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e02:	4680      	mov	r8, r0
 8005e04:	2947      	cmp	r1, #71	@ 0x47
 8005e06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005e08:	d128      	bne.n	8005e5c <_printf_float+0x178>
 8005e0a:	1cc8      	adds	r0, r1, #3
 8005e0c:	db02      	blt.n	8005e14 <_printf_float+0x130>
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	4299      	cmp	r1, r3
 8005e12:	dd40      	ble.n	8005e96 <_printf_float+0x1b2>
 8005e14:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e18:	fa5f fa8a 	uxtb.w	sl, sl
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	3901      	subs	r1, #1
 8005e20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e24:	910d      	str	r1, [sp, #52]	@ 0x34
 8005e26:	f7ff ff23 	bl	8005c70 <__exponent>
 8005e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e2c:	4681      	mov	r9, r0
 8005e2e:	1813      	adds	r3, r2, r0
 8005e30:	2a01      	cmp	r2, #1
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	dc02      	bgt.n	8005e3c <_printf_float+0x158>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	07d2      	lsls	r2, r2, #31
 8005e3a:	d501      	bpl.n	8005e40 <_printf_float+0x15c>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d09e      	beq.n	8005d86 <_printf_float+0xa2>
 8005e48:	232d      	movs	r3, #45	@ 0x2d
 8005e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4e:	e79a      	b.n	8005d86 <_printf_float+0xa2>
 8005e50:	2947      	cmp	r1, #71	@ 0x47
 8005e52:	d1bf      	bne.n	8005dd4 <_printf_float+0xf0>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1bd      	bne.n	8005dd4 <_printf_float+0xf0>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e7ba      	b.n	8005dd2 <_printf_float+0xee>
 8005e5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e60:	d9dc      	bls.n	8005e1c <_printf_float+0x138>
 8005e62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e66:	d118      	bne.n	8005e9a <_printf_float+0x1b6>
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	dd0b      	ble.n	8005e86 <_printf_float+0x1a2>
 8005e6e:	6121      	str	r1, [r4, #16]
 8005e70:	b913      	cbnz	r3, 8005e78 <_printf_float+0x194>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	07d0      	lsls	r0, r2, #31
 8005e76:	d502      	bpl.n	8005e7e <_printf_float+0x19a>
 8005e78:	3301      	adds	r3, #1
 8005e7a:	440b      	add	r3, r1
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e84:	e7dc      	b.n	8005e40 <_printf_float+0x15c>
 8005e86:	b913      	cbnz	r3, 8005e8e <_printf_float+0x1aa>
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	07d2      	lsls	r2, r2, #31
 8005e8c:	d501      	bpl.n	8005e92 <_printf_float+0x1ae>
 8005e8e:	3302      	adds	r3, #2
 8005e90:	e7f4      	b.n	8005e7c <_printf_float+0x198>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7f2      	b.n	8005e7c <_printf_float+0x198>
 8005e96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	db05      	blt.n	8005eac <_printf_float+0x1c8>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	6121      	str	r1, [r4, #16]
 8005ea4:	07d8      	lsls	r0, r3, #31
 8005ea6:	d5ea      	bpl.n	8005e7e <_printf_float+0x19a>
 8005ea8:	1c4b      	adds	r3, r1, #1
 8005eaa:	e7e7      	b.n	8005e7c <_printf_float+0x198>
 8005eac:	2900      	cmp	r1, #0
 8005eae:	bfcc      	ite	gt
 8005eb0:	2201      	movgt	r2, #1
 8005eb2:	f1c1 0202 	rsble	r2, r1, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	e7e0      	b.n	8005e7c <_printf_float+0x198>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	055a      	lsls	r2, r3, #21
 8005ebe:	d407      	bmi.n	8005ed0 <_printf_float+0x1ec>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d12b      	bne.n	8005f26 <_printf_float+0x242>
 8005ece:	e764      	b.n	8005d9a <_printf_float+0xb6>
 8005ed0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ed4:	f240 80dc 	bls.w	8006090 <_printf_float+0x3ac>
 8005ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f7fa fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d033      	beq.n	8005f50 <_printf_float+0x26c>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	4a35      	ldr	r2, [pc, #212]	@ (8005fc4 <_printf_float+0x2e0>)
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af51 	beq.w	8005d9a <_printf_float+0xb6>
 8005ef8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005efc:	4543      	cmp	r3, r8
 8005efe:	db02      	blt.n	8005f06 <_printf_float+0x222>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07d8      	lsls	r0, r3, #31
 8005f04:	d50f      	bpl.n	8005f26 <_printf_float+0x242>
 8005f06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	f43f af42 	beq.w	8005d9a <_printf_float+0xb6>
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f1e:	f104 0a1a 	add.w	sl, r4, #26
 8005f22:	45c8      	cmp	r8, r9
 8005f24:	dc09      	bgt.n	8005f3a <_printf_float+0x256>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	079b      	lsls	r3, r3, #30
 8005f2a:	f100 8102 	bmi.w	8006132 <_printf_float+0x44e>
 8005f2e:	68e0      	ldr	r0, [r4, #12]
 8005f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f32:	4298      	cmp	r0, r3
 8005f34:	bfb8      	it	lt
 8005f36:	4618      	movlt	r0, r3
 8005f38:	e731      	b.n	8005d9e <_printf_float+0xba>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f af28 	beq.w	8005d9a <_printf_float+0xb6>
 8005f4a:	f109 0901 	add.w	r9, r9, #1
 8005f4e:	e7e8      	b.n	8005f22 <_printf_float+0x23e>
 8005f50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dc38      	bgt.n	8005fc8 <_printf_float+0x2e4>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <_printf_float+0x2e0>)
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f af1a 	beq.w	8005d9a <_printf_float+0xb6>
 8005f66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005f6a:	ea59 0303 	orrs.w	r3, r9, r3
 8005f6e:	d102      	bne.n	8005f76 <_printf_float+0x292>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07d9      	lsls	r1, r3, #31
 8005f74:	d5d7      	bpl.n	8005f26 <_printf_float+0x242>
 8005f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f af0a 	beq.w	8005d9a <_printf_float+0xb6>
 8005f86:	f04f 0a00 	mov.w	sl, #0
 8005f8a:	f104 0b1a 	add.w	fp, r4, #26
 8005f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f90:	425b      	negs	r3, r3
 8005f92:	4553      	cmp	r3, sl
 8005f94:	dc01      	bgt.n	8005f9a <_printf_float+0x2b6>
 8005f96:	464b      	mov	r3, r9
 8005f98:	e793      	b.n	8005ec2 <_printf_float+0x1de>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	465a      	mov	r2, fp
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f aef8 	beq.w	8005d9a <_printf_float+0xb6>
 8005faa:	f10a 0a01 	add.w	sl, sl, #1
 8005fae:	e7ee      	b.n	8005f8e <_printf_float+0x2aa>
 8005fb0:	7fefffff 	.word	0x7fefffff
 8005fb4:	0800a3da 	.word	0x0800a3da
 8005fb8:	0800a3de 	.word	0x0800a3de
 8005fbc:	0800a3e2 	.word	0x0800a3e2
 8005fc0:	0800a3e6 	.word	0x0800a3e6
 8005fc4:	0800a3ea 	.word	0x0800a3ea
 8005fc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005fce:	4553      	cmp	r3, sl
 8005fd0:	bfa8      	it	ge
 8005fd2:	4653      	movge	r3, sl
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	dc36      	bgt.n	8006048 <_printf_float+0x364>
 8005fda:	f04f 0b00 	mov.w	fp, #0
 8005fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe2:	f104 021a 	add.w	r2, r4, #26
 8005fe6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fea:	eba3 0309 	sub.w	r3, r3, r9
 8005fee:	455b      	cmp	r3, fp
 8005ff0:	dc31      	bgt.n	8006056 <_printf_float+0x372>
 8005ff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ff4:	459a      	cmp	sl, r3
 8005ff6:	dc3a      	bgt.n	800606e <_printf_float+0x38a>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	07da      	lsls	r2, r3, #31
 8005ffc:	d437      	bmi.n	800606e <_printf_float+0x38a>
 8005ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006000:	ebaa 0903 	sub.w	r9, sl, r3
 8006004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006006:	ebaa 0303 	sub.w	r3, sl, r3
 800600a:	4599      	cmp	r9, r3
 800600c:	bfa8      	it	ge
 800600e:	4699      	movge	r9, r3
 8006010:	f1b9 0f00 	cmp.w	r9, #0
 8006014:	dc33      	bgt.n	800607e <_printf_float+0x39a>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800601e:	f104 0b1a 	add.w	fp, r4, #26
 8006022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006024:	ebaa 0303 	sub.w	r3, sl, r3
 8006028:	eba3 0309 	sub.w	r3, r3, r9
 800602c:	4543      	cmp	r3, r8
 800602e:	f77f af7a 	ble.w	8005f26 <_printf_float+0x242>
 8006032:	2301      	movs	r3, #1
 8006034:	465a      	mov	r2, fp
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f aeac 	beq.w	8005d9a <_printf_float+0xb6>
 8006042:	f108 0801 	add.w	r8, r8, #1
 8006046:	e7ec      	b.n	8006022 <_printf_float+0x33e>
 8006048:	4642      	mov	r2, r8
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1c2      	bne.n	8005fda <_printf_float+0x2f6>
 8006054:	e6a1      	b.n	8005d9a <_printf_float+0xb6>
 8006056:	2301      	movs	r3, #1
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	920a      	str	r2, [sp, #40]	@ 0x28
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae9a 	beq.w	8005d9a <_printf_float+0xb6>
 8006066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006068:	f10b 0b01 	add.w	fp, fp, #1
 800606c:	e7bb      	b.n	8005fe6 <_printf_float+0x302>
 800606e:	4631      	mov	r1, r6
 8006070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d1c0      	bne.n	8005ffe <_printf_float+0x31a>
 800607c:	e68d      	b.n	8005d9a <_printf_float+0xb6>
 800607e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006080:	464b      	mov	r3, r9
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	4442      	add	r2, r8
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	d1c3      	bne.n	8006016 <_printf_float+0x332>
 800608e:	e684      	b.n	8005d9a <_printf_float+0xb6>
 8006090:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006094:	f1ba 0f01 	cmp.w	sl, #1
 8006098:	dc01      	bgt.n	800609e <_printf_float+0x3ba>
 800609a:	07db      	lsls	r3, r3, #31
 800609c:	d536      	bpl.n	800610c <_printf_float+0x428>
 800609e:	2301      	movs	r3, #1
 80060a0:	4642      	mov	r2, r8
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae76 	beq.w	8005d9a <_printf_float+0xb6>
 80060ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae6e 	beq.w	8005d9a <_printf_float+0xb6>
 80060be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060c2:	2200      	movs	r2, #0
 80060c4:	2300      	movs	r3, #0
 80060c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060ca:	f7fa fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80060ce:	b9c0      	cbnz	r0, 8006102 <_printf_float+0x41e>
 80060d0:	4653      	mov	r3, sl
 80060d2:	f108 0201 	add.w	r2, r8, #1
 80060d6:	4631      	mov	r1, r6
 80060d8:	4628      	mov	r0, r5
 80060da:	47b8      	blx	r7
 80060dc:	3001      	adds	r0, #1
 80060de:	d10c      	bne.n	80060fa <_printf_float+0x416>
 80060e0:	e65b      	b.n	8005d9a <_printf_float+0xb6>
 80060e2:	2301      	movs	r3, #1
 80060e4:	465a      	mov	r2, fp
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae54 	beq.w	8005d9a <_printf_float+0xb6>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	45d0      	cmp	r8, sl
 80060f8:	dbf3      	blt.n	80060e2 <_printf_float+0x3fe>
 80060fa:	464b      	mov	r3, r9
 80060fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006100:	e6e0      	b.n	8005ec4 <_printf_float+0x1e0>
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	f104 0b1a 	add.w	fp, r4, #26
 800610a:	e7f4      	b.n	80060f6 <_printf_float+0x412>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	e7e1      	b.n	80060d6 <_printf_float+0x3f2>
 8006112:	2301      	movs	r3, #1
 8006114:	464a      	mov	r2, r9
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f ae3c 	beq.w	8005d9a <_printf_float+0xb6>
 8006122:	f108 0801 	add.w	r8, r8, #1
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	4543      	cmp	r3, r8
 800612e:	dcf0      	bgt.n	8006112 <_printf_float+0x42e>
 8006130:	e6fd      	b.n	8005f2e <_printf_float+0x24a>
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	f104 0919 	add.w	r9, r4, #25
 800613a:	e7f4      	b.n	8006126 <_printf_float+0x442>

0800613c <_printf_common>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	4616      	mov	r6, r2
 8006142:	4698      	mov	r8, r3
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4607      	mov	r7, r0
 800614a:	4293      	cmp	r3, r2
 800614c:	bfb8      	it	lt
 800614e:	4613      	movlt	r3, r2
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006156:	460c      	mov	r4, r1
 8006158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800615c:	b10a      	cbz	r2, 8006162 <_printf_common+0x26>
 800615e:	3301      	adds	r3, #1
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	0699      	lsls	r1, r3, #26
 8006166:	bf42      	ittt	mi
 8006168:	6833      	ldrmi	r3, [r6, #0]
 800616a:	3302      	addmi	r3, #2
 800616c:	6033      	strmi	r3, [r6, #0]
 800616e:	6825      	ldr	r5, [r4, #0]
 8006170:	f015 0506 	ands.w	r5, r5, #6
 8006174:	d106      	bne.n	8006184 <_printf_common+0x48>
 8006176:	f104 0a19 	add.w	sl, r4, #25
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	6832      	ldr	r2, [r6, #0]
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ab      	cmp	r3, r5
 8006182:	dc2b      	bgt.n	80061dc <_printf_common+0xa0>
 8006184:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	3b00      	subs	r3, #0
 800618c:	bf18      	it	ne
 800618e:	2301      	movne	r3, #1
 8006190:	0692      	lsls	r2, r2, #26
 8006192:	d430      	bmi.n	80061f6 <_printf_common+0xba>
 8006194:	4641      	mov	r1, r8
 8006196:	4638      	mov	r0, r7
 8006198:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800619c:	47c8      	blx	r9
 800619e:	3001      	adds	r0, #1
 80061a0:	d023      	beq.n	80061ea <_printf_common+0xae>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	f003 0306 	and.w	r3, r3, #6
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	bf14      	ite	ne
 80061ae:	2500      	movne	r5, #0
 80061b0:	6833      	ldreq	r3, [r6, #0]
 80061b2:	f04f 0600 	mov.w	r6, #0
 80061b6:	bf08      	it	eq
 80061b8:	68e5      	ldreq	r5, [r4, #12]
 80061ba:	f104 041a 	add.w	r4, r4, #26
 80061be:	bf08      	it	eq
 80061c0:	1aed      	subeq	r5, r5, r3
 80061c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061c6:	bf08      	it	eq
 80061c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bfc4      	itt	gt
 80061d0:	1a9b      	subgt	r3, r3, r2
 80061d2:	18ed      	addgt	r5, r5, r3
 80061d4:	42b5      	cmp	r5, r6
 80061d6:	d11a      	bne.n	800620e <_printf_common+0xd2>
 80061d8:	2000      	movs	r0, #0
 80061da:	e008      	b.n	80061ee <_printf_common+0xb2>
 80061dc:	2301      	movs	r3, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	4641      	mov	r1, r8
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c8      	blx	r9
 80061e6:	3001      	adds	r0, #1
 80061e8:	d103      	bne.n	80061f2 <_printf_common+0xb6>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	3501      	adds	r5, #1
 80061f4:	e7c1      	b.n	800617a <_printf_common+0x3e>
 80061f6:	2030      	movs	r0, #48	@ 0x30
 80061f8:	18e1      	adds	r1, r4, r3
 80061fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006204:	4422      	add	r2, r4
 8006206:	3302      	adds	r3, #2
 8006208:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800620c:	e7c2      	b.n	8006194 <_printf_common+0x58>
 800620e:	2301      	movs	r3, #1
 8006210:	4622      	mov	r2, r4
 8006212:	4641      	mov	r1, r8
 8006214:	4638      	mov	r0, r7
 8006216:	47c8      	blx	r9
 8006218:	3001      	adds	r0, #1
 800621a:	d0e6      	beq.n	80061ea <_printf_common+0xae>
 800621c:	3601      	adds	r6, #1
 800621e:	e7d9      	b.n	80061d4 <_printf_common+0x98>

08006220 <_printf_i>:
 8006220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	7e0f      	ldrb	r7, [r1, #24]
 8006226:	4691      	mov	r9, r2
 8006228:	2f78      	cmp	r7, #120	@ 0x78
 800622a:	4680      	mov	r8, r0
 800622c:	460c      	mov	r4, r1
 800622e:	469a      	mov	sl, r3
 8006230:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006236:	d807      	bhi.n	8006248 <_printf_i+0x28>
 8006238:	2f62      	cmp	r7, #98	@ 0x62
 800623a:	d80a      	bhi.n	8006252 <_printf_i+0x32>
 800623c:	2f00      	cmp	r7, #0
 800623e:	f000 80d3 	beq.w	80063e8 <_printf_i+0x1c8>
 8006242:	2f58      	cmp	r7, #88	@ 0x58
 8006244:	f000 80ba 	beq.w	80063bc <_printf_i+0x19c>
 8006248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800624c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006250:	e03a      	b.n	80062c8 <_printf_i+0xa8>
 8006252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006256:	2b15      	cmp	r3, #21
 8006258:	d8f6      	bhi.n	8006248 <_printf_i+0x28>
 800625a:	a101      	add	r1, pc, #4	@ (adr r1, 8006260 <_printf_i+0x40>)
 800625c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006260:	080062b9 	.word	0x080062b9
 8006264:	080062cd 	.word	0x080062cd
 8006268:	08006249 	.word	0x08006249
 800626c:	08006249 	.word	0x08006249
 8006270:	08006249 	.word	0x08006249
 8006274:	08006249 	.word	0x08006249
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006249 	.word	0x08006249
 8006280:	08006249 	.word	0x08006249
 8006284:	08006249 	.word	0x08006249
 8006288:	08006249 	.word	0x08006249
 800628c:	080063cf 	.word	0x080063cf
 8006290:	080062f7 	.word	0x080062f7
 8006294:	08006389 	.word	0x08006389
 8006298:	08006249 	.word	0x08006249
 800629c:	08006249 	.word	0x08006249
 80062a0:	080063f1 	.word	0x080063f1
 80062a4:	08006249 	.word	0x08006249
 80062a8:	080062f7 	.word	0x080062f7
 80062ac:	08006249 	.word	0x08006249
 80062b0:	08006249 	.word	0x08006249
 80062b4:	08006391 	.word	0x08006391
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6032      	str	r2, [r6, #0]
 80062c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062c8:	2301      	movs	r3, #1
 80062ca:	e09e      	b.n	800640a <_printf_i+0x1ea>
 80062cc:	6833      	ldr	r3, [r6, #0]
 80062ce:	6820      	ldr	r0, [r4, #0]
 80062d0:	1d19      	adds	r1, r3, #4
 80062d2:	6031      	str	r1, [r6, #0]
 80062d4:	0606      	lsls	r6, r0, #24
 80062d6:	d501      	bpl.n	80062dc <_printf_i+0xbc>
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	e003      	b.n	80062e4 <_printf_i+0xc4>
 80062dc:	0645      	lsls	r5, r0, #25
 80062de:	d5fb      	bpl.n	80062d8 <_printf_i+0xb8>
 80062e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	da03      	bge.n	80062f0 <_printf_i+0xd0>
 80062e8:	232d      	movs	r3, #45	@ 0x2d
 80062ea:	426d      	negs	r5, r5
 80062ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f0:	230a      	movs	r3, #10
 80062f2:	4859      	ldr	r0, [pc, #356]	@ (8006458 <_printf_i+0x238>)
 80062f4:	e011      	b.n	800631a <_printf_i+0xfa>
 80062f6:	6821      	ldr	r1, [r4, #0]
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	0608      	lsls	r0, r1, #24
 80062fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006300:	d402      	bmi.n	8006308 <_printf_i+0xe8>
 8006302:	0649      	lsls	r1, r1, #25
 8006304:	bf48      	it	mi
 8006306:	b2ad      	uxthmi	r5, r5
 8006308:	2f6f      	cmp	r7, #111	@ 0x6f
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	bf14      	ite	ne
 800630e:	230a      	movne	r3, #10
 8006310:	2308      	moveq	r3, #8
 8006312:	4851      	ldr	r0, [pc, #324]	@ (8006458 <_printf_i+0x238>)
 8006314:	2100      	movs	r1, #0
 8006316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800631a:	6866      	ldr	r6, [r4, #4]
 800631c:	2e00      	cmp	r6, #0
 800631e:	bfa8      	it	ge
 8006320:	6821      	ldrge	r1, [r4, #0]
 8006322:	60a6      	str	r6, [r4, #8]
 8006324:	bfa4      	itt	ge
 8006326:	f021 0104 	bicge.w	r1, r1, #4
 800632a:	6021      	strge	r1, [r4, #0]
 800632c:	b90d      	cbnz	r5, 8006332 <_printf_i+0x112>
 800632e:	2e00      	cmp	r6, #0
 8006330:	d04b      	beq.n	80063ca <_printf_i+0x1aa>
 8006332:	4616      	mov	r6, r2
 8006334:	fbb5 f1f3 	udiv	r1, r5, r3
 8006338:	fb03 5711 	mls	r7, r3, r1, r5
 800633c:	5dc7      	ldrb	r7, [r0, r7]
 800633e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006342:	462f      	mov	r7, r5
 8006344:	42bb      	cmp	r3, r7
 8006346:	460d      	mov	r5, r1
 8006348:	d9f4      	bls.n	8006334 <_printf_i+0x114>
 800634a:	2b08      	cmp	r3, #8
 800634c:	d10b      	bne.n	8006366 <_printf_i+0x146>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	07df      	lsls	r7, r3, #31
 8006352:	d508      	bpl.n	8006366 <_printf_i+0x146>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	6861      	ldr	r1, [r4, #4]
 8006358:	4299      	cmp	r1, r3
 800635a:	bfde      	ittt	le
 800635c:	2330      	movle	r3, #48	@ 0x30
 800635e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006362:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006366:	1b92      	subs	r2, r2, r6
 8006368:	6122      	str	r2, [r4, #16]
 800636a:	464b      	mov	r3, r9
 800636c:	4621      	mov	r1, r4
 800636e:	4640      	mov	r0, r8
 8006370:	f8cd a000 	str.w	sl, [sp]
 8006374:	aa03      	add	r2, sp, #12
 8006376:	f7ff fee1 	bl	800613c <_printf_common>
 800637a:	3001      	adds	r0, #1
 800637c:	d14a      	bne.n	8006414 <_printf_i+0x1f4>
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f043 0320 	orr.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2778      	movs	r7, #120	@ 0x78
 8006392:	4832      	ldr	r0, [pc, #200]	@ (800645c <_printf_i+0x23c>)
 8006394:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6831      	ldr	r1, [r6, #0]
 800639c:	061f      	lsls	r7, r3, #24
 800639e:	f851 5b04 	ldr.w	r5, [r1], #4
 80063a2:	d402      	bmi.n	80063aa <_printf_i+0x18a>
 80063a4:	065f      	lsls	r7, r3, #25
 80063a6:	bf48      	it	mi
 80063a8:	b2ad      	uxthmi	r5, r5
 80063aa:	6031      	str	r1, [r6, #0]
 80063ac:	07d9      	lsls	r1, r3, #31
 80063ae:	bf44      	itt	mi
 80063b0:	f043 0320 	orrmi.w	r3, r3, #32
 80063b4:	6023      	strmi	r3, [r4, #0]
 80063b6:	b11d      	cbz	r5, 80063c0 <_printf_i+0x1a0>
 80063b8:	2310      	movs	r3, #16
 80063ba:	e7ab      	b.n	8006314 <_printf_i+0xf4>
 80063bc:	4826      	ldr	r0, [pc, #152]	@ (8006458 <_printf_i+0x238>)
 80063be:	e7e9      	b.n	8006394 <_printf_i+0x174>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	f023 0320 	bic.w	r3, r3, #32
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	e7f6      	b.n	80063b8 <_printf_i+0x198>
 80063ca:	4616      	mov	r6, r2
 80063cc:	e7bd      	b.n	800634a <_printf_i+0x12a>
 80063ce:	6833      	ldr	r3, [r6, #0]
 80063d0:	6825      	ldr	r5, [r4, #0]
 80063d2:	1d18      	adds	r0, r3, #4
 80063d4:	6961      	ldr	r1, [r4, #20]
 80063d6:	6030      	str	r0, [r6, #0]
 80063d8:	062e      	lsls	r6, r5, #24
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	d501      	bpl.n	80063e2 <_printf_i+0x1c2>
 80063de:	6019      	str	r1, [r3, #0]
 80063e0:	e002      	b.n	80063e8 <_printf_i+0x1c8>
 80063e2:	0668      	lsls	r0, r5, #25
 80063e4:	d5fb      	bpl.n	80063de <_printf_i+0x1be>
 80063e6:	8019      	strh	r1, [r3, #0]
 80063e8:	2300      	movs	r3, #0
 80063ea:	4616      	mov	r6, r2
 80063ec:	6123      	str	r3, [r4, #16]
 80063ee:	e7bc      	b.n	800636a <_printf_i+0x14a>
 80063f0:	6833      	ldr	r3, [r6, #0]
 80063f2:	2100      	movs	r1, #0
 80063f4:	1d1a      	adds	r2, r3, #4
 80063f6:	6032      	str	r2, [r6, #0]
 80063f8:	681e      	ldr	r6, [r3, #0]
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 fce8 	bl	8006dd2 <memchr>
 8006402:	b108      	cbz	r0, 8006408 <_printf_i+0x1e8>
 8006404:	1b80      	subs	r0, r0, r6
 8006406:	6060      	str	r0, [r4, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	2300      	movs	r3, #0
 800640e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006412:	e7aa      	b.n	800636a <_printf_i+0x14a>
 8006414:	4632      	mov	r2, r6
 8006416:	4649      	mov	r1, r9
 8006418:	4640      	mov	r0, r8
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	47d0      	blx	sl
 800641e:	3001      	adds	r0, #1
 8006420:	d0ad      	beq.n	800637e <_printf_i+0x15e>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	079b      	lsls	r3, r3, #30
 8006426:	d413      	bmi.n	8006450 <_printf_i+0x230>
 8006428:	68e0      	ldr	r0, [r4, #12]
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	4298      	cmp	r0, r3
 800642e:	bfb8      	it	lt
 8006430:	4618      	movlt	r0, r3
 8006432:	e7a6      	b.n	8006382 <_printf_i+0x162>
 8006434:	2301      	movs	r3, #1
 8006436:	4632      	mov	r2, r6
 8006438:	4649      	mov	r1, r9
 800643a:	4640      	mov	r0, r8
 800643c:	47d0      	blx	sl
 800643e:	3001      	adds	r0, #1
 8006440:	d09d      	beq.n	800637e <_printf_i+0x15e>
 8006442:	3501      	adds	r5, #1
 8006444:	68e3      	ldr	r3, [r4, #12]
 8006446:	9903      	ldr	r1, [sp, #12]
 8006448:	1a5b      	subs	r3, r3, r1
 800644a:	42ab      	cmp	r3, r5
 800644c:	dcf2      	bgt.n	8006434 <_printf_i+0x214>
 800644e:	e7eb      	b.n	8006428 <_printf_i+0x208>
 8006450:	2500      	movs	r5, #0
 8006452:	f104 0619 	add.w	r6, r4, #25
 8006456:	e7f5      	b.n	8006444 <_printf_i+0x224>
 8006458:	0800a3ec 	.word	0x0800a3ec
 800645c:	0800a3fd 	.word	0x0800a3fd

08006460 <_scanf_float>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	b087      	sub	sp, #28
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	688b      	ldr	r3, [r1, #8]
 800646a:	4617      	mov	r7, r2
 800646c:	1e5a      	subs	r2, r3, #1
 800646e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006472:	bf82      	ittt	hi
 8006474:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006478:	eb03 0b05 	addhi.w	fp, r3, r5
 800647c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006480:	460a      	mov	r2, r1
 8006482:	f04f 0500 	mov.w	r5, #0
 8006486:	bf88      	it	hi
 8006488:	608b      	strhi	r3, [r1, #8]
 800648a:	680b      	ldr	r3, [r1, #0]
 800648c:	4680      	mov	r8, r0
 800648e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006492:	f842 3b1c 	str.w	r3, [r2], #28
 8006496:	460c      	mov	r4, r1
 8006498:	bf98      	it	ls
 800649a:	f04f 0b00 	movls.w	fp, #0
 800649e:	4616      	mov	r6, r2
 80064a0:	46aa      	mov	sl, r5
 80064a2:	46a9      	mov	r9, r5
 80064a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064a8:	9201      	str	r2, [sp, #4]
 80064aa:	9502      	str	r5, [sp, #8]
 80064ac:	68a2      	ldr	r2, [r4, #8]
 80064ae:	b152      	cbz	r2, 80064c6 <_scanf_float+0x66>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80064b6:	d865      	bhi.n	8006584 <_scanf_float+0x124>
 80064b8:	2b40      	cmp	r3, #64	@ 0x40
 80064ba:	d83d      	bhi.n	8006538 <_scanf_float+0xd8>
 80064bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80064c0:	b2c8      	uxtb	r0, r1
 80064c2:	280e      	cmp	r0, #14
 80064c4:	d93b      	bls.n	800653e <_scanf_float+0xde>
 80064c6:	f1b9 0f00 	cmp.w	r9, #0
 80064ca:	d003      	beq.n	80064d4 <_scanf_float+0x74>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d2:	6023      	str	r3, [r4, #0]
 80064d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064d8:	f1ba 0f01 	cmp.w	sl, #1
 80064dc:	f200 8118 	bhi.w	8006710 <_scanf_float+0x2b0>
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	429e      	cmp	r6, r3
 80064e4:	f200 8109 	bhi.w	80066fa <_scanf_float+0x29a>
 80064e8:	2001      	movs	r0, #1
 80064ea:	b007      	add	sp, #28
 80064ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80064f4:	2a0d      	cmp	r2, #13
 80064f6:	d8e6      	bhi.n	80064c6 <_scanf_float+0x66>
 80064f8:	a101      	add	r1, pc, #4	@ (adr r1, 8006500 <_scanf_float+0xa0>)
 80064fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006647 	.word	0x08006647
 8006504:	080064c7 	.word	0x080064c7
 8006508:	080064c7 	.word	0x080064c7
 800650c:	080064c7 	.word	0x080064c7
 8006510:	080066a7 	.word	0x080066a7
 8006514:	0800667f 	.word	0x0800667f
 8006518:	080064c7 	.word	0x080064c7
 800651c:	080064c7 	.word	0x080064c7
 8006520:	08006655 	.word	0x08006655
 8006524:	080064c7 	.word	0x080064c7
 8006528:	080064c7 	.word	0x080064c7
 800652c:	080064c7 	.word	0x080064c7
 8006530:	080064c7 	.word	0x080064c7
 8006534:	0800660d 	.word	0x0800660d
 8006538:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800653c:	e7da      	b.n	80064f4 <_scanf_float+0x94>
 800653e:	290e      	cmp	r1, #14
 8006540:	d8c1      	bhi.n	80064c6 <_scanf_float+0x66>
 8006542:	a001      	add	r0, pc, #4	@ (adr r0, 8006548 <_scanf_float+0xe8>)
 8006544:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006548:	080065fd 	.word	0x080065fd
 800654c:	080064c7 	.word	0x080064c7
 8006550:	080065fd 	.word	0x080065fd
 8006554:	08006693 	.word	0x08006693
 8006558:	080064c7 	.word	0x080064c7
 800655c:	080065a5 	.word	0x080065a5
 8006560:	080065e3 	.word	0x080065e3
 8006564:	080065e3 	.word	0x080065e3
 8006568:	080065e3 	.word	0x080065e3
 800656c:	080065e3 	.word	0x080065e3
 8006570:	080065e3 	.word	0x080065e3
 8006574:	080065e3 	.word	0x080065e3
 8006578:	080065e3 	.word	0x080065e3
 800657c:	080065e3 	.word	0x080065e3
 8006580:	080065e3 	.word	0x080065e3
 8006584:	2b6e      	cmp	r3, #110	@ 0x6e
 8006586:	d809      	bhi.n	800659c <_scanf_float+0x13c>
 8006588:	2b60      	cmp	r3, #96	@ 0x60
 800658a:	d8b1      	bhi.n	80064f0 <_scanf_float+0x90>
 800658c:	2b54      	cmp	r3, #84	@ 0x54
 800658e:	d07b      	beq.n	8006688 <_scanf_float+0x228>
 8006590:	2b59      	cmp	r3, #89	@ 0x59
 8006592:	d198      	bne.n	80064c6 <_scanf_float+0x66>
 8006594:	2d07      	cmp	r5, #7
 8006596:	d196      	bne.n	80064c6 <_scanf_float+0x66>
 8006598:	2508      	movs	r5, #8
 800659a:	e02c      	b.n	80065f6 <_scanf_float+0x196>
 800659c:	2b74      	cmp	r3, #116	@ 0x74
 800659e:	d073      	beq.n	8006688 <_scanf_float+0x228>
 80065a0:	2b79      	cmp	r3, #121	@ 0x79
 80065a2:	e7f6      	b.n	8006592 <_scanf_float+0x132>
 80065a4:	6821      	ldr	r1, [r4, #0]
 80065a6:	05c8      	lsls	r0, r1, #23
 80065a8:	d51b      	bpl.n	80065e2 <_scanf_float+0x182>
 80065aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80065ae:	6021      	str	r1, [r4, #0]
 80065b0:	f109 0901 	add.w	r9, r9, #1
 80065b4:	f1bb 0f00 	cmp.w	fp, #0
 80065b8:	d003      	beq.n	80065c2 <_scanf_float+0x162>
 80065ba:	3201      	adds	r2, #1
 80065bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065c0:	60a2      	str	r2, [r4, #8]
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	3301      	adds	r3, #1
 80065cc:	6123      	str	r3, [r4, #16]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	607b      	str	r3, [r7, #4]
 80065d6:	f340 8087 	ble.w	80066e8 <_scanf_float+0x288>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	e764      	b.n	80064ac <_scanf_float+0x4c>
 80065e2:	eb1a 0105 	adds.w	r1, sl, r5
 80065e6:	f47f af6e 	bne.w	80064c6 <_scanf_float+0x66>
 80065ea:	460d      	mov	r5, r1
 80065ec:	468a      	mov	sl, r1
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	f806 3b01 	strb.w	r3, [r6], #1
 80065fa:	e7e2      	b.n	80065c2 <_scanf_float+0x162>
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	0610      	lsls	r0, r2, #24
 8006600:	f57f af61 	bpl.w	80064c6 <_scanf_float+0x66>
 8006604:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006608:	6022      	str	r2, [r4, #0]
 800660a:	e7f4      	b.n	80065f6 <_scanf_float+0x196>
 800660c:	f1ba 0f00 	cmp.w	sl, #0
 8006610:	d10e      	bne.n	8006630 <_scanf_float+0x1d0>
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	d10e      	bne.n	8006636 <_scanf_float+0x1d6>
 8006618:	6822      	ldr	r2, [r4, #0]
 800661a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800661e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006622:	d108      	bne.n	8006636 <_scanf_float+0x1d6>
 8006624:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006628:	f04f 0a01 	mov.w	sl, #1
 800662c:	6022      	str	r2, [r4, #0]
 800662e:	e7e2      	b.n	80065f6 <_scanf_float+0x196>
 8006630:	f1ba 0f02 	cmp.w	sl, #2
 8006634:	d055      	beq.n	80066e2 <_scanf_float+0x282>
 8006636:	2d01      	cmp	r5, #1
 8006638:	d002      	beq.n	8006640 <_scanf_float+0x1e0>
 800663a:	2d04      	cmp	r5, #4
 800663c:	f47f af43 	bne.w	80064c6 <_scanf_float+0x66>
 8006640:	3501      	adds	r5, #1
 8006642:	b2ed      	uxtb	r5, r5
 8006644:	e7d7      	b.n	80065f6 <_scanf_float+0x196>
 8006646:	f1ba 0f01 	cmp.w	sl, #1
 800664a:	f47f af3c 	bne.w	80064c6 <_scanf_float+0x66>
 800664e:	f04f 0a02 	mov.w	sl, #2
 8006652:	e7d0      	b.n	80065f6 <_scanf_float+0x196>
 8006654:	b97d      	cbnz	r5, 8006676 <_scanf_float+0x216>
 8006656:	f1b9 0f00 	cmp.w	r9, #0
 800665a:	f47f af37 	bne.w	80064cc <_scanf_float+0x6c>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006664:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006668:	f040 8103 	bne.w	8006872 <_scanf_float+0x412>
 800666c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006670:	2501      	movs	r5, #1
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	e7bf      	b.n	80065f6 <_scanf_float+0x196>
 8006676:	2d03      	cmp	r5, #3
 8006678:	d0e2      	beq.n	8006640 <_scanf_float+0x1e0>
 800667a:	2d05      	cmp	r5, #5
 800667c:	e7de      	b.n	800663c <_scanf_float+0x1dc>
 800667e:	2d02      	cmp	r5, #2
 8006680:	f47f af21 	bne.w	80064c6 <_scanf_float+0x66>
 8006684:	2503      	movs	r5, #3
 8006686:	e7b6      	b.n	80065f6 <_scanf_float+0x196>
 8006688:	2d06      	cmp	r5, #6
 800668a:	f47f af1c 	bne.w	80064c6 <_scanf_float+0x66>
 800668e:	2507      	movs	r5, #7
 8006690:	e7b1      	b.n	80065f6 <_scanf_float+0x196>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	0591      	lsls	r1, r2, #22
 8006696:	f57f af16 	bpl.w	80064c6 <_scanf_float+0x66>
 800669a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80066a4:	e7a7      	b.n	80065f6 <_scanf_float+0x196>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80066ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80066b0:	d006      	beq.n	80066c0 <_scanf_float+0x260>
 80066b2:	0550      	lsls	r0, r2, #21
 80066b4:	f57f af07 	bpl.w	80064c6 <_scanf_float+0x66>
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	f000 80d9 	beq.w	8006872 <_scanf_float+0x412>
 80066c0:	0591      	lsls	r1, r2, #22
 80066c2:	bf58      	it	pl
 80066c4:	9902      	ldrpl	r1, [sp, #8]
 80066c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066ca:	bf58      	it	pl
 80066cc:	eba9 0101 	subpl.w	r1, r9, r1
 80066d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	bf58      	it	pl
 80066da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	e789      	b.n	80065f6 <_scanf_float+0x196>
 80066e2:	f04f 0a03 	mov.w	sl, #3
 80066e6:	e786      	b.n	80065f6 <_scanf_float+0x196>
 80066e8:	4639      	mov	r1, r7
 80066ea:	4640      	mov	r0, r8
 80066ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80066f0:	4798      	blx	r3
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f43f aeda 	beq.w	80064ac <_scanf_float+0x4c>
 80066f8:	e6e5      	b.n	80064c6 <_scanf_float+0x66>
 80066fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066fe:	463a      	mov	r2, r7
 8006700:	4640      	mov	r0, r8
 8006702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006706:	4798      	blx	r3
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	3b01      	subs	r3, #1
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	e6e7      	b.n	80064e0 <_scanf_float+0x80>
 8006710:	1e6b      	subs	r3, r5, #1
 8006712:	2b06      	cmp	r3, #6
 8006714:	d824      	bhi.n	8006760 <_scanf_float+0x300>
 8006716:	2d02      	cmp	r5, #2
 8006718:	d836      	bhi.n	8006788 <_scanf_float+0x328>
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	429e      	cmp	r6, r3
 800671e:	f67f aee3 	bls.w	80064e8 <_scanf_float+0x88>
 8006722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006726:	463a      	mov	r2, r7
 8006728:	4640      	mov	r0, r8
 800672a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800672e:	4798      	blx	r3
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	3b01      	subs	r3, #1
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	e7f0      	b.n	800671a <_scanf_float+0x2ba>
 8006738:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800673c:	463a      	mov	r2, r7
 800673e:	4640      	mov	r0, r8
 8006740:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006744:	4798      	blx	r3
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	3b01      	subs	r3, #1
 800674a:	6123      	str	r3, [r4, #16]
 800674c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006750:	fa5f fa8a 	uxtb.w	sl, sl
 8006754:	f1ba 0f02 	cmp.w	sl, #2
 8006758:	d1ee      	bne.n	8006738 <_scanf_float+0x2d8>
 800675a:	3d03      	subs	r5, #3
 800675c:	b2ed      	uxtb	r5, r5
 800675e:	1b76      	subs	r6, r6, r5
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	05da      	lsls	r2, r3, #23
 8006764:	d530      	bpl.n	80067c8 <_scanf_float+0x368>
 8006766:	055b      	lsls	r3, r3, #21
 8006768:	d511      	bpl.n	800678e <_scanf_float+0x32e>
 800676a:	9b01      	ldr	r3, [sp, #4]
 800676c:	429e      	cmp	r6, r3
 800676e:	f67f aebb 	bls.w	80064e8 <_scanf_float+0x88>
 8006772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006776:	463a      	mov	r2, r7
 8006778:	4640      	mov	r0, r8
 800677a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800677e:	4798      	blx	r3
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	3b01      	subs	r3, #1
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	e7f0      	b.n	800676a <_scanf_float+0x30a>
 8006788:	46aa      	mov	sl, r5
 800678a:	46b3      	mov	fp, r6
 800678c:	e7de      	b.n	800674c <_scanf_float+0x2ec>
 800678e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	2965      	cmp	r1, #101	@ 0x65
 8006796:	f103 33ff 	add.w	r3, r3, #4294967295
 800679a:	f106 35ff 	add.w	r5, r6, #4294967295
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	d00c      	beq.n	80067bc <_scanf_float+0x35c>
 80067a2:	2945      	cmp	r1, #69	@ 0x45
 80067a4:	d00a      	beq.n	80067bc <_scanf_float+0x35c>
 80067a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067aa:	463a      	mov	r2, r7
 80067ac:	4640      	mov	r0, r8
 80067ae:	4798      	blx	r3
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	1eb5      	subs	r5, r6, #2
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	463a      	mov	r2, r7
 80067be:	4640      	mov	r0, r8
 80067c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067c4:	4798      	blx	r3
 80067c6:	462e      	mov	r6, r5
 80067c8:	6822      	ldr	r2, [r4, #0]
 80067ca:	f012 0210 	ands.w	r2, r2, #16
 80067ce:	d001      	beq.n	80067d4 <_scanf_float+0x374>
 80067d0:	2000      	movs	r0, #0
 80067d2:	e68a      	b.n	80064ea <_scanf_float+0x8a>
 80067d4:	7032      	strb	r2, [r6, #0]
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e0:	d11c      	bne.n	800681c <_scanf_float+0x3bc>
 80067e2:	9b02      	ldr	r3, [sp, #8]
 80067e4:	454b      	cmp	r3, r9
 80067e6:	eba3 0209 	sub.w	r2, r3, r9
 80067ea:	d123      	bne.n	8006834 <_scanf_float+0x3d4>
 80067ec:	2200      	movs	r2, #0
 80067ee:	4640      	mov	r0, r8
 80067f0:	9901      	ldr	r1, [sp, #4]
 80067f2:	f002 fcf1 	bl	80091d8 <_strtod_r>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f015 0f02 	tst.w	r5, #2
 8006800:	4606      	mov	r6, r0
 8006802:	460f      	mov	r7, r1
 8006804:	f103 0204 	add.w	r2, r3, #4
 8006808:	d01f      	beq.n	800684a <_scanf_float+0x3ea>
 800680a:	9903      	ldr	r1, [sp, #12]
 800680c:	600a      	str	r2, [r1, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	e9c3 6700 	strd	r6, r7, [r3]
 8006814:	68e3      	ldr	r3, [r4, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60e3      	str	r3, [r4, #12]
 800681a:	e7d9      	b.n	80067d0 <_scanf_float+0x370>
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0e4      	beq.n	80067ec <_scanf_float+0x38c>
 8006822:	9905      	ldr	r1, [sp, #20]
 8006824:	230a      	movs	r3, #10
 8006826:	4640      	mov	r0, r8
 8006828:	3101      	adds	r1, #1
 800682a:	f002 fd55 	bl	80092d8 <_strtol_r>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	9e05      	ldr	r6, [sp, #20]
 8006832:	1ac2      	subs	r2, r0, r3
 8006834:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006838:	429e      	cmp	r6, r3
 800683a:	bf28      	it	cs
 800683c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006840:	4630      	mov	r0, r6
 8006842:	490d      	ldr	r1, [pc, #52]	@ (8006878 <_scanf_float+0x418>)
 8006844:	f000 f94e 	bl	8006ae4 <siprintf>
 8006848:	e7d0      	b.n	80067ec <_scanf_float+0x38c>
 800684a:	076d      	lsls	r5, r5, #29
 800684c:	d4dd      	bmi.n	800680a <_scanf_float+0x3aa>
 800684e:	9d03      	ldr	r5, [sp, #12]
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	681d      	ldr	r5, [r3, #0]
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	f7fa f8d8 	bl	8000a0c <__aeabi_dcmpun>
 800685c:	b120      	cbz	r0, 8006868 <_scanf_float+0x408>
 800685e:	4807      	ldr	r0, [pc, #28]	@ (800687c <_scanf_float+0x41c>)
 8006860:	f000 fac6 	bl	8006df0 <nanf>
 8006864:	6028      	str	r0, [r5, #0]
 8006866:	e7d5      	b.n	8006814 <_scanf_float+0x3b4>
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7fa f92c 	bl	8000ac8 <__aeabi_d2f>
 8006870:	e7f8      	b.n	8006864 <_scanf_float+0x404>
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	e62d      	b.n	80064d4 <_scanf_float+0x74>
 8006878:	0800a40e 	.word	0x0800a40e
 800687c:	0800a7a5 	.word	0x0800a7a5

08006880 <std>:
 8006880:	2300      	movs	r3, #0
 8006882:	b510      	push	{r4, lr}
 8006884:	4604      	mov	r4, r0
 8006886:	e9c0 3300 	strd	r3, r3, [r0]
 800688a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800688e:	6083      	str	r3, [r0, #8]
 8006890:	8181      	strh	r1, [r0, #12]
 8006892:	6643      	str	r3, [r0, #100]	@ 0x64
 8006894:	81c2      	strh	r2, [r0, #14]
 8006896:	6183      	str	r3, [r0, #24]
 8006898:	4619      	mov	r1, r3
 800689a:	2208      	movs	r2, #8
 800689c:	305c      	adds	r0, #92	@ 0x5c
 800689e:	f000 fa19 	bl	8006cd4 <memset>
 80068a2:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <std+0x58>)
 80068a4:	6224      	str	r4, [r4, #32]
 80068a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80068a8:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <std+0x5c>)
 80068aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ac:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <std+0x60>)
 80068ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068b0:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <std+0x64>)
 80068b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80068b4:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <std+0x68>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d006      	beq.n	80068c8 <std+0x48>
 80068ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068be:	4294      	cmp	r4, r2
 80068c0:	d002      	beq.n	80068c8 <std+0x48>
 80068c2:	33d0      	adds	r3, #208	@ 0xd0
 80068c4:	429c      	cmp	r4, r3
 80068c6:	d105      	bne.n	80068d4 <std+0x54>
 80068c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	f000 ba7c 	b.w	8006dcc <__retarget_lock_init_recursive>
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	bf00      	nop
 80068d8:	08006b25 	.word	0x08006b25
 80068dc:	08006b47 	.word	0x08006b47
 80068e0:	08006b7f 	.word	0x08006b7f
 80068e4:	08006ba3 	.word	0x08006ba3
 80068e8:	200002f8 	.word	0x200002f8

080068ec <stdio_exit_handler>:
 80068ec:	4a02      	ldr	r2, [pc, #8]	@ (80068f8 <stdio_exit_handler+0xc>)
 80068ee:	4903      	ldr	r1, [pc, #12]	@ (80068fc <stdio_exit_handler+0x10>)
 80068f0:	4803      	ldr	r0, [pc, #12]	@ (8006900 <stdio_exit_handler+0x14>)
 80068f2:	f000 b869 	b.w	80069c8 <_fwalk_sglue>
 80068f6:	bf00      	nop
 80068f8:	2000000c 	.word	0x2000000c
 80068fc:	0800990d 	.word	0x0800990d
 8006900:	2000001c 	.word	0x2000001c

08006904 <cleanup_stdio>:
 8006904:	6841      	ldr	r1, [r0, #4]
 8006906:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <cleanup_stdio+0x34>)
 8006908:	b510      	push	{r4, lr}
 800690a:	4299      	cmp	r1, r3
 800690c:	4604      	mov	r4, r0
 800690e:	d001      	beq.n	8006914 <cleanup_stdio+0x10>
 8006910:	f002 fffc 	bl	800990c <_fflush_r>
 8006914:	68a1      	ldr	r1, [r4, #8]
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <cleanup_stdio+0x38>)
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <cleanup_stdio+0x1e>
 800691c:	4620      	mov	r0, r4
 800691e:	f002 fff5 	bl	800990c <_fflush_r>
 8006922:	68e1      	ldr	r1, [r4, #12]
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <cleanup_stdio+0x3c>)
 8006926:	4299      	cmp	r1, r3
 8006928:	d004      	beq.n	8006934 <cleanup_stdio+0x30>
 800692a:	4620      	mov	r0, r4
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006930:	f002 bfec 	b.w	800990c <_fflush_r>
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	200002f8 	.word	0x200002f8
 800693c:	20000360 	.word	0x20000360
 8006940:	200003c8 	.word	0x200003c8

08006944 <global_stdio_init.part.0>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <global_stdio_init.part.0+0x30>)
 8006948:	4c0b      	ldr	r4, [pc, #44]	@ (8006978 <global_stdio_init.part.0+0x34>)
 800694a:	4a0c      	ldr	r2, [pc, #48]	@ (800697c <global_stdio_init.part.0+0x38>)
 800694c:	4620      	mov	r0, r4
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	2104      	movs	r1, #4
 8006952:	2200      	movs	r2, #0
 8006954:	f7ff ff94 	bl	8006880 <std>
 8006958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800695c:	2201      	movs	r2, #1
 800695e:	2109      	movs	r1, #9
 8006960:	f7ff ff8e 	bl	8006880 <std>
 8006964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006968:	2202      	movs	r2, #2
 800696a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696e:	2112      	movs	r1, #18
 8006970:	f7ff bf86 	b.w	8006880 <std>
 8006974:	20000430 	.word	0x20000430
 8006978:	200002f8 	.word	0x200002f8
 800697c:	080068ed 	.word	0x080068ed

08006980 <__sfp_lock_acquire>:
 8006980:	4801      	ldr	r0, [pc, #4]	@ (8006988 <__sfp_lock_acquire+0x8>)
 8006982:	f000 ba24 	b.w	8006dce <__retarget_lock_acquire_recursive>
 8006986:	bf00      	nop
 8006988:	20000439 	.word	0x20000439

0800698c <__sfp_lock_release>:
 800698c:	4801      	ldr	r0, [pc, #4]	@ (8006994 <__sfp_lock_release+0x8>)
 800698e:	f000 ba1f 	b.w	8006dd0 <__retarget_lock_release_recursive>
 8006992:	bf00      	nop
 8006994:	20000439 	.word	0x20000439

08006998 <__sinit>:
 8006998:	b510      	push	{r4, lr}
 800699a:	4604      	mov	r4, r0
 800699c:	f7ff fff0 	bl	8006980 <__sfp_lock_acquire>
 80069a0:	6a23      	ldr	r3, [r4, #32]
 80069a2:	b11b      	cbz	r3, 80069ac <__sinit+0x14>
 80069a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a8:	f7ff bff0 	b.w	800698c <__sfp_lock_release>
 80069ac:	4b04      	ldr	r3, [pc, #16]	@ (80069c0 <__sinit+0x28>)
 80069ae:	6223      	str	r3, [r4, #32]
 80069b0:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <__sinit+0x2c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f5      	bne.n	80069a4 <__sinit+0xc>
 80069b8:	f7ff ffc4 	bl	8006944 <global_stdio_init.part.0>
 80069bc:	e7f2      	b.n	80069a4 <__sinit+0xc>
 80069be:	bf00      	nop
 80069c0:	08006905 	.word	0x08006905
 80069c4:	20000430 	.word	0x20000430

080069c8 <_fwalk_sglue>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	4607      	mov	r7, r0
 80069ce:	4688      	mov	r8, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	2600      	movs	r6, #0
 80069d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069d8:	f1b9 0901 	subs.w	r9, r9, #1
 80069dc:	d505      	bpl.n	80069ea <_fwalk_sglue+0x22>
 80069de:	6824      	ldr	r4, [r4, #0]
 80069e0:	2c00      	cmp	r4, #0
 80069e2:	d1f7      	bne.n	80069d4 <_fwalk_sglue+0xc>
 80069e4:	4630      	mov	r0, r6
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d907      	bls.n	8006a00 <_fwalk_sglue+0x38>
 80069f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f4:	3301      	adds	r3, #1
 80069f6:	d003      	beq.n	8006a00 <_fwalk_sglue+0x38>
 80069f8:	4629      	mov	r1, r5
 80069fa:	4638      	mov	r0, r7
 80069fc:	47c0      	blx	r8
 80069fe:	4306      	orrs	r6, r0
 8006a00:	3568      	adds	r5, #104	@ 0x68
 8006a02:	e7e9      	b.n	80069d8 <_fwalk_sglue+0x10>

08006a04 <iprintf>:
 8006a04:	b40f      	push	{r0, r1, r2, r3}
 8006a06:	b507      	push	{r0, r1, r2, lr}
 8006a08:	4906      	ldr	r1, [pc, #24]	@ (8006a24 <iprintf+0x20>)
 8006a0a:	ab04      	add	r3, sp, #16
 8006a0c:	6808      	ldr	r0, [r1, #0]
 8006a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a12:	6881      	ldr	r1, [r0, #8]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	f002 fde1 	bl	80095dc <_vfiprintf_r>
 8006a1a:	b003      	add	sp, #12
 8006a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a20:	b004      	add	sp, #16
 8006a22:	4770      	bx	lr
 8006a24:	20000018 	.word	0x20000018

08006a28 <_puts_r>:
 8006a28:	6a03      	ldr	r3, [r0, #32]
 8006a2a:	b570      	push	{r4, r5, r6, lr}
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460e      	mov	r6, r1
 8006a30:	6884      	ldr	r4, [r0, #8]
 8006a32:	b90b      	cbnz	r3, 8006a38 <_puts_r+0x10>
 8006a34:	f7ff ffb0 	bl	8006998 <__sinit>
 8006a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a3a:	07db      	lsls	r3, r3, #31
 8006a3c:	d405      	bmi.n	8006a4a <_puts_r+0x22>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	0598      	lsls	r0, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_puts_r+0x22>
 8006a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a46:	f000 f9c2 	bl	8006dce <__retarget_lock_acquire_recursive>
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	0719      	lsls	r1, r3, #28
 8006a4e:	d502      	bpl.n	8006a56 <_puts_r+0x2e>
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d135      	bne.n	8006ac2 <_puts_r+0x9a>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 f8e5 	bl	8006c28 <__swsetup_r>
 8006a5e:	b380      	cbz	r0, 8006ac2 <_puts_r+0x9a>
 8006a60:	f04f 35ff 	mov.w	r5, #4294967295
 8006a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d405      	bmi.n	8006a76 <_puts_r+0x4e>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	059b      	lsls	r3, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_puts_r+0x4e>
 8006a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a72:	f000 f9ad 	bl	8006dd0 <__retarget_lock_release_recursive>
 8006a76:	4628      	mov	r0, r5
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da04      	bge.n	8006a88 <_puts_r+0x60>
 8006a7e:	69a2      	ldr	r2, [r4, #24]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	dc17      	bgt.n	8006ab4 <_puts_r+0x8c>
 8006a84:	290a      	cmp	r1, #10
 8006a86:	d015      	beq.n	8006ab4 <_puts_r+0x8c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	7019      	strb	r1, [r3, #0]
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a96:	3b01      	subs	r3, #1
 8006a98:	60a3      	str	r3, [r4, #8]
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d1ed      	bne.n	8006a7a <_puts_r+0x52>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da11      	bge.n	8006ac6 <_puts_r+0x9e>
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	210a      	movs	r1, #10
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 f87f 	bl	8006baa <__swbuf_r>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d0d7      	beq.n	8006a60 <_puts_r+0x38>
 8006ab0:	250a      	movs	r5, #10
 8006ab2:	e7d7      	b.n	8006a64 <_puts_r+0x3c>
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 f877 	bl	8006baa <__swbuf_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1e7      	bne.n	8006a90 <_puts_r+0x68>
 8006ac0:	e7ce      	b.n	8006a60 <_puts_r+0x38>
 8006ac2:	3e01      	subs	r6, #1
 8006ac4:	e7e4      	b.n	8006a90 <_puts_r+0x68>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	220a      	movs	r2, #10
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e7ee      	b.n	8006ab0 <_puts_r+0x88>
	...

08006ad4 <puts>:
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <puts+0xc>)
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f7ff bfa5 	b.w	8006a28 <_puts_r>
 8006ade:	bf00      	nop
 8006ae0:	20000018 	.word	0x20000018

08006ae4 <siprintf>:
 8006ae4:	b40e      	push	{r1, r2, r3}
 8006ae6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006aea:	b500      	push	{lr}
 8006aec:	b09c      	sub	sp, #112	@ 0x70
 8006aee:	ab1d      	add	r3, sp, #116	@ 0x74
 8006af0:	9002      	str	r0, [sp, #8]
 8006af2:	9006      	str	r0, [sp, #24]
 8006af4:	9107      	str	r1, [sp, #28]
 8006af6:	9104      	str	r1, [sp, #16]
 8006af8:	4808      	ldr	r0, [pc, #32]	@ (8006b1c <siprintf+0x38>)
 8006afa:	4909      	ldr	r1, [pc, #36]	@ (8006b20 <siprintf+0x3c>)
 8006afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b00:	9105      	str	r1, [sp, #20]
 8006b02:	6800      	ldr	r0, [r0, #0]
 8006b04:	a902      	add	r1, sp, #8
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	f002 fc44 	bl	8009394 <_svfiprintf_r>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	b01c      	add	sp, #112	@ 0x70
 8006b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b18:	b003      	add	sp, #12
 8006b1a:	4770      	bx	lr
 8006b1c:	20000018 	.word	0x20000018
 8006b20:	ffff0208 	.word	0xffff0208

08006b24 <__sread>:
 8006b24:	b510      	push	{r4, lr}
 8006b26:	460c      	mov	r4, r1
 8006b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2c:	f000 f900 	bl	8006d30 <_read_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	bfab      	itete	ge
 8006b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b36:	89a3      	ldrhlt	r3, [r4, #12]
 8006b38:	181b      	addge	r3, r3, r0
 8006b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b3e:	bfac      	ite	ge
 8006b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b42:	81a3      	strhlt	r3, [r4, #12]
 8006b44:	bd10      	pop	{r4, pc}

08006b46 <__swrite>:
 8006b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4a:	461f      	mov	r7, r3
 8006b4c:	898b      	ldrh	r3, [r1, #12]
 8006b4e:	4605      	mov	r5, r0
 8006b50:	05db      	lsls	r3, r3, #23
 8006b52:	460c      	mov	r4, r1
 8006b54:	4616      	mov	r6, r2
 8006b56:	d505      	bpl.n	8006b64 <__swrite+0x1e>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	f000 f8d4 	bl	8006d0c <_lseek_r>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	4632      	mov	r2, r6
 8006b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	463b      	mov	r3, r7
 8006b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7a:	f000 b8eb 	b.w	8006d54 <_write_r>

08006b7e <__sseek>:
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	460c      	mov	r4, r1
 8006b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b86:	f000 f8c1 	bl	8006d0c <_lseek_r>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	bf15      	itete	ne
 8006b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b9a:	81a3      	strheq	r3, [r4, #12]
 8006b9c:	bf18      	it	ne
 8006b9e:	81a3      	strhne	r3, [r4, #12]
 8006ba0:	bd10      	pop	{r4, pc}

08006ba2 <__sclose>:
 8006ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba6:	f000 b8a1 	b.w	8006cec <_close_r>

08006baa <__swbuf_r>:
 8006baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bac:	460e      	mov	r6, r1
 8006bae:	4614      	mov	r4, r2
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	b118      	cbz	r0, 8006bbc <__swbuf_r+0x12>
 8006bb4:	6a03      	ldr	r3, [r0, #32]
 8006bb6:	b90b      	cbnz	r3, 8006bbc <__swbuf_r+0x12>
 8006bb8:	f7ff feee 	bl	8006998 <__sinit>
 8006bbc:	69a3      	ldr	r3, [r4, #24]
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	071a      	lsls	r2, r3, #28
 8006bc4:	d501      	bpl.n	8006bca <__swbuf_r+0x20>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	b943      	cbnz	r3, 8006bdc <__swbuf_r+0x32>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 f82b 	bl	8006c28 <__swsetup_r>
 8006bd2:	b118      	cbz	r0, 8006bdc <__swbuf_r+0x32>
 8006bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bd8:	4638      	mov	r0, r7
 8006bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	b2f6      	uxtb	r6, r6
 8006be2:	1a98      	subs	r0, r3, r2
 8006be4:	6963      	ldr	r3, [r4, #20]
 8006be6:	4637      	mov	r7, r6
 8006be8:	4283      	cmp	r3, r0
 8006bea:	dc05      	bgt.n	8006bf8 <__swbuf_r+0x4e>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f002 fe8c 	bl	800990c <_fflush_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1ed      	bne.n	8006bd4 <__swbuf_r+0x2a>
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	60a3      	str	r3, [r4, #8]
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	701e      	strb	r6, [r3, #0]
 8006c06:	6962      	ldr	r2, [r4, #20]
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d004      	beq.n	8006c18 <__swbuf_r+0x6e>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	07db      	lsls	r3, r3, #31
 8006c12:	d5e1      	bpl.n	8006bd8 <__swbuf_r+0x2e>
 8006c14:	2e0a      	cmp	r6, #10
 8006c16:	d1df      	bne.n	8006bd8 <__swbuf_r+0x2e>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f002 fe76 	bl	800990c <_fflush_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0d9      	beq.n	8006bd8 <__swbuf_r+0x2e>
 8006c24:	e7d6      	b.n	8006bd4 <__swbuf_r+0x2a>
	...

08006c28 <__swsetup_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <__swsetup_r+0xa8>)
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	460c      	mov	r4, r1
 8006c32:	b118      	cbz	r0, 8006c3c <__swsetup_r+0x14>
 8006c34:	6a03      	ldr	r3, [r0, #32]
 8006c36:	b90b      	cbnz	r3, 8006c3c <__swsetup_r+0x14>
 8006c38:	f7ff feae 	bl	8006998 <__sinit>
 8006c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c40:	0719      	lsls	r1, r3, #28
 8006c42:	d422      	bmi.n	8006c8a <__swsetup_r+0x62>
 8006c44:	06da      	lsls	r2, r3, #27
 8006c46:	d407      	bmi.n	8006c58 <__swsetup_r+0x30>
 8006c48:	2209      	movs	r2, #9
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e033      	b.n	8006cc0 <__swsetup_r+0x98>
 8006c58:	0758      	lsls	r0, r3, #29
 8006c5a:	d512      	bpl.n	8006c82 <__swsetup_r+0x5a>
 8006c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c5e:	b141      	cbz	r1, 8006c72 <__swsetup_r+0x4a>
 8006c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <__swsetup_r+0x46>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f000 ff15 	bl	8007a98 <_free_r>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6063      	str	r3, [r4, #4]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f043 0308 	orr.w	r3, r3, #8
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	b94b      	cbnz	r3, 8006ca2 <__swsetup_r+0x7a>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c98:	d003      	beq.n	8006ca2 <__swsetup_r+0x7a>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f002 fe82 	bl	80099a6 <__smakebuf_r>
 8006ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca6:	f013 0201 	ands.w	r2, r3, #1
 8006caa:	d00a      	beq.n	8006cc2 <__swsetup_r+0x9a>
 8006cac:	2200      	movs	r2, #0
 8006cae:	60a2      	str	r2, [r4, #8]
 8006cb0:	6962      	ldr	r2, [r4, #20]
 8006cb2:	4252      	negs	r2, r2
 8006cb4:	61a2      	str	r2, [r4, #24]
 8006cb6:	6922      	ldr	r2, [r4, #16]
 8006cb8:	b942      	cbnz	r2, 8006ccc <__swsetup_r+0xa4>
 8006cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cbe:	d1c5      	bne.n	8006c4c <__swsetup_r+0x24>
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	0799      	lsls	r1, r3, #30
 8006cc4:	bf58      	it	pl
 8006cc6:	6962      	ldrpl	r2, [r4, #20]
 8006cc8:	60a2      	str	r2, [r4, #8]
 8006cca:	e7f4      	b.n	8006cb6 <__swsetup_r+0x8e>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e7f7      	b.n	8006cc0 <__swsetup_r+0x98>
 8006cd0:	20000018 	.word	0x20000018

08006cd4 <memset>:
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4402      	add	r2, r0
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d100      	bne.n	8006cde <memset+0xa>
 8006cdc:	4770      	bx	lr
 8006cde:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce2:	e7f9      	b.n	8006cd8 <memset+0x4>

08006ce4 <_localeconv_r>:
 8006ce4:	4800      	ldr	r0, [pc, #0]	@ (8006ce8 <_localeconv_r+0x4>)
 8006ce6:	4770      	bx	lr
 8006ce8:	20000158 	.word	0x20000158

08006cec <_close_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4d05      	ldr	r5, [pc, #20]	@ (8006d08 <_close_r+0x1c>)
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7fa fb93 	bl	8001422 <_close>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_close_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_close_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20000434 	.word	0x20000434

08006d0c <_lseek_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	2200      	movs	r2, #0
 8006d16:	4d05      	ldr	r5, [pc, #20]	@ (8006d2c <_lseek_r+0x20>)
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7fa fba5 	bl	800146a <_lseek>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_lseek_r+0x1e>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_lseek_r+0x1e>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20000434 	.word	0x20000434

08006d30 <_read_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4d05      	ldr	r5, [pc, #20]	@ (8006d50 <_read_r+0x20>)
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa fb36 	bl	80013b0 <_read>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_read_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_read_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000434 	.word	0x20000434

08006d54 <_write_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4604      	mov	r4, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4d05      	ldr	r5, [pc, #20]	@ (8006d74 <_write_r+0x20>)
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fa fb41 	bl	80013ea <_write>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_write_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_write_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000434 	.word	0x20000434

08006d78 <__errno>:
 8006d78:	4b01      	ldr	r3, [pc, #4]	@ (8006d80 <__errno+0x8>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000018 	.word	0x20000018

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	2600      	movs	r6, #0
 8006d88:	4d0c      	ldr	r5, [pc, #48]	@ (8006dbc <__libc_init_array+0x38>)
 8006d8a:	4c0d      	ldr	r4, [pc, #52]	@ (8006dc0 <__libc_init_array+0x3c>)
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	f003 fad4 	bl	800a340 <_init>
 8006d98:	2600      	movs	r6, #0
 8006d9a:	4d0a      	ldr	r5, [pc, #40]	@ (8006dc4 <__libc_init_array+0x40>)
 8006d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8006dc8 <__libc_init_array+0x44>)
 8006d9e:	1b64      	subs	r4, r4, r5
 8006da0:	10a4      	asrs	r4, r4, #2
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	4798      	blx	r3
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	4798      	blx	r3
 8006db8:	3601      	adds	r6, #1
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	0800a810 	.word	0x0800a810
 8006dc0:	0800a810 	.word	0x0800a810
 8006dc4:	0800a810 	.word	0x0800a810
 8006dc8:	0800a814 	.word	0x0800a814

08006dcc <__retarget_lock_init_recursive>:
 8006dcc:	4770      	bx	lr

08006dce <__retarget_lock_acquire_recursive>:
 8006dce:	4770      	bx	lr

08006dd0 <__retarget_lock_release_recursive>:
 8006dd0:	4770      	bx	lr

08006dd2 <memchr>:
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	b2c9      	uxtb	r1, r1
 8006dd8:	4402      	add	r2, r0
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	d101      	bne.n	8006de4 <memchr+0x12>
 8006de0:	2000      	movs	r0, #0
 8006de2:	e003      	b.n	8006dec <memchr+0x1a>
 8006de4:	7804      	ldrb	r4, [r0, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	428c      	cmp	r4, r1
 8006dea:	d1f6      	bne.n	8006dda <memchr+0x8>
 8006dec:	bd10      	pop	{r4, pc}
	...

08006df0 <nanf>:
 8006df0:	4800      	ldr	r0, [pc, #0]	@ (8006df4 <nanf+0x4>)
 8006df2:	4770      	bx	lr
 8006df4:	7fc00000 	.word	0x7fc00000

08006df8 <quorem>:
 8006df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	6903      	ldr	r3, [r0, #16]
 8006dfe:	690c      	ldr	r4, [r1, #16]
 8006e00:	4607      	mov	r7, r0
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	db7e      	blt.n	8006f04 <quorem+0x10c>
 8006e06:	3c01      	subs	r4, #1
 8006e08:	00a3      	lsls	r3, r4, #2
 8006e0a:	f100 0514 	add.w	r5, r0, #20
 8006e0e:	f101 0814 	add.w	r8, r1, #20
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e22:	3301      	adds	r3, #1
 8006e24:	429a      	cmp	r2, r3
 8006e26:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e2e:	d32e      	bcc.n	8006e8e <quorem+0x96>
 8006e30:	f04f 0a00 	mov.w	sl, #0
 8006e34:	46c4      	mov	ip, r8
 8006e36:	46ae      	mov	lr, r5
 8006e38:	46d3      	mov	fp, sl
 8006e3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e3e:	b298      	uxth	r0, r3
 8006e40:	fb06 a000 	mla	r0, r6, r0, sl
 8006e44:	0c1b      	lsrs	r3, r3, #16
 8006e46:	0c02      	lsrs	r2, r0, #16
 8006e48:	fb06 2303 	mla	r3, r6, r3, r2
 8006e4c:	f8de 2000 	ldr.w	r2, [lr]
 8006e50:	b280      	uxth	r0, r0
 8006e52:	b292      	uxth	r2, r2
 8006e54:	1a12      	subs	r2, r2, r0
 8006e56:	445a      	add	r2, fp
 8006e58:	f8de 0000 	ldr.w	r0, [lr]
 8006e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e6a:	b292      	uxth	r2, r2
 8006e6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e70:	45e1      	cmp	r9, ip
 8006e72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e76:	f84e 2b04 	str.w	r2, [lr], #4
 8006e7a:	d2de      	bcs.n	8006e3a <quorem+0x42>
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	58eb      	ldr	r3, [r5, r3]
 8006e80:	b92b      	cbnz	r3, 8006e8e <quorem+0x96>
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	429d      	cmp	r5, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	d32f      	bcc.n	8006eec <quorem+0xf4>
 8006e8c:	613c      	str	r4, [r7, #16]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f001 f9c2 	bl	8008218 <__mcmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	db25      	blt.n	8006ee4 <quorem+0xec>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ea0:	f8d1 c000 	ldr.w	ip, [r1]
 8006ea4:	fa1f fe82 	uxth.w	lr, r2
 8006ea8:	fa1f f38c 	uxth.w	r3, ip
 8006eac:	eba3 030e 	sub.w	r3, r3, lr
 8006eb0:	4403      	add	r3, r0
 8006eb2:	0c12      	lsrs	r2, r2, #16
 8006eb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006eb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ec2:	45c1      	cmp	r9, r8
 8006ec4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ec8:	f841 3b04 	str.w	r3, [r1], #4
 8006ecc:	d2e6      	bcs.n	8006e9c <quorem+0xa4>
 8006ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ed6:	b922      	cbnz	r2, 8006ee2 <quorem+0xea>
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	429d      	cmp	r5, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	d30b      	bcc.n	8006ef8 <quorem+0x100>
 8006ee0:	613c      	str	r4, [r7, #16]
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	2a00      	cmp	r2, #0
 8006ef2:	d1cb      	bne.n	8006e8c <quorem+0x94>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	e7c6      	b.n	8006e86 <quorem+0x8e>
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	3b04      	subs	r3, #4
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d1ef      	bne.n	8006ee0 <quorem+0xe8>
 8006f00:	3c01      	subs	r4, #1
 8006f02:	e7ea      	b.n	8006eda <quorem+0xe2>
 8006f04:	2000      	movs	r0, #0
 8006f06:	e7ee      	b.n	8006ee6 <quorem+0xee>

08006f08 <_dtoa_r>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	69c7      	ldr	r7, [r0, #28]
 8006f12:	b097      	sub	sp, #92	@ 0x5c
 8006f14:	4683      	mov	fp, r0
 8006f16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006f1c:	b97f      	cbnz	r7, 8006f3e <_dtoa_r+0x36>
 8006f1e:	2010      	movs	r0, #16
 8006f20:	f000 fe02 	bl	8007b28 <malloc>
 8006f24:	4602      	mov	r2, r0
 8006f26:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f2a:	b920      	cbnz	r0, 8006f36 <_dtoa_r+0x2e>
 8006f2c:	21ef      	movs	r1, #239	@ 0xef
 8006f2e:	4ba8      	ldr	r3, [pc, #672]	@ (80071d0 <_dtoa_r+0x2c8>)
 8006f30:	48a8      	ldr	r0, [pc, #672]	@ (80071d4 <_dtoa_r+0x2cc>)
 8006f32:	f002 fde7 	bl	8009b04 <__assert_func>
 8006f36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f3a:	6007      	str	r7, [r0, #0]
 8006f3c:	60c7      	str	r7, [r0, #12]
 8006f3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	b159      	cbz	r1, 8006f5e <_dtoa_r+0x56>
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4093      	lsls	r3, r2
 8006f4c:	604a      	str	r2, [r1, #4]
 8006f4e:	608b      	str	r3, [r1, #8]
 8006f50:	4658      	mov	r0, fp
 8006f52:	f000 fedf 	bl	8007d14 <_Bfree>
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	1e2b      	subs	r3, r5, #0
 8006f60:	bfaf      	iteee	ge
 8006f62:	2300      	movge	r3, #0
 8006f64:	2201      	movlt	r2, #1
 8006f66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f6a:	9303      	strlt	r3, [sp, #12]
 8006f6c:	bfa8      	it	ge
 8006f6e:	6033      	strge	r3, [r6, #0]
 8006f70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006f74:	4b98      	ldr	r3, [pc, #608]	@ (80071d8 <_dtoa_r+0x2d0>)
 8006f76:	bfb8      	it	lt
 8006f78:	6032      	strlt	r2, [r6, #0]
 8006f7a:	ea33 0308 	bics.w	r3, r3, r8
 8006f7e:	d112      	bne.n	8006fa6 <_dtoa_r+0x9e>
 8006f80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006f8c:	4323      	orrs	r3, r4
 8006f8e:	f000 8550 	beq.w	8007a32 <_dtoa_r+0xb2a>
 8006f92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80071dc <_dtoa_r+0x2d4>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8552 	beq.w	8007a42 <_dtoa_r+0xb3a>
 8006f9e:	f10a 0303 	add.w	r3, sl, #3
 8006fa2:	f000 bd4c 	b.w	8007a3e <_dtoa_r+0xb36>
 8006fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006faa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f7f9 fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 8006fba:	4607      	mov	r7, r0
 8006fbc:	b158      	cbz	r0, 8006fd6 <_dtoa_r+0xce>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fc6:	b113      	cbz	r3, 8006fce <_dtoa_r+0xc6>
 8006fc8:	4b85      	ldr	r3, [pc, #532]	@ (80071e0 <_dtoa_r+0x2d8>)
 8006fca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80071e4 <_dtoa_r+0x2dc>
 8006fd2:	f000 bd36 	b.w	8007a42 <_dtoa_r+0xb3a>
 8006fd6:	ab14      	add	r3, sp, #80	@ 0x50
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	ab15      	add	r3, sp, #84	@ 0x54
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4658      	mov	r0, fp
 8006fe0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006fe4:	f001 fa30 	bl	8008448 <__d2b>
 8006fe8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006fec:	4681      	mov	r9, r0
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d077      	beq.n	80070e2 <_dtoa_r+0x1da>
 8006ff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ff8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007000:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007004:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007008:	9712      	str	r7, [sp, #72]	@ 0x48
 800700a:	4619      	mov	r1, r3
 800700c:	2200      	movs	r2, #0
 800700e:	4b76      	ldr	r3, [pc, #472]	@ (80071e8 <_dtoa_r+0x2e0>)
 8007010:	f7f9 f8aa 	bl	8000168 <__aeabi_dsub>
 8007014:	a368      	add	r3, pc, #416	@ (adr r3, 80071b8 <_dtoa_r+0x2b0>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f7f9 fa5d 	bl	80004d8 <__aeabi_dmul>
 800701e:	a368      	add	r3, pc, #416	@ (adr r3, 80071c0 <_dtoa_r+0x2b8>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f8a2 	bl	800016c <__adddf3>
 8007028:	4604      	mov	r4, r0
 800702a:	4630      	mov	r0, r6
 800702c:	460d      	mov	r5, r1
 800702e:	f7f9 f9e9 	bl	8000404 <__aeabi_i2d>
 8007032:	a365      	add	r3, pc, #404	@ (adr r3, 80071c8 <_dtoa_r+0x2c0>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f7f9 fa4e 	bl	80004d8 <__aeabi_dmul>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4620      	mov	r0, r4
 8007042:	4629      	mov	r1, r5
 8007044:	f7f9 f892 	bl	800016c <__adddf3>
 8007048:	4604      	mov	r4, r0
 800704a:	460d      	mov	r5, r1
 800704c:	f7f9 fcf4 	bl	8000a38 <__aeabi_d2iz>
 8007050:	2200      	movs	r2, #0
 8007052:	4607      	mov	r7, r0
 8007054:	2300      	movs	r3, #0
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 fcaf 	bl	80009bc <__aeabi_dcmplt>
 800705e:	b140      	cbz	r0, 8007072 <_dtoa_r+0x16a>
 8007060:	4638      	mov	r0, r7
 8007062:	f7f9 f9cf 	bl	8000404 <__aeabi_i2d>
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	f7f9 fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800706e:	b900      	cbnz	r0, 8007072 <_dtoa_r+0x16a>
 8007070:	3f01      	subs	r7, #1
 8007072:	2f16      	cmp	r7, #22
 8007074:	d853      	bhi.n	800711e <_dtoa_r+0x216>
 8007076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800707a:	4b5c      	ldr	r3, [pc, #368]	@ (80071ec <_dtoa_r+0x2e4>)
 800707c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 fc9a 	bl	80009bc <__aeabi_dcmplt>
 8007088:	2800      	cmp	r0, #0
 800708a:	d04a      	beq.n	8007122 <_dtoa_r+0x21a>
 800708c:	2300      	movs	r3, #0
 800708e:	3f01      	subs	r7, #1
 8007090:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007092:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	bf46      	itte	mi
 800709a:	f1c3 0801 	rsbmi	r8, r3, #1
 800709e:	2300      	movmi	r3, #0
 80070a0:	f04f 0800 	movpl.w	r8, #0
 80070a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a6:	bf48      	it	mi
 80070a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	db3b      	blt.n	8007126 <_dtoa_r+0x21e>
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80070b2:	443b      	add	r3, r7
 80070b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b6:	2300      	movs	r3, #0
 80070b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d866      	bhi.n	800718e <_dtoa_r+0x286>
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	bfc4      	itt	gt
 80070c4:	3b04      	subgt	r3, #4
 80070c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80070c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070ca:	bfc8      	it	gt
 80070cc:	2400      	movgt	r4, #0
 80070ce:	f1a3 0302 	sub.w	r3, r3, #2
 80070d2:	bfd8      	it	le
 80070d4:	2401      	movle	r4, #1
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d864      	bhi.n	80071a4 <_dtoa_r+0x29c>
 80070da:	e8df f003 	tbb	[pc, r3]
 80070de:	382b      	.short	0x382b
 80070e0:	5636      	.short	0x5636
 80070e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80070e6:	441e      	add	r6, r3
 80070e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	bfc1      	itttt	gt
 80070f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80070f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007100:	bfd6      	itet	le
 8007102:	f1c3 0320 	rsble	r3, r3, #32
 8007106:	ea48 0003 	orrgt.w	r0, r8, r3
 800710a:	fa04 f003 	lslle.w	r0, r4, r3
 800710e:	f7f9 f969 	bl	80003e4 <__aeabi_ui2d>
 8007112:	2201      	movs	r2, #1
 8007114:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007118:	3e01      	subs	r6, #1
 800711a:	9212      	str	r2, [sp, #72]	@ 0x48
 800711c:	e775      	b.n	800700a <_dtoa_r+0x102>
 800711e:	2301      	movs	r3, #1
 8007120:	e7b6      	b.n	8007090 <_dtoa_r+0x188>
 8007122:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007124:	e7b5      	b.n	8007092 <_dtoa_r+0x18a>
 8007126:	427b      	negs	r3, r7
 8007128:	930a      	str	r3, [sp, #40]	@ 0x28
 800712a:	2300      	movs	r3, #0
 800712c:	eba8 0807 	sub.w	r8, r8, r7
 8007130:	930e      	str	r3, [sp, #56]	@ 0x38
 8007132:	e7c2      	b.n	80070ba <_dtoa_r+0x1b2>
 8007134:	2300      	movs	r3, #0
 8007136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007138:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800713a:	2b00      	cmp	r3, #0
 800713c:	dc35      	bgt.n	80071aa <_dtoa_r+0x2a2>
 800713e:	2301      	movs	r3, #1
 8007140:	461a      	mov	r2, r3
 8007142:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007146:	9221      	str	r2, [sp, #132]	@ 0x84
 8007148:	e00b      	b.n	8007162 <_dtoa_r+0x25a>
 800714a:	2301      	movs	r3, #1
 800714c:	e7f3      	b.n	8007136 <_dtoa_r+0x22e>
 800714e:	2300      	movs	r3, #0
 8007150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007152:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	3301      	adds	r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	9307      	str	r3, [sp, #28]
 800715e:	bfb8      	it	lt
 8007160:	2301      	movlt	r3, #1
 8007162:	2100      	movs	r1, #0
 8007164:	2204      	movs	r2, #4
 8007166:	f8db 001c 	ldr.w	r0, [fp, #28]
 800716a:	f102 0514 	add.w	r5, r2, #20
 800716e:	429d      	cmp	r5, r3
 8007170:	d91f      	bls.n	80071b2 <_dtoa_r+0x2aa>
 8007172:	6041      	str	r1, [r0, #4]
 8007174:	4658      	mov	r0, fp
 8007176:	f000 fd8d 	bl	8007c94 <_Balloc>
 800717a:	4682      	mov	sl, r0
 800717c:	2800      	cmp	r0, #0
 800717e:	d139      	bne.n	80071f4 <_dtoa_r+0x2ec>
 8007180:	4602      	mov	r2, r0
 8007182:	f240 11af 	movw	r1, #431	@ 0x1af
 8007186:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <_dtoa_r+0x2e8>)
 8007188:	e6d2      	b.n	8006f30 <_dtoa_r+0x28>
 800718a:	2301      	movs	r3, #1
 800718c:	e7e0      	b.n	8007150 <_dtoa_r+0x248>
 800718e:	2401      	movs	r4, #1
 8007190:	2300      	movs	r3, #0
 8007192:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007194:	9320      	str	r3, [sp, #128]	@ 0x80
 8007196:	f04f 33ff 	mov.w	r3, #4294967295
 800719a:	2200      	movs	r2, #0
 800719c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80071a0:	2312      	movs	r3, #18
 80071a2:	e7d0      	b.n	8007146 <_dtoa_r+0x23e>
 80071a4:	2301      	movs	r3, #1
 80071a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071a8:	e7f5      	b.n	8007196 <_dtoa_r+0x28e>
 80071aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80071b0:	e7d7      	b.n	8007162 <_dtoa_r+0x25a>
 80071b2:	3101      	adds	r1, #1
 80071b4:	0052      	lsls	r2, r2, #1
 80071b6:	e7d8      	b.n	800716a <_dtoa_r+0x262>
 80071b8:	636f4361 	.word	0x636f4361
 80071bc:	3fd287a7 	.word	0x3fd287a7
 80071c0:	8b60c8b3 	.word	0x8b60c8b3
 80071c4:	3fc68a28 	.word	0x3fc68a28
 80071c8:	509f79fb 	.word	0x509f79fb
 80071cc:	3fd34413 	.word	0x3fd34413
 80071d0:	0800a420 	.word	0x0800a420
 80071d4:	0800a437 	.word	0x0800a437
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	0800a41c 	.word	0x0800a41c
 80071e0:	0800a3eb 	.word	0x0800a3eb
 80071e4:	0800a3ea 	.word	0x0800a3ea
 80071e8:	3ff80000 	.word	0x3ff80000
 80071ec:	0800a530 	.word	0x0800a530
 80071f0:	0800a48f 	.word	0x0800a48f
 80071f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071f8:	6018      	str	r0, [r3, #0]
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	2b0e      	cmp	r3, #14
 80071fe:	f200 80a4 	bhi.w	800734a <_dtoa_r+0x442>
 8007202:	2c00      	cmp	r4, #0
 8007204:	f000 80a1 	beq.w	800734a <_dtoa_r+0x442>
 8007208:	2f00      	cmp	r7, #0
 800720a:	dd33      	ble.n	8007274 <_dtoa_r+0x36c>
 800720c:	4b86      	ldr	r3, [pc, #536]	@ (8007428 <_dtoa_r+0x520>)
 800720e:	f007 020f 	and.w	r2, r7, #15
 8007212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007216:	05f8      	lsls	r0, r7, #23
 8007218:	e9d3 3400 	ldrd	r3, r4, [r3]
 800721c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007220:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007224:	d516      	bpl.n	8007254 <_dtoa_r+0x34c>
 8007226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800722a:	4b80      	ldr	r3, [pc, #512]	@ (800742c <_dtoa_r+0x524>)
 800722c:	2603      	movs	r6, #3
 800722e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007232:	f7f9 fa7b 	bl	800072c <__aeabi_ddiv>
 8007236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800723a:	f004 040f 	and.w	r4, r4, #15
 800723e:	4d7b      	ldr	r5, [pc, #492]	@ (800742c <_dtoa_r+0x524>)
 8007240:	b954      	cbnz	r4, 8007258 <_dtoa_r+0x350>
 8007242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724a:	f7f9 fa6f 	bl	800072c <__aeabi_ddiv>
 800724e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007252:	e028      	b.n	80072a6 <_dtoa_r+0x39e>
 8007254:	2602      	movs	r6, #2
 8007256:	e7f2      	b.n	800723e <_dtoa_r+0x336>
 8007258:	07e1      	lsls	r1, r4, #31
 800725a:	d508      	bpl.n	800726e <_dtoa_r+0x366>
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007264:	f7f9 f938 	bl	80004d8 <__aeabi_dmul>
 8007268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800726c:	3601      	adds	r6, #1
 800726e:	1064      	asrs	r4, r4, #1
 8007270:	3508      	adds	r5, #8
 8007272:	e7e5      	b.n	8007240 <_dtoa_r+0x338>
 8007274:	f000 80d2 	beq.w	800741c <_dtoa_r+0x514>
 8007278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800727c:	427c      	negs	r4, r7
 800727e:	4b6a      	ldr	r3, [pc, #424]	@ (8007428 <_dtoa_r+0x520>)
 8007280:	f004 020f 	and.w	r2, r4, #15
 8007284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f9 f924 	bl	80004d8 <__aeabi_dmul>
 8007290:	2602      	movs	r6, #2
 8007292:	2300      	movs	r3, #0
 8007294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007298:	4d64      	ldr	r5, [pc, #400]	@ (800742c <_dtoa_r+0x524>)
 800729a:	1124      	asrs	r4, r4, #4
 800729c:	2c00      	cmp	r4, #0
 800729e:	f040 80b2 	bne.w	8007406 <_dtoa_r+0x4fe>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1d3      	bne.n	800724e <_dtoa_r+0x346>
 80072a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80b7 	beq.w	8007420 <_dtoa_r+0x518>
 80072b2:	2200      	movs	r2, #0
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007430 <_dtoa_r+0x528>)
 80072ba:	f7f9 fb7f 	bl	80009bc <__aeabi_dcmplt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f000 80ae 	beq.w	8007420 <_dtoa_r+0x518>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80aa 	beq.w	8007420 <_dtoa_r+0x518>
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dd37      	ble.n	8007342 <_dtoa_r+0x43a>
 80072d2:	1e7b      	subs	r3, r7, #1
 80072d4:	4620      	mov	r0, r4
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	2200      	movs	r2, #0
 80072da:	4629      	mov	r1, r5
 80072dc:	4b55      	ldr	r3, [pc, #340]	@ (8007434 <_dtoa_r+0x52c>)
 80072de:	f7f9 f8fb 	bl	80004d8 <__aeabi_dmul>
 80072e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e6:	9c08      	ldr	r4, [sp, #32]
 80072e8:	3601      	adds	r6, #1
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7f9 f88a 	bl	8000404 <__aeabi_i2d>
 80072f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072f4:	f7f9 f8f0 	bl	80004d8 <__aeabi_dmul>
 80072f8:	2200      	movs	r2, #0
 80072fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007438 <_dtoa_r+0x530>)
 80072fc:	f7f8 ff36 	bl	800016c <__adddf3>
 8007300:	4605      	mov	r5, r0
 8007302:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007306:	2c00      	cmp	r4, #0
 8007308:	f040 809a 	bne.w	8007440 <_dtoa_r+0x538>
 800730c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007310:	2200      	movs	r2, #0
 8007312:	4b4a      	ldr	r3, [pc, #296]	@ (800743c <_dtoa_r+0x534>)
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007320:	462a      	mov	r2, r5
 8007322:	4633      	mov	r3, r6
 8007324:	f7f9 fb68 	bl	80009f8 <__aeabi_dcmpgt>
 8007328:	2800      	cmp	r0, #0
 800732a:	f040 828e 	bne.w	800784a <_dtoa_r+0x942>
 800732e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007332:	462a      	mov	r2, r5
 8007334:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007338:	f7f9 fb40 	bl	80009bc <__aeabi_dcmplt>
 800733c:	2800      	cmp	r0, #0
 800733e:	f040 8127 	bne.w	8007590 <_dtoa_r+0x688>
 8007342:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800734a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800734c:	2b00      	cmp	r3, #0
 800734e:	f2c0 8163 	blt.w	8007618 <_dtoa_r+0x710>
 8007352:	2f0e      	cmp	r7, #14
 8007354:	f300 8160 	bgt.w	8007618 <_dtoa_r+0x710>
 8007358:	4b33      	ldr	r3, [pc, #204]	@ (8007428 <_dtoa_r+0x520>)
 800735a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800735e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007362:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007366:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007368:	2b00      	cmp	r3, #0
 800736a:	da03      	bge.n	8007374 <_dtoa_r+0x46c>
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f340 8100 	ble.w	8007574 <_dtoa_r+0x66c>
 8007374:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007378:	4656      	mov	r6, sl
 800737a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f9 f9d3 	bl	800072c <__aeabi_ddiv>
 8007386:	f7f9 fb57 	bl	8000a38 <__aeabi_d2iz>
 800738a:	4680      	mov	r8, r0
 800738c:	f7f9 f83a 	bl	8000404 <__aeabi_i2d>
 8007390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007394:	f7f9 f8a0 	bl	80004d8 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f8 fee2 	bl	8000168 <__aeabi_dsub>
 80073a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073a8:	9d07      	ldr	r5, [sp, #28]
 80073aa:	f806 4b01 	strb.w	r4, [r6], #1
 80073ae:	eba6 040a 	sub.w	r4, r6, sl
 80073b2:	42a5      	cmp	r5, r4
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	f040 8116 	bne.w	80075e8 <_dtoa_r+0x6e0>
 80073bc:	f7f8 fed6 	bl	800016c <__adddf3>
 80073c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	f7f9 fb16 	bl	80009f8 <__aeabi_dcmpgt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 80f8 	bne.w	80075c2 <_dtoa_r+0x6ba>
 80073d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f9 fae5 	bl	80009a8 <__aeabi_dcmpeq>
 80073de:	b118      	cbz	r0, 80073e8 <_dtoa_r+0x4e0>
 80073e0:	f018 0f01 	tst.w	r8, #1
 80073e4:	f040 80ed 	bne.w	80075c2 <_dtoa_r+0x6ba>
 80073e8:	4649      	mov	r1, r9
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fc92 	bl	8007d14 <_Bfree>
 80073f0:	2300      	movs	r3, #0
 80073f2:	7033      	strb	r3, [r6, #0]
 80073f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80073f6:	3701      	adds	r7, #1
 80073f8:	601f      	str	r7, [r3, #0]
 80073fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8320 	beq.w	8007a42 <_dtoa_r+0xb3a>
 8007402:	601e      	str	r6, [r3, #0]
 8007404:	e31d      	b.n	8007a42 <_dtoa_r+0xb3a>
 8007406:	07e2      	lsls	r2, r4, #31
 8007408:	d505      	bpl.n	8007416 <_dtoa_r+0x50e>
 800740a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800740e:	f7f9 f863 	bl	80004d8 <__aeabi_dmul>
 8007412:	2301      	movs	r3, #1
 8007414:	3601      	adds	r6, #1
 8007416:	1064      	asrs	r4, r4, #1
 8007418:	3508      	adds	r5, #8
 800741a:	e73f      	b.n	800729c <_dtoa_r+0x394>
 800741c:	2602      	movs	r6, #2
 800741e:	e742      	b.n	80072a6 <_dtoa_r+0x39e>
 8007420:	9c07      	ldr	r4, [sp, #28]
 8007422:	9704      	str	r7, [sp, #16]
 8007424:	e761      	b.n	80072ea <_dtoa_r+0x3e2>
 8007426:	bf00      	nop
 8007428:	0800a530 	.word	0x0800a530
 800742c:	0800a508 	.word	0x0800a508
 8007430:	3ff00000 	.word	0x3ff00000
 8007434:	40240000 	.word	0x40240000
 8007438:	401c0000 	.word	0x401c0000
 800743c:	40140000 	.word	0x40140000
 8007440:	4b70      	ldr	r3, [pc, #448]	@ (8007604 <_dtoa_r+0x6fc>)
 8007442:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007444:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800744c:	4454      	add	r4, sl
 800744e:	2900      	cmp	r1, #0
 8007450:	d045      	beq.n	80074de <_dtoa_r+0x5d6>
 8007452:	2000      	movs	r0, #0
 8007454:	496c      	ldr	r1, [pc, #432]	@ (8007608 <_dtoa_r+0x700>)
 8007456:	f7f9 f969 	bl	800072c <__aeabi_ddiv>
 800745a:	4633      	mov	r3, r6
 800745c:	462a      	mov	r2, r5
 800745e:	f7f8 fe83 	bl	8000168 <__aeabi_dsub>
 8007462:	4656      	mov	r6, sl
 8007464:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746c:	f7f9 fae4 	bl	8000a38 <__aeabi_d2iz>
 8007470:	4605      	mov	r5, r0
 8007472:	f7f8 ffc7 	bl	8000404 <__aeabi_i2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747e:	f7f8 fe73 	bl	8000168 <__aeabi_dsub>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	3530      	adds	r5, #48	@ 0x30
 8007488:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800748c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007490:	f806 5b01 	strb.w	r5, [r6], #1
 8007494:	f7f9 fa92 	bl	80009bc <__aeabi_dcmplt>
 8007498:	2800      	cmp	r0, #0
 800749a:	d163      	bne.n	8007564 <_dtoa_r+0x65c>
 800749c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074a0:	2000      	movs	r0, #0
 80074a2:	495a      	ldr	r1, [pc, #360]	@ (800760c <_dtoa_r+0x704>)
 80074a4:	f7f8 fe60 	bl	8000168 <__aeabi_dsub>
 80074a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074ac:	f7f9 fa86 	bl	80009bc <__aeabi_dcmplt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f040 8087 	bne.w	80075c4 <_dtoa_r+0x6bc>
 80074b6:	42a6      	cmp	r6, r4
 80074b8:	f43f af43 	beq.w	8007342 <_dtoa_r+0x43a>
 80074bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074c0:	2200      	movs	r2, #0
 80074c2:	4b53      	ldr	r3, [pc, #332]	@ (8007610 <_dtoa_r+0x708>)
 80074c4:	f7f9 f808 	bl	80004d8 <__aeabi_dmul>
 80074c8:	2200      	movs	r2, #0
 80074ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007610 <_dtoa_r+0x708>)
 80074d4:	f7f9 f800 	bl	80004d8 <__aeabi_dmul>
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	e7c4      	b.n	8007468 <_dtoa_r+0x560>
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7f8 fff9 	bl	80004d8 <__aeabi_dmul>
 80074e6:	4656      	mov	r6, sl
 80074e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80074ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f2:	f7f9 faa1 	bl	8000a38 <__aeabi_d2iz>
 80074f6:	4605      	mov	r5, r0
 80074f8:	f7f8 ff84 	bl	8000404 <__aeabi_i2d>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007504:	f7f8 fe30 	bl	8000168 <__aeabi_dsub>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	3530      	adds	r5, #48	@ 0x30
 800750e:	f806 5b01 	strb.w	r5, [r6], #1
 8007512:	42a6      	cmp	r6, r4
 8007514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	d124      	bne.n	8007568 <_dtoa_r+0x660>
 800751e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007522:	4b39      	ldr	r3, [pc, #228]	@ (8007608 <_dtoa_r+0x700>)
 8007524:	f7f8 fe22 	bl	800016c <__adddf3>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007530:	f7f9 fa62 	bl	80009f8 <__aeabi_dcmpgt>
 8007534:	2800      	cmp	r0, #0
 8007536:	d145      	bne.n	80075c4 <_dtoa_r+0x6bc>
 8007538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800753c:	2000      	movs	r0, #0
 800753e:	4932      	ldr	r1, [pc, #200]	@ (8007608 <_dtoa_r+0x700>)
 8007540:	f7f8 fe12 	bl	8000168 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754c:	f7f9 fa36 	bl	80009bc <__aeabi_dcmplt>
 8007550:	2800      	cmp	r0, #0
 8007552:	f43f aef6 	beq.w	8007342 <_dtoa_r+0x43a>
 8007556:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007558:	1e73      	subs	r3, r6, #1
 800755a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800755c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007560:	2b30      	cmp	r3, #48	@ 0x30
 8007562:	d0f8      	beq.n	8007556 <_dtoa_r+0x64e>
 8007564:	9f04      	ldr	r7, [sp, #16]
 8007566:	e73f      	b.n	80073e8 <_dtoa_r+0x4e0>
 8007568:	4b29      	ldr	r3, [pc, #164]	@ (8007610 <_dtoa_r+0x708>)
 800756a:	f7f8 ffb5 	bl	80004d8 <__aeabi_dmul>
 800756e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007572:	e7bc      	b.n	80074ee <_dtoa_r+0x5e6>
 8007574:	d10c      	bne.n	8007590 <_dtoa_r+0x688>
 8007576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757a:	2200      	movs	r2, #0
 800757c:	4b25      	ldr	r3, [pc, #148]	@ (8007614 <_dtoa_r+0x70c>)
 800757e:	f7f8 ffab 	bl	80004d8 <__aeabi_dmul>
 8007582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007586:	f7f9 fa2d 	bl	80009e4 <__aeabi_dcmpge>
 800758a:	2800      	cmp	r0, #0
 800758c:	f000 815b 	beq.w	8007846 <_dtoa_r+0x93e>
 8007590:	2400      	movs	r4, #0
 8007592:	4625      	mov	r5, r4
 8007594:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007596:	4656      	mov	r6, sl
 8007598:	43db      	mvns	r3, r3
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	2700      	movs	r7, #0
 800759e:	4621      	mov	r1, r4
 80075a0:	4658      	mov	r0, fp
 80075a2:	f000 fbb7 	bl	8007d14 <_Bfree>
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	d0dc      	beq.n	8007564 <_dtoa_r+0x65c>
 80075aa:	b12f      	cbz	r7, 80075b8 <_dtoa_r+0x6b0>
 80075ac:	42af      	cmp	r7, r5
 80075ae:	d003      	beq.n	80075b8 <_dtoa_r+0x6b0>
 80075b0:	4639      	mov	r1, r7
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fbae 	bl	8007d14 <_Bfree>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fbaa 	bl	8007d14 <_Bfree>
 80075c0:	e7d0      	b.n	8007564 <_dtoa_r+0x65c>
 80075c2:	9704      	str	r7, [sp, #16]
 80075c4:	4633      	mov	r3, r6
 80075c6:	461e      	mov	r6, r3
 80075c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075cc:	2a39      	cmp	r2, #57	@ 0x39
 80075ce:	d107      	bne.n	80075e0 <_dtoa_r+0x6d8>
 80075d0:	459a      	cmp	sl, r3
 80075d2:	d1f8      	bne.n	80075c6 <_dtoa_r+0x6be>
 80075d4:	9a04      	ldr	r2, [sp, #16]
 80075d6:	3201      	adds	r2, #1
 80075d8:	9204      	str	r2, [sp, #16]
 80075da:	2230      	movs	r2, #48	@ 0x30
 80075dc:	f88a 2000 	strb.w	r2, [sl]
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	3201      	adds	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e7bd      	b.n	8007564 <_dtoa_r+0x65c>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b09      	ldr	r3, [pc, #36]	@ (8007610 <_dtoa_r+0x708>)
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	2200      	movs	r2, #0
 80075f2:	2300      	movs	r3, #0
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	f7f9 f9d6 	bl	80009a8 <__aeabi_dcmpeq>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f aebc 	beq.w	800737a <_dtoa_r+0x472>
 8007602:	e6f1      	b.n	80073e8 <_dtoa_r+0x4e0>
 8007604:	0800a530 	.word	0x0800a530
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	3ff00000 	.word	0x3ff00000
 8007610:	40240000 	.word	0x40240000
 8007614:	40140000 	.word	0x40140000
 8007618:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800761a:	2a00      	cmp	r2, #0
 800761c:	f000 80db 	beq.w	80077d6 <_dtoa_r+0x8ce>
 8007620:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007622:	2a01      	cmp	r2, #1
 8007624:	f300 80bf 	bgt.w	80077a6 <_dtoa_r+0x89e>
 8007628:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800762a:	2a00      	cmp	r2, #0
 800762c:	f000 80b7 	beq.w	800779e <_dtoa_r+0x896>
 8007630:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007634:	4646      	mov	r6, r8
 8007636:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800763a:	2101      	movs	r1, #1
 800763c:	441a      	add	r2, r3
 800763e:	4658      	mov	r0, fp
 8007640:	4498      	add	r8, r3
 8007642:	9209      	str	r2, [sp, #36]	@ 0x24
 8007644:	f000 fc64 	bl	8007f10 <__i2b>
 8007648:	4605      	mov	r5, r0
 800764a:	b15e      	cbz	r6, 8007664 <_dtoa_r+0x75c>
 800764c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd08      	ble.n	8007664 <_dtoa_r+0x75c>
 8007652:	42b3      	cmp	r3, r6
 8007654:	bfa8      	it	ge
 8007656:	4633      	movge	r3, r6
 8007658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800765a:	eba8 0803 	sub.w	r8, r8, r3
 800765e:	1af6      	subs	r6, r6, r3
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	9309      	str	r3, [sp, #36]	@ 0x24
 8007664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007666:	b1f3      	cbz	r3, 80076a6 <_dtoa_r+0x79e>
 8007668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80b7 	beq.w	80077de <_dtoa_r+0x8d6>
 8007670:	b18c      	cbz	r4, 8007696 <_dtoa_r+0x78e>
 8007672:	4629      	mov	r1, r5
 8007674:	4622      	mov	r2, r4
 8007676:	4658      	mov	r0, fp
 8007678:	f000 fd08 	bl	800808c <__pow5mult>
 800767c:	464a      	mov	r2, r9
 800767e:	4601      	mov	r1, r0
 8007680:	4605      	mov	r5, r0
 8007682:	4658      	mov	r0, fp
 8007684:	f000 fc5a 	bl	8007f3c <__multiply>
 8007688:	4649      	mov	r1, r9
 800768a:	9004      	str	r0, [sp, #16]
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fb41 	bl	8007d14 <_Bfree>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	4699      	mov	r9, r3
 8007696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007698:	1b1a      	subs	r2, r3, r4
 800769a:	d004      	beq.n	80076a6 <_dtoa_r+0x79e>
 800769c:	4649      	mov	r1, r9
 800769e:	4658      	mov	r0, fp
 80076a0:	f000 fcf4 	bl	800808c <__pow5mult>
 80076a4:	4681      	mov	r9, r0
 80076a6:	2101      	movs	r1, #1
 80076a8:	4658      	mov	r0, fp
 80076aa:	f000 fc31 	bl	8007f10 <__i2b>
 80076ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076b0:	4604      	mov	r4, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 81c9 	beq.w	8007a4a <_dtoa_r+0xb42>
 80076b8:	461a      	mov	r2, r3
 80076ba:	4601      	mov	r1, r0
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fce5 	bl	800808c <__pow5mult>
 80076c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076c4:	4604      	mov	r4, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	f300 808f 	bgt.w	80077ea <_dtoa_r+0x8e2>
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8087 	bne.w	80077e2 <_dtoa_r+0x8da>
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 8083 	bne.w	80077e6 <_dtoa_r+0x8de>
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076e6:	0d1b      	lsrs	r3, r3, #20
 80076e8:	051b      	lsls	r3, r3, #20
 80076ea:	b12b      	cbz	r3, 80076f8 <_dtoa_r+0x7f0>
 80076ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ee:	f108 0801 	add.w	r8, r8, #1
 80076f2:	3301      	adds	r3, #1
 80076f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076f6:	2301      	movs	r3, #1
 80076f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 81aa 	beq.w	8007a56 <_dtoa_r+0xb4e>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007708:	6918      	ldr	r0, [r3, #16]
 800770a:	f000 fbb5 	bl	8007e78 <__hi0bits>
 800770e:	f1c0 0020 	rsb	r0, r0, #32
 8007712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007714:	4418      	add	r0, r3
 8007716:	f010 001f 	ands.w	r0, r0, #31
 800771a:	d071      	beq.n	8007800 <_dtoa_r+0x8f8>
 800771c:	f1c0 0320 	rsb	r3, r0, #32
 8007720:	2b04      	cmp	r3, #4
 8007722:	dd65      	ble.n	80077f0 <_dtoa_r+0x8e8>
 8007724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007726:	f1c0 001c 	rsb	r0, r0, #28
 800772a:	4403      	add	r3, r0
 800772c:	4480      	add	r8, r0
 800772e:	4406      	add	r6, r0
 8007730:	9309      	str	r3, [sp, #36]	@ 0x24
 8007732:	f1b8 0f00 	cmp.w	r8, #0
 8007736:	dd05      	ble.n	8007744 <_dtoa_r+0x83c>
 8007738:	4649      	mov	r1, r9
 800773a:	4642      	mov	r2, r8
 800773c:	4658      	mov	r0, fp
 800773e:	f000 fcff 	bl	8008140 <__lshift>
 8007742:	4681      	mov	r9, r0
 8007744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007746:	2b00      	cmp	r3, #0
 8007748:	dd05      	ble.n	8007756 <_dtoa_r+0x84e>
 800774a:	4621      	mov	r1, r4
 800774c:	461a      	mov	r2, r3
 800774e:	4658      	mov	r0, fp
 8007750:	f000 fcf6 	bl	8008140 <__lshift>
 8007754:	4604      	mov	r4, r0
 8007756:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d053      	beq.n	8007804 <_dtoa_r+0x8fc>
 800775c:	4621      	mov	r1, r4
 800775e:	4648      	mov	r0, r9
 8007760:	f000 fd5a 	bl	8008218 <__mcmp>
 8007764:	2800      	cmp	r0, #0
 8007766:	da4d      	bge.n	8007804 <_dtoa_r+0x8fc>
 8007768:	1e7b      	subs	r3, r7, #1
 800776a:	4649      	mov	r1, r9
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	220a      	movs	r2, #10
 8007770:	2300      	movs	r3, #0
 8007772:	4658      	mov	r0, fp
 8007774:	f000 faf0 	bl	8007d58 <__multadd>
 8007778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800777a:	4681      	mov	r9, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 816c 	beq.w	8007a5a <_dtoa_r+0xb52>
 8007782:	2300      	movs	r3, #0
 8007784:	4629      	mov	r1, r5
 8007786:	220a      	movs	r2, #10
 8007788:	4658      	mov	r0, fp
 800778a:	f000 fae5 	bl	8007d58 <__multadd>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	4605      	mov	r5, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	dc61      	bgt.n	800785a <_dtoa_r+0x952>
 8007796:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007798:	2b02      	cmp	r3, #2
 800779a:	dc3b      	bgt.n	8007814 <_dtoa_r+0x90c>
 800779c:	e05d      	b.n	800785a <_dtoa_r+0x952>
 800779e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077a4:	e746      	b.n	8007634 <_dtoa_r+0x72c>
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	1e5c      	subs	r4, r3, #1
 80077aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	bfbf      	itttt	lt
 80077b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80077b4:	1ae3      	sublt	r3, r4, r3
 80077b6:	18d2      	addlt	r2, r2, r3
 80077b8:	bfa8      	it	ge
 80077ba:	1b1c      	subge	r4, r3, r4
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	bfbe      	ittt	lt
 80077c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80077c4:	2400      	movlt	r4, #0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb5      	itete	lt
 80077ca:	eba8 0603 	sublt.w	r6, r8, r3
 80077ce:	4646      	movge	r6, r8
 80077d0:	2300      	movlt	r3, #0
 80077d2:	9b07      	ldrge	r3, [sp, #28]
 80077d4:	e730      	b.n	8007638 <_dtoa_r+0x730>
 80077d6:	4646      	mov	r6, r8
 80077d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077dc:	e735      	b.n	800764a <_dtoa_r+0x742>
 80077de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077e0:	e75c      	b.n	800769c <_dtoa_r+0x794>
 80077e2:	2300      	movs	r3, #0
 80077e4:	e788      	b.n	80076f8 <_dtoa_r+0x7f0>
 80077e6:	9b02      	ldr	r3, [sp, #8]
 80077e8:	e786      	b.n	80076f8 <_dtoa_r+0x7f0>
 80077ea:	2300      	movs	r3, #0
 80077ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ee:	e788      	b.n	8007702 <_dtoa_r+0x7fa>
 80077f0:	d09f      	beq.n	8007732 <_dtoa_r+0x82a>
 80077f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077f4:	331c      	adds	r3, #28
 80077f6:	441a      	add	r2, r3
 80077f8:	4498      	add	r8, r3
 80077fa:	441e      	add	r6, r3
 80077fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80077fe:	e798      	b.n	8007732 <_dtoa_r+0x82a>
 8007800:	4603      	mov	r3, r0
 8007802:	e7f6      	b.n	80077f2 <_dtoa_r+0x8ea>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	9704      	str	r7, [sp, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc20      	bgt.n	800784e <_dtoa_r+0x946>
 800780c:	9308      	str	r3, [sp, #32]
 800780e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007810:	2b02      	cmp	r3, #2
 8007812:	dd1e      	ble.n	8007852 <_dtoa_r+0x94a>
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f47f aebc 	bne.w	8007594 <_dtoa_r+0x68c>
 800781c:	4621      	mov	r1, r4
 800781e:	2205      	movs	r2, #5
 8007820:	4658      	mov	r0, fp
 8007822:	f000 fa99 	bl	8007d58 <__multadd>
 8007826:	4601      	mov	r1, r0
 8007828:	4604      	mov	r4, r0
 800782a:	4648      	mov	r0, r9
 800782c:	f000 fcf4 	bl	8008218 <__mcmp>
 8007830:	2800      	cmp	r0, #0
 8007832:	f77f aeaf 	ble.w	8007594 <_dtoa_r+0x68c>
 8007836:	2331      	movs	r3, #49	@ 0x31
 8007838:	4656      	mov	r6, sl
 800783a:	f806 3b01 	strb.w	r3, [r6], #1
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	3301      	adds	r3, #1
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	e6aa      	b.n	800759c <_dtoa_r+0x694>
 8007846:	9c07      	ldr	r4, [sp, #28]
 8007848:	9704      	str	r7, [sp, #16]
 800784a:	4625      	mov	r5, r4
 800784c:	e7f3      	b.n	8007836 <_dtoa_r+0x92e>
 800784e:	9b07      	ldr	r3, [sp, #28]
 8007850:	9308      	str	r3, [sp, #32]
 8007852:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8104 	beq.w	8007a62 <_dtoa_r+0xb5a>
 800785a:	2e00      	cmp	r6, #0
 800785c:	dd05      	ble.n	800786a <_dtoa_r+0x962>
 800785e:	4629      	mov	r1, r5
 8007860:	4632      	mov	r2, r6
 8007862:	4658      	mov	r0, fp
 8007864:	f000 fc6c 	bl	8008140 <__lshift>
 8007868:	4605      	mov	r5, r0
 800786a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d05a      	beq.n	8007926 <_dtoa_r+0xa1e>
 8007870:	4658      	mov	r0, fp
 8007872:	6869      	ldr	r1, [r5, #4]
 8007874:	f000 fa0e 	bl	8007c94 <_Balloc>
 8007878:	4606      	mov	r6, r0
 800787a:	b928      	cbnz	r0, 8007888 <_dtoa_r+0x980>
 800787c:	4602      	mov	r2, r0
 800787e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007882:	4b83      	ldr	r3, [pc, #524]	@ (8007a90 <_dtoa_r+0xb88>)
 8007884:	f7ff bb54 	b.w	8006f30 <_dtoa_r+0x28>
 8007888:	692a      	ldr	r2, [r5, #16]
 800788a:	f105 010c 	add.w	r1, r5, #12
 800788e:	3202      	adds	r2, #2
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	300c      	adds	r0, #12
 8007894:	f002 f922 	bl	8009adc <memcpy>
 8007898:	2201      	movs	r2, #1
 800789a:	4631      	mov	r1, r6
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fc4f 	bl	8008140 <__lshift>
 80078a2:	462f      	mov	r7, r5
 80078a4:	4605      	mov	r5, r0
 80078a6:	f10a 0301 	add.w	r3, sl, #1
 80078aa:	9307      	str	r3, [sp, #28]
 80078ac:	9b08      	ldr	r3, [sp, #32]
 80078ae:	4453      	add	r3, sl
 80078b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b2:	9b02      	ldr	r3, [sp, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ba:	9b07      	ldr	r3, [sp, #28]
 80078bc:	4621      	mov	r1, r4
 80078be:	3b01      	subs	r3, #1
 80078c0:	4648      	mov	r0, r9
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	f7ff fa98 	bl	8006df8 <quorem>
 80078c8:	4639      	mov	r1, r7
 80078ca:	9008      	str	r0, [sp, #32]
 80078cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078d0:	4648      	mov	r0, r9
 80078d2:	f000 fca1 	bl	8008218 <__mcmp>
 80078d6:	462a      	mov	r2, r5
 80078d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80078da:	4621      	mov	r1, r4
 80078dc:	4658      	mov	r0, fp
 80078de:	f000 fcb7 	bl	8008250 <__mdiff>
 80078e2:	68c2      	ldr	r2, [r0, #12]
 80078e4:	4606      	mov	r6, r0
 80078e6:	bb02      	cbnz	r2, 800792a <_dtoa_r+0xa22>
 80078e8:	4601      	mov	r1, r0
 80078ea:	4648      	mov	r0, r9
 80078ec:	f000 fc94 	bl	8008218 <__mcmp>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4631      	mov	r1, r6
 80078f4:	4658      	mov	r0, fp
 80078f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80078f8:	f000 fa0c 	bl	8007d14 <_Bfree>
 80078fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007900:	9e07      	ldr	r6, [sp, #28]
 8007902:	ea43 0102 	orr.w	r1, r3, r2
 8007906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007908:	4319      	orrs	r1, r3
 800790a:	d110      	bne.n	800792e <_dtoa_r+0xa26>
 800790c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007910:	d029      	beq.n	8007966 <_dtoa_r+0xa5e>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd02      	ble.n	800791e <_dtoa_r+0xa16>
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	f883 8000 	strb.w	r8, [r3]
 8007924:	e63b      	b.n	800759e <_dtoa_r+0x696>
 8007926:	4628      	mov	r0, r5
 8007928:	e7bb      	b.n	80078a2 <_dtoa_r+0x99a>
 800792a:	2201      	movs	r2, #1
 800792c:	e7e1      	b.n	80078f2 <_dtoa_r+0x9ea>
 800792e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	db04      	blt.n	800793e <_dtoa_r+0xa36>
 8007934:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007936:	430b      	orrs	r3, r1
 8007938:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800793a:	430b      	orrs	r3, r1
 800793c:	d120      	bne.n	8007980 <_dtoa_r+0xa78>
 800793e:	2a00      	cmp	r2, #0
 8007940:	dded      	ble.n	800791e <_dtoa_r+0xa16>
 8007942:	4649      	mov	r1, r9
 8007944:	2201      	movs	r2, #1
 8007946:	4658      	mov	r0, fp
 8007948:	f000 fbfa 	bl	8008140 <__lshift>
 800794c:	4621      	mov	r1, r4
 800794e:	4681      	mov	r9, r0
 8007950:	f000 fc62 	bl	8008218 <__mcmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	dc03      	bgt.n	8007960 <_dtoa_r+0xa58>
 8007958:	d1e1      	bne.n	800791e <_dtoa_r+0xa16>
 800795a:	f018 0f01 	tst.w	r8, #1
 800795e:	d0de      	beq.n	800791e <_dtoa_r+0xa16>
 8007960:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007964:	d1d8      	bne.n	8007918 <_dtoa_r+0xa10>
 8007966:	2339      	movs	r3, #57	@ 0x39
 8007968:	9a02      	ldr	r2, [sp, #8]
 800796a:	7013      	strb	r3, [r2, #0]
 800796c:	4633      	mov	r3, r6
 800796e:	461e      	mov	r6, r3
 8007970:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007974:	3b01      	subs	r3, #1
 8007976:	2a39      	cmp	r2, #57	@ 0x39
 8007978:	d052      	beq.n	8007a20 <_dtoa_r+0xb18>
 800797a:	3201      	adds	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e60e      	b.n	800759e <_dtoa_r+0x696>
 8007980:	2a00      	cmp	r2, #0
 8007982:	dd07      	ble.n	8007994 <_dtoa_r+0xa8c>
 8007984:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007988:	d0ed      	beq.n	8007966 <_dtoa_r+0xa5e>
 800798a:	9a02      	ldr	r2, [sp, #8]
 800798c:	f108 0301 	add.w	r3, r8, #1
 8007990:	7013      	strb	r3, [r2, #0]
 8007992:	e604      	b.n	800759e <_dtoa_r+0x696>
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	9a07      	ldr	r2, [sp, #28]
 8007998:	f803 8c01 	strb.w	r8, [r3, #-1]
 800799c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800799e:	4293      	cmp	r3, r2
 80079a0:	d028      	beq.n	80079f4 <_dtoa_r+0xaec>
 80079a2:	4649      	mov	r1, r9
 80079a4:	2300      	movs	r3, #0
 80079a6:	220a      	movs	r2, #10
 80079a8:	4658      	mov	r0, fp
 80079aa:	f000 f9d5 	bl	8007d58 <__multadd>
 80079ae:	42af      	cmp	r7, r5
 80079b0:	4681      	mov	r9, r0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	f04f 020a 	mov.w	r2, #10
 80079ba:	4639      	mov	r1, r7
 80079bc:	4658      	mov	r0, fp
 80079be:	d107      	bne.n	80079d0 <_dtoa_r+0xac8>
 80079c0:	f000 f9ca 	bl	8007d58 <__multadd>
 80079c4:	4607      	mov	r7, r0
 80079c6:	4605      	mov	r5, r0
 80079c8:	9b07      	ldr	r3, [sp, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	e774      	b.n	80078ba <_dtoa_r+0x9b2>
 80079d0:	f000 f9c2 	bl	8007d58 <__multadd>
 80079d4:	4629      	mov	r1, r5
 80079d6:	4607      	mov	r7, r0
 80079d8:	2300      	movs	r3, #0
 80079da:	220a      	movs	r2, #10
 80079dc:	4658      	mov	r0, fp
 80079de:	f000 f9bb 	bl	8007d58 <__multadd>
 80079e2:	4605      	mov	r5, r0
 80079e4:	e7f0      	b.n	80079c8 <_dtoa_r+0xac0>
 80079e6:	9b08      	ldr	r3, [sp, #32]
 80079e8:	2700      	movs	r7, #0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfcc      	ite	gt
 80079ee:	461e      	movgt	r6, r3
 80079f0:	2601      	movle	r6, #1
 80079f2:	4456      	add	r6, sl
 80079f4:	4649      	mov	r1, r9
 80079f6:	2201      	movs	r2, #1
 80079f8:	4658      	mov	r0, fp
 80079fa:	f000 fba1 	bl	8008140 <__lshift>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4681      	mov	r9, r0
 8007a02:	f000 fc09 	bl	8008218 <__mcmp>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	dcb0      	bgt.n	800796c <_dtoa_r+0xa64>
 8007a0a:	d102      	bne.n	8007a12 <_dtoa_r+0xb0a>
 8007a0c:	f018 0f01 	tst.w	r8, #1
 8007a10:	d1ac      	bne.n	800796c <_dtoa_r+0xa64>
 8007a12:	4633      	mov	r3, r6
 8007a14:	461e      	mov	r6, r3
 8007a16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a1a:	2a30      	cmp	r2, #48	@ 0x30
 8007a1c:	d0fa      	beq.n	8007a14 <_dtoa_r+0xb0c>
 8007a1e:	e5be      	b.n	800759e <_dtoa_r+0x696>
 8007a20:	459a      	cmp	sl, r3
 8007a22:	d1a4      	bne.n	800796e <_dtoa_r+0xa66>
 8007a24:	9b04      	ldr	r3, [sp, #16]
 8007a26:	3301      	adds	r3, #1
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	2331      	movs	r3, #49	@ 0x31
 8007a2c:	f88a 3000 	strb.w	r3, [sl]
 8007a30:	e5b5      	b.n	800759e <_dtoa_r+0x696>
 8007a32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a94 <_dtoa_r+0xb8c>
 8007a38:	b11b      	cbz	r3, 8007a42 <_dtoa_r+0xb3a>
 8007a3a:	f10a 0308 	add.w	r3, sl, #8
 8007a3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	4650      	mov	r0, sl
 8007a44:	b017      	add	sp, #92	@ 0x5c
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	f77f ae3d 	ble.w	80076cc <_dtoa_r+0x7c4>
 8007a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a56:	2001      	movs	r0, #1
 8007a58:	e65b      	b.n	8007712 <_dtoa_r+0x80a>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f77f aed6 	ble.w	800780e <_dtoa_r+0x906>
 8007a62:	4656      	mov	r6, sl
 8007a64:	4621      	mov	r1, r4
 8007a66:	4648      	mov	r0, r9
 8007a68:	f7ff f9c6 	bl	8006df8 <quorem>
 8007a6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a70:	9b08      	ldr	r3, [sp, #32]
 8007a72:	f806 8b01 	strb.w	r8, [r6], #1
 8007a76:	eba6 020a 	sub.w	r2, r6, sl
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	ddb3      	ble.n	80079e6 <_dtoa_r+0xade>
 8007a7e:	4649      	mov	r1, r9
 8007a80:	2300      	movs	r3, #0
 8007a82:	220a      	movs	r2, #10
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 f967 	bl	8007d58 <__multadd>
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	e7ea      	b.n	8007a64 <_dtoa_r+0xb5c>
 8007a8e:	bf00      	nop
 8007a90:	0800a48f 	.word	0x0800a48f
 8007a94:	0800a413 	.word	0x0800a413

08007a98 <_free_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d040      	beq.n	8007b22 <_free_r+0x8a>
 8007aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa4:	1f0c      	subs	r4, r1, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfb8      	it	lt
 8007aaa:	18e4      	addlt	r4, r4, r3
 8007aac:	f000 f8e6 	bl	8007c7c <__malloc_lock>
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b24 <_free_r+0x8c>)
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	b933      	cbnz	r3, 8007ac4 <_free_r+0x2c>
 8007ab6:	6063      	str	r3, [r4, #4]
 8007ab8:	6014      	str	r4, [r2, #0]
 8007aba:	4628      	mov	r0, r5
 8007abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac0:	f000 b8e2 	b.w	8007c88 <__malloc_unlock>
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	d908      	bls.n	8007ada <_free_r+0x42>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	1821      	adds	r1, r4, r0
 8007acc:	428b      	cmp	r3, r1
 8007ace:	bf01      	itttt	eq
 8007ad0:	6819      	ldreq	r1, [r3, #0]
 8007ad2:	685b      	ldreq	r3, [r3, #4]
 8007ad4:	1809      	addeq	r1, r1, r0
 8007ad6:	6021      	streq	r1, [r4, #0]
 8007ad8:	e7ed      	b.n	8007ab6 <_free_r+0x1e>
 8007ada:	461a      	mov	r2, r3
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b10b      	cbz	r3, 8007ae4 <_free_r+0x4c>
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	d9fa      	bls.n	8007ada <_free_r+0x42>
 8007ae4:	6811      	ldr	r1, [r2, #0]
 8007ae6:	1850      	adds	r0, r2, r1
 8007ae8:	42a0      	cmp	r0, r4
 8007aea:	d10b      	bne.n	8007b04 <_free_r+0x6c>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	4401      	add	r1, r0
 8007af0:	1850      	adds	r0, r2, r1
 8007af2:	4283      	cmp	r3, r0
 8007af4:	6011      	str	r1, [r2, #0]
 8007af6:	d1e0      	bne.n	8007aba <_free_r+0x22>
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4408      	add	r0, r1
 8007afe:	6010      	str	r0, [r2, #0]
 8007b00:	6053      	str	r3, [r2, #4]
 8007b02:	e7da      	b.n	8007aba <_free_r+0x22>
 8007b04:	d902      	bls.n	8007b0c <_free_r+0x74>
 8007b06:	230c      	movs	r3, #12
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	e7d6      	b.n	8007aba <_free_r+0x22>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	1821      	adds	r1, r4, r0
 8007b10:	428b      	cmp	r3, r1
 8007b12:	bf01      	itttt	eq
 8007b14:	6819      	ldreq	r1, [r3, #0]
 8007b16:	685b      	ldreq	r3, [r3, #4]
 8007b18:	1809      	addeq	r1, r1, r0
 8007b1a:	6021      	streq	r1, [r4, #0]
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	6054      	str	r4, [r2, #4]
 8007b20:	e7cb      	b.n	8007aba <_free_r+0x22>
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000440 	.word	0x20000440

08007b28 <malloc>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	@ (8007b34 <malloc+0xc>)
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f000 b825 	b.w	8007b7c <_malloc_r>
 8007b32:	bf00      	nop
 8007b34:	20000018 	.word	0x20000018

08007b38 <sbrk_aligned>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007b78 <sbrk_aligned+0x40>)
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	6831      	ldr	r1, [r6, #0]
 8007b40:	4605      	mov	r5, r0
 8007b42:	b911      	cbnz	r1, 8007b4a <sbrk_aligned+0x12>
 8007b44:	f001 ffba 	bl	8009abc <_sbrk_r>
 8007b48:	6030      	str	r0, [r6, #0]
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f001 ffb5 	bl	8009abc <_sbrk_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d103      	bne.n	8007b5e <sbrk_aligned+0x26>
 8007b56:	f04f 34ff 	mov.w	r4, #4294967295
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	1cc4      	adds	r4, r0, #3
 8007b60:	f024 0403 	bic.w	r4, r4, #3
 8007b64:	42a0      	cmp	r0, r4
 8007b66:	d0f8      	beq.n	8007b5a <sbrk_aligned+0x22>
 8007b68:	1a21      	subs	r1, r4, r0
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f001 ffa6 	bl	8009abc <_sbrk_r>
 8007b70:	3001      	adds	r0, #1
 8007b72:	d1f2      	bne.n	8007b5a <sbrk_aligned+0x22>
 8007b74:	e7ef      	b.n	8007b56 <sbrk_aligned+0x1e>
 8007b76:	bf00      	nop
 8007b78:	2000043c 	.word	0x2000043c

08007b7c <_malloc_r>:
 8007b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	1ccd      	adds	r5, r1, #3
 8007b82:	f025 0503 	bic.w	r5, r5, #3
 8007b86:	3508      	adds	r5, #8
 8007b88:	2d0c      	cmp	r5, #12
 8007b8a:	bf38      	it	cc
 8007b8c:	250c      	movcc	r5, #12
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	4606      	mov	r6, r0
 8007b92:	db01      	blt.n	8007b98 <_malloc_r+0x1c>
 8007b94:	42a9      	cmp	r1, r5
 8007b96:	d904      	bls.n	8007ba2 <_malloc_r+0x26>
 8007b98:	230c      	movs	r3, #12
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c78 <_malloc_r+0xfc>
 8007ba6:	f000 f869 	bl	8007c7c <__malloc_lock>
 8007baa:	f8d8 3000 	ldr.w	r3, [r8]
 8007bae:	461c      	mov	r4, r3
 8007bb0:	bb44      	cbnz	r4, 8007c04 <_malloc_r+0x88>
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff ffbf 	bl	8007b38 <sbrk_aligned>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	d158      	bne.n	8007c72 <_malloc_r+0xf6>
 8007bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007bc4:	4627      	mov	r7, r4
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	d143      	bne.n	8007c52 <_malloc_r+0xd6>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	d04b      	beq.n	8007c66 <_malloc_r+0xea>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	eb04 0903 	add.w	r9, r4, r3
 8007bd8:	f001 ff70 	bl	8009abc <_sbrk_r>
 8007bdc:	4581      	cmp	r9, r0
 8007bde:	d142      	bne.n	8007c66 <_malloc_r+0xea>
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	4630      	mov	r0, r6
 8007be4:	1a6d      	subs	r5, r5, r1
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7ff ffa6 	bl	8007b38 <sbrk_aligned>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d03a      	beq.n	8007c66 <_malloc_r+0xea>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	442b      	add	r3, r5
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	bb62      	cbnz	r2, 8007c58 <_malloc_r+0xdc>
 8007bfe:	f8c8 7000 	str.w	r7, [r8]
 8007c02:	e00f      	b.n	8007c24 <_malloc_r+0xa8>
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	1b52      	subs	r2, r2, r5
 8007c08:	d420      	bmi.n	8007c4c <_malloc_r+0xd0>
 8007c0a:	2a0b      	cmp	r2, #11
 8007c0c:	d917      	bls.n	8007c3e <_malloc_r+0xc2>
 8007c0e:	1961      	adds	r1, r4, r5
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	6025      	str	r5, [r4, #0]
 8007c14:	bf18      	it	ne
 8007c16:	6059      	strne	r1, [r3, #4]
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	bf08      	it	eq
 8007c1c:	f8c8 1000 	streq.w	r1, [r8]
 8007c20:	5162      	str	r2, [r4, r5]
 8007c22:	604b      	str	r3, [r1, #4]
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f82f 	bl	8007c88 <__malloc_unlock>
 8007c2a:	f104 000b 	add.w	r0, r4, #11
 8007c2e:	1d23      	adds	r3, r4, #4
 8007c30:	f020 0007 	bic.w	r0, r0, #7
 8007c34:	1ac2      	subs	r2, r0, r3
 8007c36:	bf1c      	itt	ne
 8007c38:	1a1b      	subne	r3, r3, r0
 8007c3a:	50a3      	strne	r3, [r4, r2]
 8007c3c:	e7af      	b.n	8007b9e <_malloc_r+0x22>
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	bf0c      	ite	eq
 8007c44:	f8c8 2000 	streq.w	r2, [r8]
 8007c48:	605a      	strne	r2, [r3, #4]
 8007c4a:	e7eb      	b.n	8007c24 <_malloc_r+0xa8>
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	6864      	ldr	r4, [r4, #4]
 8007c50:	e7ae      	b.n	8007bb0 <_malloc_r+0x34>
 8007c52:	463c      	mov	r4, r7
 8007c54:	687f      	ldr	r7, [r7, #4]
 8007c56:	e7b6      	b.n	8007bc6 <_malloc_r+0x4a>
 8007c58:	461a      	mov	r2, r3
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d1fb      	bne.n	8007c58 <_malloc_r+0xdc>
 8007c60:	2300      	movs	r3, #0
 8007c62:	6053      	str	r3, [r2, #4]
 8007c64:	e7de      	b.n	8007c24 <_malloc_r+0xa8>
 8007c66:	230c      	movs	r3, #12
 8007c68:	4630      	mov	r0, r6
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f000 f80c 	bl	8007c88 <__malloc_unlock>
 8007c70:	e794      	b.n	8007b9c <_malloc_r+0x20>
 8007c72:	6005      	str	r5, [r0, #0]
 8007c74:	e7d6      	b.n	8007c24 <_malloc_r+0xa8>
 8007c76:	bf00      	nop
 8007c78:	20000440 	.word	0x20000440

08007c7c <__malloc_lock>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	@ (8007c84 <__malloc_lock+0x8>)
 8007c7e:	f7ff b8a6 	b.w	8006dce <__retarget_lock_acquire_recursive>
 8007c82:	bf00      	nop
 8007c84:	20000438 	.word	0x20000438

08007c88 <__malloc_unlock>:
 8007c88:	4801      	ldr	r0, [pc, #4]	@ (8007c90 <__malloc_unlock+0x8>)
 8007c8a:	f7ff b8a1 	b.w	8006dd0 <__retarget_lock_release_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20000438 	.word	0x20000438

08007c94 <_Balloc>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	69c6      	ldr	r6, [r0, #28]
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	b976      	cbnz	r6, 8007cbc <_Balloc+0x28>
 8007c9e:	2010      	movs	r0, #16
 8007ca0:	f7ff ff42 	bl	8007b28 <malloc>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	61e0      	str	r0, [r4, #28]
 8007ca8:	b920      	cbnz	r0, 8007cb4 <_Balloc+0x20>
 8007caa:	216b      	movs	r1, #107	@ 0x6b
 8007cac:	4b17      	ldr	r3, [pc, #92]	@ (8007d0c <_Balloc+0x78>)
 8007cae:	4818      	ldr	r0, [pc, #96]	@ (8007d10 <_Balloc+0x7c>)
 8007cb0:	f001 ff28 	bl	8009b04 <__assert_func>
 8007cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb8:	6006      	str	r6, [r0, #0]
 8007cba:	60c6      	str	r6, [r0, #12]
 8007cbc:	69e6      	ldr	r6, [r4, #28]
 8007cbe:	68f3      	ldr	r3, [r6, #12]
 8007cc0:	b183      	cbz	r3, 8007ce4 <_Balloc+0x50>
 8007cc2:	69e3      	ldr	r3, [r4, #28]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cca:	b9b8      	cbnz	r0, 8007cfc <_Balloc+0x68>
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f605 	lsl.w	r6, r1, r5
 8007cd2:	1d72      	adds	r2, r6, #5
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	0092      	lsls	r2, r2, #2
 8007cd8:	f001 ff32 	bl	8009b40 <_calloc_r>
 8007cdc:	b160      	cbz	r0, 8007cf8 <_Balloc+0x64>
 8007cde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ce2:	e00e      	b.n	8007d02 <_Balloc+0x6e>
 8007ce4:	2221      	movs	r2, #33	@ 0x21
 8007ce6:	2104      	movs	r1, #4
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f001 ff29 	bl	8009b40 <_calloc_r>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	60f0      	str	r0, [r6, #12]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e4      	bne.n	8007cc2 <_Balloc+0x2e>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	6802      	ldr	r2, [r0, #0]
 8007cfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d02:	2300      	movs	r3, #0
 8007d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d08:	e7f7      	b.n	8007cfa <_Balloc+0x66>
 8007d0a:	bf00      	nop
 8007d0c:	0800a420 	.word	0x0800a420
 8007d10:	0800a4a0 	.word	0x0800a4a0

08007d14 <_Bfree>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	69c6      	ldr	r6, [r0, #28]
 8007d18:	4605      	mov	r5, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b976      	cbnz	r6, 8007d3c <_Bfree+0x28>
 8007d1e:	2010      	movs	r0, #16
 8007d20:	f7ff ff02 	bl	8007b28 <malloc>
 8007d24:	4602      	mov	r2, r0
 8007d26:	61e8      	str	r0, [r5, #28]
 8007d28:	b920      	cbnz	r0, 8007d34 <_Bfree+0x20>
 8007d2a:	218f      	movs	r1, #143	@ 0x8f
 8007d2c:	4b08      	ldr	r3, [pc, #32]	@ (8007d50 <_Bfree+0x3c>)
 8007d2e:	4809      	ldr	r0, [pc, #36]	@ (8007d54 <_Bfree+0x40>)
 8007d30:	f001 fee8 	bl	8009b04 <__assert_func>
 8007d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d38:	6006      	str	r6, [r0, #0]
 8007d3a:	60c6      	str	r6, [r0, #12]
 8007d3c:	b13c      	cbz	r4, 8007d4e <_Bfree+0x3a>
 8007d3e:	69eb      	ldr	r3, [r5, #28]
 8007d40:	6862      	ldr	r2, [r4, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d48:	6021      	str	r1, [r4, #0]
 8007d4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	0800a420 	.word	0x0800a420
 8007d54:	0800a4a0 	.word	0x0800a4a0

08007d58 <__multadd>:
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	461e      	mov	r6, r3
 8007d62:	2000      	movs	r0, #0
 8007d64:	690d      	ldr	r5, [r1, #16]
 8007d66:	f101 0c14 	add.w	ip, r1, #20
 8007d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d6e:	3001      	adds	r0, #1
 8007d70:	b299      	uxth	r1, r3
 8007d72:	fb02 6101 	mla	r1, r2, r1, r6
 8007d76:	0c1e      	lsrs	r6, r3, #16
 8007d78:	0c0b      	lsrs	r3, r1, #16
 8007d7a:	fb02 3306 	mla	r3, r2, r6, r3
 8007d7e:	b289      	uxth	r1, r1
 8007d80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d84:	4285      	cmp	r5, r0
 8007d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d8e:	dcec      	bgt.n	8007d6a <__multadd+0x12>
 8007d90:	b30e      	cbz	r6, 8007dd6 <__multadd+0x7e>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	dc19      	bgt.n	8007dcc <__multadd+0x74>
 8007d98:	6861      	ldr	r1, [r4, #4]
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	3101      	adds	r1, #1
 8007d9e:	f7ff ff79 	bl	8007c94 <_Balloc>
 8007da2:	4680      	mov	r8, r0
 8007da4:	b928      	cbnz	r0, 8007db2 <__multadd+0x5a>
 8007da6:	4602      	mov	r2, r0
 8007da8:	21ba      	movs	r1, #186	@ 0xba
 8007daa:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <__multadd+0x84>)
 8007dac:	480c      	ldr	r0, [pc, #48]	@ (8007de0 <__multadd+0x88>)
 8007dae:	f001 fea9 	bl	8009b04 <__assert_func>
 8007db2:	6922      	ldr	r2, [r4, #16]
 8007db4:	f104 010c 	add.w	r1, r4, #12
 8007db8:	3202      	adds	r2, #2
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	300c      	adds	r0, #12
 8007dbe:	f001 fe8d 	bl	8009adc <memcpy>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7ff ffa5 	bl	8007d14 <_Bfree>
 8007dca:	4644      	mov	r4, r8
 8007dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	615e      	str	r6, [r3, #20]
 8007dd4:	6125      	str	r5, [r4, #16]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	0800a48f 	.word	0x0800a48f
 8007de0:	0800a4a0 	.word	0x0800a4a0

08007de4 <__s2b>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	4615      	mov	r5, r2
 8007dea:	2209      	movs	r2, #9
 8007dec:	461f      	mov	r7, r3
 8007dee:	3308      	adds	r3, #8
 8007df0:	460c      	mov	r4, r1
 8007df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007df6:	4606      	mov	r6, r0
 8007df8:	2201      	movs	r2, #1
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	db09      	blt.n	8007e14 <__s2b+0x30>
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff ff47 	bl	8007c94 <_Balloc>
 8007e06:	b940      	cbnz	r0, 8007e1a <__s2b+0x36>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	21d3      	movs	r1, #211	@ 0xd3
 8007e0c:	4b18      	ldr	r3, [pc, #96]	@ (8007e70 <__s2b+0x8c>)
 8007e0e:	4819      	ldr	r0, [pc, #100]	@ (8007e74 <__s2b+0x90>)
 8007e10:	f001 fe78 	bl	8009b04 <__assert_func>
 8007e14:	0052      	lsls	r2, r2, #1
 8007e16:	3101      	adds	r1, #1
 8007e18:	e7f0      	b.n	8007dfc <__s2b+0x18>
 8007e1a:	9b08      	ldr	r3, [sp, #32]
 8007e1c:	2d09      	cmp	r5, #9
 8007e1e:	6143      	str	r3, [r0, #20]
 8007e20:	f04f 0301 	mov.w	r3, #1
 8007e24:	6103      	str	r3, [r0, #16]
 8007e26:	dd16      	ble.n	8007e56 <__s2b+0x72>
 8007e28:	f104 0909 	add.w	r9, r4, #9
 8007e2c:	46c8      	mov	r8, r9
 8007e2e:	442c      	add	r4, r5
 8007e30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e34:	4601      	mov	r1, r0
 8007e36:	220a      	movs	r2, #10
 8007e38:	4630      	mov	r0, r6
 8007e3a:	3b30      	subs	r3, #48	@ 0x30
 8007e3c:	f7ff ff8c 	bl	8007d58 <__multadd>
 8007e40:	45a0      	cmp	r8, r4
 8007e42:	d1f5      	bne.n	8007e30 <__s2b+0x4c>
 8007e44:	f1a5 0408 	sub.w	r4, r5, #8
 8007e48:	444c      	add	r4, r9
 8007e4a:	1b2d      	subs	r5, r5, r4
 8007e4c:	1963      	adds	r3, r4, r5
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	db04      	blt.n	8007e5c <__s2b+0x78>
 8007e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e56:	2509      	movs	r5, #9
 8007e58:	340a      	adds	r4, #10
 8007e5a:	e7f6      	b.n	8007e4a <__s2b+0x66>
 8007e5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e60:	4601      	mov	r1, r0
 8007e62:	220a      	movs	r2, #10
 8007e64:	4630      	mov	r0, r6
 8007e66:	3b30      	subs	r3, #48	@ 0x30
 8007e68:	f7ff ff76 	bl	8007d58 <__multadd>
 8007e6c:	e7ee      	b.n	8007e4c <__s2b+0x68>
 8007e6e:	bf00      	nop
 8007e70:	0800a48f 	.word	0x0800a48f
 8007e74:	0800a4a0 	.word	0x0800a4a0

08007e78 <__hi0bits>:
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e7e:	bf3a      	itte	cc
 8007e80:	0403      	lslcc	r3, r0, #16
 8007e82:	2010      	movcc	r0, #16
 8007e84:	2000      	movcs	r0, #0
 8007e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e8a:	bf3c      	itt	cc
 8007e8c:	021b      	lslcc	r3, r3, #8
 8007e8e:	3008      	addcc	r0, #8
 8007e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e94:	bf3c      	itt	cc
 8007e96:	011b      	lslcc	r3, r3, #4
 8007e98:	3004      	addcc	r0, #4
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9e:	bf3c      	itt	cc
 8007ea0:	009b      	lslcc	r3, r3, #2
 8007ea2:	3002      	addcc	r0, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	db05      	blt.n	8007eb4 <__hi0bits+0x3c>
 8007ea8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007eac:	f100 0001 	add.w	r0, r0, #1
 8007eb0:	bf08      	it	eq
 8007eb2:	2020      	moveq	r0, #32
 8007eb4:	4770      	bx	lr

08007eb6 <__lo0bits>:
 8007eb6:	6803      	ldr	r3, [r0, #0]
 8007eb8:	4602      	mov	r2, r0
 8007eba:	f013 0007 	ands.w	r0, r3, #7
 8007ebe:	d00b      	beq.n	8007ed8 <__lo0bits+0x22>
 8007ec0:	07d9      	lsls	r1, r3, #31
 8007ec2:	d421      	bmi.n	8007f08 <__lo0bits+0x52>
 8007ec4:	0798      	lsls	r0, r3, #30
 8007ec6:	bf49      	itett	mi
 8007ec8:	085b      	lsrmi	r3, r3, #1
 8007eca:	089b      	lsrpl	r3, r3, #2
 8007ecc:	2001      	movmi	r0, #1
 8007ece:	6013      	strmi	r3, [r2, #0]
 8007ed0:	bf5c      	itt	pl
 8007ed2:	2002      	movpl	r0, #2
 8007ed4:	6013      	strpl	r3, [r2, #0]
 8007ed6:	4770      	bx	lr
 8007ed8:	b299      	uxth	r1, r3
 8007eda:	b909      	cbnz	r1, 8007ee0 <__lo0bits+0x2a>
 8007edc:	2010      	movs	r0, #16
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	b2d9      	uxtb	r1, r3
 8007ee2:	b909      	cbnz	r1, 8007ee8 <__lo0bits+0x32>
 8007ee4:	3008      	adds	r0, #8
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	bf04      	itt	eq
 8007eec:	091b      	lsreq	r3, r3, #4
 8007eee:	3004      	addeq	r0, #4
 8007ef0:	0799      	lsls	r1, r3, #30
 8007ef2:	bf04      	itt	eq
 8007ef4:	089b      	lsreq	r3, r3, #2
 8007ef6:	3002      	addeq	r0, #2
 8007ef8:	07d9      	lsls	r1, r3, #31
 8007efa:	d403      	bmi.n	8007f04 <__lo0bits+0x4e>
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	f100 0001 	add.w	r0, r0, #1
 8007f02:	d003      	beq.n	8007f0c <__lo0bits+0x56>
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	4770      	bx	lr
 8007f08:	2000      	movs	r0, #0
 8007f0a:	4770      	bx	lr
 8007f0c:	2020      	movs	r0, #32
 8007f0e:	4770      	bx	lr

08007f10 <__i2b>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	460c      	mov	r4, r1
 8007f14:	2101      	movs	r1, #1
 8007f16:	f7ff febd 	bl	8007c94 <_Balloc>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	b928      	cbnz	r0, 8007f2a <__i2b+0x1a>
 8007f1e:	f240 1145 	movw	r1, #325	@ 0x145
 8007f22:	4b04      	ldr	r3, [pc, #16]	@ (8007f34 <__i2b+0x24>)
 8007f24:	4804      	ldr	r0, [pc, #16]	@ (8007f38 <__i2b+0x28>)
 8007f26:	f001 fded 	bl	8009b04 <__assert_func>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	6144      	str	r4, [r0, #20]
 8007f2e:	6103      	str	r3, [r0, #16]
 8007f30:	bd10      	pop	{r4, pc}
 8007f32:	bf00      	nop
 8007f34:	0800a48f 	.word	0x0800a48f
 8007f38:	0800a4a0 	.word	0x0800a4a0

08007f3c <__multiply>:
 8007f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	4614      	mov	r4, r2
 8007f42:	690a      	ldr	r2, [r1, #16]
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	460f      	mov	r7, r1
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bfa2      	ittt	ge
 8007f4c:	4623      	movge	r3, r4
 8007f4e:	460c      	movge	r4, r1
 8007f50:	461f      	movge	r7, r3
 8007f52:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f56:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	eb0a 0609 	add.w	r6, sl, r9
 8007f62:	42b3      	cmp	r3, r6
 8007f64:	b085      	sub	sp, #20
 8007f66:	bfb8      	it	lt
 8007f68:	3101      	addlt	r1, #1
 8007f6a:	f7ff fe93 	bl	8007c94 <_Balloc>
 8007f6e:	b930      	cbnz	r0, 8007f7e <__multiply+0x42>
 8007f70:	4602      	mov	r2, r0
 8007f72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f76:	4b43      	ldr	r3, [pc, #268]	@ (8008084 <__multiply+0x148>)
 8007f78:	4843      	ldr	r0, [pc, #268]	@ (8008088 <__multiply+0x14c>)
 8007f7a:	f001 fdc3 	bl	8009b04 <__assert_func>
 8007f7e:	f100 0514 	add.w	r5, r0, #20
 8007f82:	462b      	mov	r3, r5
 8007f84:	2200      	movs	r2, #0
 8007f86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f8a:	4543      	cmp	r3, r8
 8007f8c:	d321      	bcc.n	8007fd2 <__multiply+0x96>
 8007f8e:	f107 0114 	add.w	r1, r7, #20
 8007f92:	f104 0214 	add.w	r2, r4, #20
 8007f96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	1b13      	subs	r3, r2, r4
 8007fa2:	3b15      	subs	r3, #21
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	3304      	adds	r3, #4
 8007faa:	f104 0715 	add.w	r7, r4, #21
 8007fae:	42ba      	cmp	r2, r7
 8007fb0:	bf38      	it	cc
 8007fb2:	2304      	movcc	r3, #4
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	9103      	str	r1, [sp, #12]
 8007fba:	428b      	cmp	r3, r1
 8007fbc:	d80c      	bhi.n	8007fd8 <__multiply+0x9c>
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	dd03      	ble.n	8007fca <__multiply+0x8e>
 8007fc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d05a      	beq.n	8008080 <__multiply+0x144>
 8007fca:	6106      	str	r6, [r0, #16]
 8007fcc:	b005      	add	sp, #20
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	f843 2b04 	str.w	r2, [r3], #4
 8007fd6:	e7d8      	b.n	8007f8a <__multiply+0x4e>
 8007fd8:	f8b1 a000 	ldrh.w	sl, [r1]
 8007fdc:	f1ba 0f00 	cmp.w	sl, #0
 8007fe0:	d023      	beq.n	800802a <__multiply+0xee>
 8007fe2:	46a9      	mov	r9, r5
 8007fe4:	f04f 0c00 	mov.w	ip, #0
 8007fe8:	f104 0e14 	add.w	lr, r4, #20
 8007fec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ff0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ff4:	fa1f fb87 	uxth.w	fp, r7
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ffe:	4463      	add	r3, ip
 8008000:	f8d9 c000 	ldr.w	ip, [r9]
 8008004:	0c3f      	lsrs	r7, r7, #16
 8008006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800800a:	fb0a c707 	mla	r7, sl, r7, ip
 800800e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008012:	b29b      	uxth	r3, r3
 8008014:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008018:	4572      	cmp	r2, lr
 800801a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800801e:	f849 3b04 	str.w	r3, [r9], #4
 8008022:	d8e3      	bhi.n	8007fec <__multiply+0xb0>
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	f845 c003 	str.w	ip, [r5, r3]
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	3104      	adds	r1, #4
 800802e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008032:	f1b9 0f00 	cmp.w	r9, #0
 8008036:	d021      	beq.n	800807c <__multiply+0x140>
 8008038:	46ae      	mov	lr, r5
 800803a:	f04f 0a00 	mov.w	sl, #0
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	f104 0c14 	add.w	ip, r4, #20
 8008044:	f8bc b000 	ldrh.w	fp, [ip]
 8008048:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800804c:	b29b      	uxth	r3, r3
 800804e:	fb09 770b 	mla	r7, r9, fp, r7
 8008052:	4457      	add	r7, sl
 8008054:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008058:	f84e 3b04 	str.w	r3, [lr], #4
 800805c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008064:	f8be 3000 	ldrh.w	r3, [lr]
 8008068:	4562      	cmp	r2, ip
 800806a:	fb09 330a 	mla	r3, r9, sl, r3
 800806e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008072:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008076:	d8e5      	bhi.n	8008044 <__multiply+0x108>
 8008078:	9f01      	ldr	r7, [sp, #4]
 800807a:	51eb      	str	r3, [r5, r7]
 800807c:	3504      	adds	r5, #4
 800807e:	e79a      	b.n	8007fb6 <__multiply+0x7a>
 8008080:	3e01      	subs	r6, #1
 8008082:	e79c      	b.n	8007fbe <__multiply+0x82>
 8008084:	0800a48f 	.word	0x0800a48f
 8008088:	0800a4a0 	.word	0x0800a4a0

0800808c <__pow5mult>:
 800808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008090:	4615      	mov	r5, r2
 8008092:	f012 0203 	ands.w	r2, r2, #3
 8008096:	4607      	mov	r7, r0
 8008098:	460e      	mov	r6, r1
 800809a:	d007      	beq.n	80080ac <__pow5mult+0x20>
 800809c:	4c25      	ldr	r4, [pc, #148]	@ (8008134 <__pow5mult+0xa8>)
 800809e:	3a01      	subs	r2, #1
 80080a0:	2300      	movs	r3, #0
 80080a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080a6:	f7ff fe57 	bl	8007d58 <__multadd>
 80080aa:	4606      	mov	r6, r0
 80080ac:	10ad      	asrs	r5, r5, #2
 80080ae:	d03d      	beq.n	800812c <__pow5mult+0xa0>
 80080b0:	69fc      	ldr	r4, [r7, #28]
 80080b2:	b97c      	cbnz	r4, 80080d4 <__pow5mult+0x48>
 80080b4:	2010      	movs	r0, #16
 80080b6:	f7ff fd37 	bl	8007b28 <malloc>
 80080ba:	4602      	mov	r2, r0
 80080bc:	61f8      	str	r0, [r7, #28]
 80080be:	b928      	cbnz	r0, 80080cc <__pow5mult+0x40>
 80080c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80080c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008138 <__pow5mult+0xac>)
 80080c6:	481d      	ldr	r0, [pc, #116]	@ (800813c <__pow5mult+0xb0>)
 80080c8:	f001 fd1c 	bl	8009b04 <__assert_func>
 80080cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080d0:	6004      	str	r4, [r0, #0]
 80080d2:	60c4      	str	r4, [r0, #12]
 80080d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080dc:	b94c      	cbnz	r4, 80080f2 <__pow5mult+0x66>
 80080de:	f240 2171 	movw	r1, #625	@ 0x271
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7ff ff14 	bl	8007f10 <__i2b>
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	07eb      	lsls	r3, r5, #31
 80080f8:	d50a      	bpl.n	8008110 <__pow5mult+0x84>
 80080fa:	4631      	mov	r1, r6
 80080fc:	4622      	mov	r2, r4
 80080fe:	4638      	mov	r0, r7
 8008100:	f7ff ff1c 	bl	8007f3c <__multiply>
 8008104:	4680      	mov	r8, r0
 8008106:	4631      	mov	r1, r6
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff fe03 	bl	8007d14 <_Bfree>
 800810e:	4646      	mov	r6, r8
 8008110:	106d      	asrs	r5, r5, #1
 8008112:	d00b      	beq.n	800812c <__pow5mult+0xa0>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	b938      	cbnz	r0, 8008128 <__pow5mult+0x9c>
 8008118:	4622      	mov	r2, r4
 800811a:	4621      	mov	r1, r4
 800811c:	4638      	mov	r0, r7
 800811e:	f7ff ff0d 	bl	8007f3c <__multiply>
 8008122:	6020      	str	r0, [r4, #0]
 8008124:	f8c0 9000 	str.w	r9, [r0]
 8008128:	4604      	mov	r4, r0
 800812a:	e7e4      	b.n	80080f6 <__pow5mult+0x6a>
 800812c:	4630      	mov	r0, r6
 800812e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008132:	bf00      	nop
 8008134:	0800a4fc 	.word	0x0800a4fc
 8008138:	0800a420 	.word	0x0800a420
 800813c:	0800a4a0 	.word	0x0800a4a0

08008140 <__lshift>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	460c      	mov	r4, r1
 8008146:	4607      	mov	r7, r0
 8008148:	4691      	mov	r9, r2
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	6849      	ldr	r1, [r1, #4]
 800814e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008158:	f108 0601 	add.w	r6, r8, #1
 800815c:	42b3      	cmp	r3, r6
 800815e:	db0b      	blt.n	8008178 <__lshift+0x38>
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff fd97 	bl	8007c94 <_Balloc>
 8008166:	4605      	mov	r5, r0
 8008168:	b948      	cbnz	r0, 800817e <__lshift+0x3e>
 800816a:	4602      	mov	r2, r0
 800816c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008170:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <__lshift+0xd0>)
 8008172:	4828      	ldr	r0, [pc, #160]	@ (8008214 <__lshift+0xd4>)
 8008174:	f001 fcc6 	bl	8009b04 <__assert_func>
 8008178:	3101      	adds	r1, #1
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	e7ee      	b.n	800815c <__lshift+0x1c>
 800817e:	2300      	movs	r3, #0
 8008180:	f100 0114 	add.w	r1, r0, #20
 8008184:	f100 0210 	add.w	r2, r0, #16
 8008188:	4618      	mov	r0, r3
 800818a:	4553      	cmp	r3, sl
 800818c:	db33      	blt.n	80081f6 <__lshift+0xb6>
 800818e:	6920      	ldr	r0, [r4, #16]
 8008190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008194:	f104 0314 	add.w	r3, r4, #20
 8008198:	f019 091f 	ands.w	r9, r9, #31
 800819c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081a4:	d02b      	beq.n	80081fe <__lshift+0xbe>
 80081a6:	468a      	mov	sl, r1
 80081a8:	2200      	movs	r2, #0
 80081aa:	f1c9 0e20 	rsb	lr, r9, #32
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	fa00 f009 	lsl.w	r0, r0, r9
 80081b4:	4310      	orrs	r0, r2
 80081b6:	f84a 0b04 	str.w	r0, [sl], #4
 80081ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80081be:	459c      	cmp	ip, r3
 80081c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80081c4:	d8f3      	bhi.n	80081ae <__lshift+0x6e>
 80081c6:	ebac 0304 	sub.w	r3, ip, r4
 80081ca:	3b15      	subs	r3, #21
 80081cc:	f023 0303 	bic.w	r3, r3, #3
 80081d0:	3304      	adds	r3, #4
 80081d2:	f104 0015 	add.w	r0, r4, #21
 80081d6:	4584      	cmp	ip, r0
 80081d8:	bf38      	it	cc
 80081da:	2304      	movcc	r3, #4
 80081dc:	50ca      	str	r2, [r1, r3]
 80081de:	b10a      	cbz	r2, 80081e4 <__lshift+0xa4>
 80081e0:	f108 0602 	add.w	r6, r8, #2
 80081e4:	3e01      	subs	r6, #1
 80081e6:	4638      	mov	r0, r7
 80081e8:	4621      	mov	r1, r4
 80081ea:	612e      	str	r6, [r5, #16]
 80081ec:	f7ff fd92 	bl	8007d14 <_Bfree>
 80081f0:	4628      	mov	r0, r5
 80081f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081fa:	3301      	adds	r3, #1
 80081fc:	e7c5      	b.n	800818a <__lshift+0x4a>
 80081fe:	3904      	subs	r1, #4
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
 8008204:	459c      	cmp	ip, r3
 8008206:	f841 2f04 	str.w	r2, [r1, #4]!
 800820a:	d8f9      	bhi.n	8008200 <__lshift+0xc0>
 800820c:	e7ea      	b.n	80081e4 <__lshift+0xa4>
 800820e:	bf00      	nop
 8008210:	0800a48f 	.word	0x0800a48f
 8008214:	0800a4a0 	.word	0x0800a4a0

08008218 <__mcmp>:
 8008218:	4603      	mov	r3, r0
 800821a:	690a      	ldr	r2, [r1, #16]
 800821c:	6900      	ldr	r0, [r0, #16]
 800821e:	b530      	push	{r4, r5, lr}
 8008220:	1a80      	subs	r0, r0, r2
 8008222:	d10e      	bne.n	8008242 <__mcmp+0x2a>
 8008224:	3314      	adds	r3, #20
 8008226:	3114      	adds	r1, #20
 8008228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800822c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008238:	4295      	cmp	r5, r2
 800823a:	d003      	beq.n	8008244 <__mcmp+0x2c>
 800823c:	d205      	bcs.n	800824a <__mcmp+0x32>
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	42a3      	cmp	r3, r4
 8008246:	d3f3      	bcc.n	8008230 <__mcmp+0x18>
 8008248:	e7fb      	b.n	8008242 <__mcmp+0x2a>
 800824a:	2001      	movs	r0, #1
 800824c:	e7f9      	b.n	8008242 <__mcmp+0x2a>
	...

08008250 <__mdiff>:
 8008250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	4689      	mov	r9, r1
 8008256:	4606      	mov	r6, r0
 8008258:	4611      	mov	r1, r2
 800825a:	4648      	mov	r0, r9
 800825c:	4614      	mov	r4, r2
 800825e:	f7ff ffdb 	bl	8008218 <__mcmp>
 8008262:	1e05      	subs	r5, r0, #0
 8008264:	d112      	bne.n	800828c <__mdiff+0x3c>
 8008266:	4629      	mov	r1, r5
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff fd13 	bl	8007c94 <_Balloc>
 800826e:	4602      	mov	r2, r0
 8008270:	b928      	cbnz	r0, 800827e <__mdiff+0x2e>
 8008272:	f240 2137 	movw	r1, #567	@ 0x237
 8008276:	4b3e      	ldr	r3, [pc, #248]	@ (8008370 <__mdiff+0x120>)
 8008278:	483e      	ldr	r0, [pc, #248]	@ (8008374 <__mdiff+0x124>)
 800827a:	f001 fc43 	bl	8009b04 <__assert_func>
 800827e:	2301      	movs	r3, #1
 8008280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008284:	4610      	mov	r0, r2
 8008286:	b003      	add	sp, #12
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	bfbc      	itt	lt
 800828e:	464b      	movlt	r3, r9
 8008290:	46a1      	movlt	r9, r4
 8008292:	4630      	mov	r0, r6
 8008294:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008298:	bfba      	itte	lt
 800829a:	461c      	movlt	r4, r3
 800829c:	2501      	movlt	r5, #1
 800829e:	2500      	movge	r5, #0
 80082a0:	f7ff fcf8 	bl	8007c94 <_Balloc>
 80082a4:	4602      	mov	r2, r0
 80082a6:	b918      	cbnz	r0, 80082b0 <__mdiff+0x60>
 80082a8:	f240 2145 	movw	r1, #581	@ 0x245
 80082ac:	4b30      	ldr	r3, [pc, #192]	@ (8008370 <__mdiff+0x120>)
 80082ae:	e7e3      	b.n	8008278 <__mdiff+0x28>
 80082b0:	f100 0b14 	add.w	fp, r0, #20
 80082b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082b8:	f109 0310 	add.w	r3, r9, #16
 80082bc:	60c5      	str	r5, [r0, #12]
 80082be:	f04f 0c00 	mov.w	ip, #0
 80082c2:	f109 0514 	add.w	r5, r9, #20
 80082c6:	46d9      	mov	r9, fp
 80082c8:	6926      	ldr	r6, [r4, #16]
 80082ca:	f104 0e14 	add.w	lr, r4, #20
 80082ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082e2:	b281      	uxth	r1, r0
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	fa1f f38a 	uxth.w	r3, sl
 80082ea:	1a5b      	subs	r3, r3, r1
 80082ec:	0c00      	lsrs	r0, r0, #16
 80082ee:	4463      	add	r3, ip
 80082f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082fe:	4576      	cmp	r6, lr
 8008300:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008304:	f849 3b04 	str.w	r3, [r9], #4
 8008308:	d8e6      	bhi.n	80082d8 <__mdiff+0x88>
 800830a:	1b33      	subs	r3, r6, r4
 800830c:	3b15      	subs	r3, #21
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	3415      	adds	r4, #21
 8008314:	3304      	adds	r3, #4
 8008316:	42a6      	cmp	r6, r4
 8008318:	bf38      	it	cc
 800831a:	2304      	movcc	r3, #4
 800831c:	441d      	add	r5, r3
 800831e:	445b      	add	r3, fp
 8008320:	461e      	mov	r6, r3
 8008322:	462c      	mov	r4, r5
 8008324:	4544      	cmp	r4, r8
 8008326:	d30e      	bcc.n	8008346 <__mdiff+0xf6>
 8008328:	f108 0103 	add.w	r1, r8, #3
 800832c:	1b49      	subs	r1, r1, r5
 800832e:	f021 0103 	bic.w	r1, r1, #3
 8008332:	3d03      	subs	r5, #3
 8008334:	45a8      	cmp	r8, r5
 8008336:	bf38      	it	cc
 8008338:	2100      	movcc	r1, #0
 800833a:	440b      	add	r3, r1
 800833c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008340:	b199      	cbz	r1, 800836a <__mdiff+0x11a>
 8008342:	6117      	str	r7, [r2, #16]
 8008344:	e79e      	b.n	8008284 <__mdiff+0x34>
 8008346:	46e6      	mov	lr, ip
 8008348:	f854 1b04 	ldr.w	r1, [r4], #4
 800834c:	fa1f fc81 	uxth.w	ip, r1
 8008350:	44f4      	add	ip, lr
 8008352:	0c08      	lsrs	r0, r1, #16
 8008354:	4471      	add	r1, lr
 8008356:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800835a:	b289      	uxth	r1, r1
 800835c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008360:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008364:	f846 1b04 	str.w	r1, [r6], #4
 8008368:	e7dc      	b.n	8008324 <__mdiff+0xd4>
 800836a:	3f01      	subs	r7, #1
 800836c:	e7e6      	b.n	800833c <__mdiff+0xec>
 800836e:	bf00      	nop
 8008370:	0800a48f 	.word	0x0800a48f
 8008374:	0800a4a0 	.word	0x0800a4a0

08008378 <__ulp>:
 8008378:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <__ulp+0x3c>)
 800837a:	400b      	ands	r3, r1
 800837c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008380:	2b00      	cmp	r3, #0
 8008382:	dc08      	bgt.n	8008396 <__ulp+0x1e>
 8008384:	425b      	negs	r3, r3
 8008386:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800838a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800838e:	da04      	bge.n	800839a <__ulp+0x22>
 8008390:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008394:	4113      	asrs	r3, r2
 8008396:	2200      	movs	r2, #0
 8008398:	e008      	b.n	80083ac <__ulp+0x34>
 800839a:	f1a2 0314 	sub.w	r3, r2, #20
 800839e:	2b1e      	cmp	r3, #30
 80083a0:	bfd6      	itet	le
 80083a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80083a6:	2201      	movgt	r2, #1
 80083a8:	40da      	lsrle	r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	7ff00000 	.word	0x7ff00000

080083b8 <__b2d>:
 80083b8:	6902      	ldr	r2, [r0, #16]
 80083ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083bc:	f100 0614 	add.w	r6, r0, #20
 80083c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80083c4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80083c8:	4f1e      	ldr	r7, [pc, #120]	@ (8008444 <__b2d+0x8c>)
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7ff fd54 	bl	8007e78 <__hi0bits>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f1c0 0020 	rsb	r0, r0, #32
 80083d6:	2b0a      	cmp	r3, #10
 80083d8:	f1a2 0504 	sub.w	r5, r2, #4
 80083dc:	6008      	str	r0, [r1, #0]
 80083de:	dc12      	bgt.n	8008406 <__b2d+0x4e>
 80083e0:	42ae      	cmp	r6, r5
 80083e2:	bf2c      	ite	cs
 80083e4:	2200      	movcs	r2, #0
 80083e6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80083ea:	f1c3 0c0b 	rsb	ip, r3, #11
 80083ee:	3315      	adds	r3, #21
 80083f0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80083f4:	fa04 f303 	lsl.w	r3, r4, r3
 80083f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80083fc:	ea4e 0107 	orr.w	r1, lr, r7
 8008400:	431a      	orrs	r2, r3
 8008402:	4610      	mov	r0, r2
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008406:	42ae      	cmp	r6, r5
 8008408:	bf36      	itet	cc
 800840a:	f1a2 0508 	subcc.w	r5, r2, #8
 800840e:	2200      	movcs	r2, #0
 8008410:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008414:	3b0b      	subs	r3, #11
 8008416:	d012      	beq.n	800843e <__b2d+0x86>
 8008418:	f1c3 0720 	rsb	r7, r3, #32
 800841c:	fa22 f107 	lsr.w	r1, r2, r7
 8008420:	409c      	lsls	r4, r3
 8008422:	430c      	orrs	r4, r1
 8008424:	42b5      	cmp	r5, r6
 8008426:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800842a:	bf94      	ite	ls
 800842c:	2400      	movls	r4, #0
 800842e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008432:	409a      	lsls	r2, r3
 8008434:	40fc      	lsrs	r4, r7
 8008436:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800843a:	4322      	orrs	r2, r4
 800843c:	e7e1      	b.n	8008402 <__b2d+0x4a>
 800843e:	ea44 0107 	orr.w	r1, r4, r7
 8008442:	e7de      	b.n	8008402 <__b2d+0x4a>
 8008444:	3ff00000 	.word	0x3ff00000

08008448 <__d2b>:
 8008448:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800844c:	2101      	movs	r1, #1
 800844e:	4690      	mov	r8, r2
 8008450:	4699      	mov	r9, r3
 8008452:	9e08      	ldr	r6, [sp, #32]
 8008454:	f7ff fc1e 	bl	8007c94 <_Balloc>
 8008458:	4604      	mov	r4, r0
 800845a:	b930      	cbnz	r0, 800846a <__d2b+0x22>
 800845c:	4602      	mov	r2, r0
 800845e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008462:	4b23      	ldr	r3, [pc, #140]	@ (80084f0 <__d2b+0xa8>)
 8008464:	4823      	ldr	r0, [pc, #140]	@ (80084f4 <__d2b+0xac>)
 8008466:	f001 fb4d 	bl	8009b04 <__assert_func>
 800846a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800846e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008472:	b10d      	cbz	r5, 8008478 <__d2b+0x30>
 8008474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	f1b8 0300 	subs.w	r3, r8, #0
 800847e:	d024      	beq.n	80084ca <__d2b+0x82>
 8008480:	4668      	mov	r0, sp
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	f7ff fd17 	bl	8007eb6 <__lo0bits>
 8008488:	e9dd 1200 	ldrd	r1, r2, [sp]
 800848c:	b1d8      	cbz	r0, 80084c6 <__d2b+0x7e>
 800848e:	f1c0 0320 	rsb	r3, r0, #32
 8008492:	fa02 f303 	lsl.w	r3, r2, r3
 8008496:	430b      	orrs	r3, r1
 8008498:	40c2      	lsrs	r2, r0
 800849a:	6163      	str	r3, [r4, #20]
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	9b01      	ldr	r3, [sp, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bf0c      	ite	eq
 80084a4:	2201      	moveq	r2, #1
 80084a6:	2202      	movne	r2, #2
 80084a8:	61a3      	str	r3, [r4, #24]
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	b1ad      	cbz	r5, 80084da <__d2b+0x92>
 80084ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084b2:	4405      	add	r5, r0
 80084b4:	6035      	str	r5, [r6, #0]
 80084b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084bc:	6018      	str	r0, [r3, #0]
 80084be:	4620      	mov	r0, r4
 80084c0:	b002      	add	sp, #8
 80084c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80084c6:	6161      	str	r1, [r4, #20]
 80084c8:	e7e9      	b.n	800849e <__d2b+0x56>
 80084ca:	a801      	add	r0, sp, #4
 80084cc:	f7ff fcf3 	bl	8007eb6 <__lo0bits>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	6163      	str	r3, [r4, #20]
 80084d6:	3020      	adds	r0, #32
 80084d8:	e7e7      	b.n	80084aa <__d2b+0x62>
 80084da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084e2:	6030      	str	r0, [r6, #0]
 80084e4:	6918      	ldr	r0, [r3, #16]
 80084e6:	f7ff fcc7 	bl	8007e78 <__hi0bits>
 80084ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ee:	e7e4      	b.n	80084ba <__d2b+0x72>
 80084f0:	0800a48f 	.word	0x0800a48f
 80084f4:	0800a4a0 	.word	0x0800a4a0

080084f8 <__ratio>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	b085      	sub	sp, #20
 80084fe:	e9cd 1000 	strd	r1, r0, [sp]
 8008502:	a902      	add	r1, sp, #8
 8008504:	f7ff ff58 	bl	80083b8 <__b2d>
 8008508:	468b      	mov	fp, r1
 800850a:	4606      	mov	r6, r0
 800850c:	460f      	mov	r7, r1
 800850e:	9800      	ldr	r0, [sp, #0]
 8008510:	a903      	add	r1, sp, #12
 8008512:	f7ff ff51 	bl	80083b8 <__b2d>
 8008516:	460d      	mov	r5, r1
 8008518:	9b01      	ldr	r3, [sp, #4]
 800851a:	4689      	mov	r9, r1
 800851c:	6919      	ldr	r1, [r3, #16]
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	4604      	mov	r4, r0
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	4630      	mov	r0, r6
 8008526:	1ac9      	subs	r1, r1, r3
 8008528:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfcd      	iteet	gt
 8008536:	463a      	movgt	r2, r7
 8008538:	462a      	movle	r2, r5
 800853a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800853e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008542:	bfd8      	it	le
 8008544:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008548:	464b      	mov	r3, r9
 800854a:	4622      	mov	r2, r4
 800854c:	4659      	mov	r1, fp
 800854e:	f7f8 f8ed 	bl	800072c <__aeabi_ddiv>
 8008552:	b005      	add	sp, #20
 8008554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008558 <__copybits>:
 8008558:	3901      	subs	r1, #1
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	1149      	asrs	r1, r1, #5
 800855e:	6914      	ldr	r4, [r2, #16]
 8008560:	3101      	adds	r1, #1
 8008562:	f102 0314 	add.w	r3, r2, #20
 8008566:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800856a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800856e:	1f05      	subs	r5, r0, #4
 8008570:	42a3      	cmp	r3, r4
 8008572:	d30c      	bcc.n	800858e <__copybits+0x36>
 8008574:	1aa3      	subs	r3, r4, r2
 8008576:	3b11      	subs	r3, #17
 8008578:	f023 0303 	bic.w	r3, r3, #3
 800857c:	3211      	adds	r2, #17
 800857e:	42a2      	cmp	r2, r4
 8008580:	bf88      	it	hi
 8008582:	2300      	movhi	r3, #0
 8008584:	4418      	add	r0, r3
 8008586:	2300      	movs	r3, #0
 8008588:	4288      	cmp	r0, r1
 800858a:	d305      	bcc.n	8008598 <__copybits+0x40>
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008592:	f845 6f04 	str.w	r6, [r5, #4]!
 8008596:	e7eb      	b.n	8008570 <__copybits+0x18>
 8008598:	f840 3b04 	str.w	r3, [r0], #4
 800859c:	e7f4      	b.n	8008588 <__copybits+0x30>

0800859e <__any_on>:
 800859e:	f100 0214 	add.w	r2, r0, #20
 80085a2:	6900      	ldr	r0, [r0, #16]
 80085a4:	114b      	asrs	r3, r1, #5
 80085a6:	4298      	cmp	r0, r3
 80085a8:	b510      	push	{r4, lr}
 80085aa:	db11      	blt.n	80085d0 <__any_on+0x32>
 80085ac:	dd0a      	ble.n	80085c4 <__any_on+0x26>
 80085ae:	f011 011f 	ands.w	r1, r1, #31
 80085b2:	d007      	beq.n	80085c4 <__any_on+0x26>
 80085b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085b8:	fa24 f001 	lsr.w	r0, r4, r1
 80085bc:	fa00 f101 	lsl.w	r1, r0, r1
 80085c0:	428c      	cmp	r4, r1
 80085c2:	d10b      	bne.n	80085dc <__any_on+0x3e>
 80085c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d803      	bhi.n	80085d4 <__any_on+0x36>
 80085cc:	2000      	movs	r0, #0
 80085ce:	bd10      	pop	{r4, pc}
 80085d0:	4603      	mov	r3, r0
 80085d2:	e7f7      	b.n	80085c4 <__any_on+0x26>
 80085d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d8:	2900      	cmp	r1, #0
 80085da:	d0f5      	beq.n	80085c8 <__any_on+0x2a>
 80085dc:	2001      	movs	r0, #1
 80085de:	e7f6      	b.n	80085ce <__any_on+0x30>

080085e0 <sulp>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	460f      	mov	r7, r1
 80085e6:	4690      	mov	r8, r2
 80085e8:	f7ff fec6 	bl	8008378 <__ulp>
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	f1b8 0f00 	cmp.w	r8, #0
 80085f4:	d011      	beq.n	800861a <sulp+0x3a>
 80085f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80085fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd0b      	ble.n	800861a <sulp+0x3a>
 8008602:	2400      	movs	r4, #0
 8008604:	051b      	lsls	r3, r3, #20
 8008606:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800860a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800860e:	4622      	mov	r2, r4
 8008610:	462b      	mov	r3, r5
 8008612:	f7f7 ff61 	bl	80004d8 <__aeabi_dmul>
 8008616:	4604      	mov	r4, r0
 8008618:	460d      	mov	r5, r1
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008622:	0000      	movs	r0, r0
 8008624:	0000      	movs	r0, r0
	...

08008628 <_strtod_l>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b09f      	sub	sp, #124	@ 0x7c
 800862e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008630:	2200      	movs	r2, #0
 8008632:	460c      	mov	r4, r1
 8008634:	921a      	str	r2, [sp, #104]	@ 0x68
 8008636:	f04f 0a00 	mov.w	sl, #0
 800863a:	f04f 0b00 	mov.w	fp, #0
 800863e:	460a      	mov	r2, r1
 8008640:	9005      	str	r0, [sp, #20]
 8008642:	9219      	str	r2, [sp, #100]	@ 0x64
 8008644:	7811      	ldrb	r1, [r2, #0]
 8008646:	292b      	cmp	r1, #43	@ 0x2b
 8008648:	d048      	beq.n	80086dc <_strtod_l+0xb4>
 800864a:	d836      	bhi.n	80086ba <_strtod_l+0x92>
 800864c:	290d      	cmp	r1, #13
 800864e:	d830      	bhi.n	80086b2 <_strtod_l+0x8a>
 8008650:	2908      	cmp	r1, #8
 8008652:	d830      	bhi.n	80086b6 <_strtod_l+0x8e>
 8008654:	2900      	cmp	r1, #0
 8008656:	d039      	beq.n	80086cc <_strtod_l+0xa4>
 8008658:	2200      	movs	r2, #0
 800865a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800865c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800865e:	782a      	ldrb	r2, [r5, #0]
 8008660:	2a30      	cmp	r2, #48	@ 0x30
 8008662:	f040 80b1 	bne.w	80087c8 <_strtod_l+0x1a0>
 8008666:	786a      	ldrb	r2, [r5, #1]
 8008668:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800866c:	2a58      	cmp	r2, #88	@ 0x58
 800866e:	d16c      	bne.n	800874a <_strtod_l+0x122>
 8008670:	9302      	str	r3, [sp, #8]
 8008672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008674:	4a8e      	ldr	r2, [pc, #568]	@ (80088b0 <_strtod_l+0x288>)
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	ab1a      	add	r3, sp, #104	@ 0x68
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	9805      	ldr	r0, [sp, #20]
 800867e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008680:	a919      	add	r1, sp, #100	@ 0x64
 8008682:	f001 fad9 	bl	8009c38 <__gethex>
 8008686:	f010 060f 	ands.w	r6, r0, #15
 800868a:	4604      	mov	r4, r0
 800868c:	d005      	beq.n	800869a <_strtod_l+0x72>
 800868e:	2e06      	cmp	r6, #6
 8008690:	d126      	bne.n	80086e0 <_strtod_l+0xb8>
 8008692:	2300      	movs	r3, #0
 8008694:	3501      	adds	r5, #1
 8008696:	9519      	str	r5, [sp, #100]	@ 0x64
 8008698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800869a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8584 	bne.w	80091aa <_strtod_l+0xb82>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a4:	b1bb      	cbz	r3, 80086d6 <_strtod_l+0xae>
 80086a6:	4650      	mov	r0, sl
 80086a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80086ac:	b01f      	add	sp, #124	@ 0x7c
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	2920      	cmp	r1, #32
 80086b4:	d1d0      	bne.n	8008658 <_strtod_l+0x30>
 80086b6:	3201      	adds	r2, #1
 80086b8:	e7c3      	b.n	8008642 <_strtod_l+0x1a>
 80086ba:	292d      	cmp	r1, #45	@ 0x2d
 80086bc:	d1cc      	bne.n	8008658 <_strtod_l+0x30>
 80086be:	2101      	movs	r1, #1
 80086c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086c2:	1c51      	adds	r1, r2, #1
 80086c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80086c6:	7852      	ldrb	r2, [r2, #1]
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	d1c7      	bne.n	800865c <_strtod_l+0x34>
 80086cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 8568 	bne.w	80091a6 <_strtod_l+0xb7e>
 80086d6:	4650      	mov	r0, sl
 80086d8:	4659      	mov	r1, fp
 80086da:	e7e7      	b.n	80086ac <_strtod_l+0x84>
 80086dc:	2100      	movs	r1, #0
 80086de:	e7ef      	b.n	80086c0 <_strtod_l+0x98>
 80086e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80086e2:	b13a      	cbz	r2, 80086f4 <_strtod_l+0xcc>
 80086e4:	2135      	movs	r1, #53	@ 0x35
 80086e6:	a81c      	add	r0, sp, #112	@ 0x70
 80086e8:	f7ff ff36 	bl	8008558 <__copybits>
 80086ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086ee:	9805      	ldr	r0, [sp, #20]
 80086f0:	f7ff fb10 	bl	8007d14 <_Bfree>
 80086f4:	3e01      	subs	r6, #1
 80086f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80086f8:	2e04      	cmp	r6, #4
 80086fa:	d806      	bhi.n	800870a <_strtod_l+0xe2>
 80086fc:	e8df f006 	tbb	[pc, r6]
 8008700:	201d0314 	.word	0x201d0314
 8008704:	14          	.byte	0x14
 8008705:	00          	.byte	0x00
 8008706:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800870a:	05e1      	lsls	r1, r4, #23
 800870c:	bf48      	it	mi
 800870e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008712:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008716:	0d1b      	lsrs	r3, r3, #20
 8008718:	051b      	lsls	r3, r3, #20
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1bd      	bne.n	800869a <_strtod_l+0x72>
 800871e:	f7fe fb2b 	bl	8006d78 <__errno>
 8008722:	2322      	movs	r3, #34	@ 0x22
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	e7b8      	b.n	800869a <_strtod_l+0x72>
 8008728:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800872c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008730:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008734:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008738:	e7e7      	b.n	800870a <_strtod_l+0xe2>
 800873a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80088b4 <_strtod_l+0x28c>
 800873e:	e7e4      	b.n	800870a <_strtod_l+0xe2>
 8008740:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008744:	f04f 3aff 	mov.w	sl, #4294967295
 8008748:	e7df      	b.n	800870a <_strtod_l+0xe2>
 800874a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b30      	cmp	r3, #48	@ 0x30
 8008754:	d0f9      	beq.n	800874a <_strtod_l+0x122>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d09f      	beq.n	800869a <_strtod_l+0x72>
 800875a:	2301      	movs	r3, #1
 800875c:	9309      	str	r3, [sp, #36]	@ 0x24
 800875e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008760:	220a      	movs	r2, #10
 8008762:	930c      	str	r3, [sp, #48]	@ 0x30
 8008764:	2300      	movs	r3, #0
 8008766:	461f      	mov	r7, r3
 8008768:	9308      	str	r3, [sp, #32]
 800876a:	930a      	str	r3, [sp, #40]	@ 0x28
 800876c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800876e:	7805      	ldrb	r5, [r0, #0]
 8008770:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008774:	b2d9      	uxtb	r1, r3
 8008776:	2909      	cmp	r1, #9
 8008778:	d928      	bls.n	80087cc <_strtod_l+0x1a4>
 800877a:	2201      	movs	r2, #1
 800877c:	494e      	ldr	r1, [pc, #312]	@ (80088b8 <_strtod_l+0x290>)
 800877e:	f001 f968 	bl	8009a52 <strncmp>
 8008782:	2800      	cmp	r0, #0
 8008784:	d032      	beq.n	80087ec <_strtod_l+0x1c4>
 8008786:	2000      	movs	r0, #0
 8008788:	462a      	mov	r2, r5
 800878a:	4681      	mov	r9, r0
 800878c:	463d      	mov	r5, r7
 800878e:	4603      	mov	r3, r0
 8008790:	2a65      	cmp	r2, #101	@ 0x65
 8008792:	d001      	beq.n	8008798 <_strtod_l+0x170>
 8008794:	2a45      	cmp	r2, #69	@ 0x45
 8008796:	d114      	bne.n	80087c2 <_strtod_l+0x19a>
 8008798:	b91d      	cbnz	r5, 80087a2 <_strtod_l+0x17a>
 800879a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879c:	4302      	orrs	r2, r0
 800879e:	d095      	beq.n	80086cc <_strtod_l+0xa4>
 80087a0:	2500      	movs	r5, #0
 80087a2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80087a4:	1c62      	adds	r2, r4, #1
 80087a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80087a8:	7862      	ldrb	r2, [r4, #1]
 80087aa:	2a2b      	cmp	r2, #43	@ 0x2b
 80087ac:	d077      	beq.n	800889e <_strtod_l+0x276>
 80087ae:	2a2d      	cmp	r2, #45	@ 0x2d
 80087b0:	d07b      	beq.n	80088aa <_strtod_l+0x282>
 80087b2:	f04f 0c00 	mov.w	ip, #0
 80087b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80087ba:	2909      	cmp	r1, #9
 80087bc:	f240 8082 	bls.w	80088c4 <_strtod_l+0x29c>
 80087c0:	9419      	str	r4, [sp, #100]	@ 0x64
 80087c2:	f04f 0800 	mov.w	r8, #0
 80087c6:	e0a2      	b.n	800890e <_strtod_l+0x2e6>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e7c7      	b.n	800875c <_strtod_l+0x134>
 80087cc:	2f08      	cmp	r7, #8
 80087ce:	bfd5      	itete	le
 80087d0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80087d2:	9908      	ldrgt	r1, [sp, #32]
 80087d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80087dc:	f100 0001 	add.w	r0, r0, #1
 80087e0:	bfd4      	ite	le
 80087e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80087e4:	9308      	strgt	r3, [sp, #32]
 80087e6:	3701      	adds	r7, #1
 80087e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80087ea:	e7bf      	b.n	800876c <_strtod_l+0x144>
 80087ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80087f2:	785a      	ldrb	r2, [r3, #1]
 80087f4:	b37f      	cbz	r7, 8008856 <_strtod_l+0x22e>
 80087f6:	4681      	mov	r9, r0
 80087f8:	463d      	mov	r5, r7
 80087fa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d912      	bls.n	8008828 <_strtod_l+0x200>
 8008802:	2301      	movs	r3, #1
 8008804:	e7c4      	b.n	8008790 <_strtod_l+0x168>
 8008806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008808:	3001      	adds	r0, #1
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	9219      	str	r2, [sp, #100]	@ 0x64
 800880e:	785a      	ldrb	r2, [r3, #1]
 8008810:	2a30      	cmp	r2, #48	@ 0x30
 8008812:	d0f8      	beq.n	8008806 <_strtod_l+0x1de>
 8008814:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008818:	2b08      	cmp	r3, #8
 800881a:	f200 84cb 	bhi.w	80091b4 <_strtod_l+0xb8c>
 800881e:	4681      	mov	r9, r0
 8008820:	2000      	movs	r0, #0
 8008822:	4605      	mov	r5, r0
 8008824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008826:	930c      	str	r3, [sp, #48]	@ 0x30
 8008828:	3a30      	subs	r2, #48	@ 0x30
 800882a:	f100 0301 	add.w	r3, r0, #1
 800882e:	d02a      	beq.n	8008886 <_strtod_l+0x25e>
 8008830:	4499      	add	r9, r3
 8008832:	210a      	movs	r1, #10
 8008834:	462b      	mov	r3, r5
 8008836:	eb00 0c05 	add.w	ip, r0, r5
 800883a:	4563      	cmp	r3, ip
 800883c:	d10d      	bne.n	800885a <_strtod_l+0x232>
 800883e:	1c69      	adds	r1, r5, #1
 8008840:	4401      	add	r1, r0
 8008842:	4428      	add	r0, r5
 8008844:	2808      	cmp	r0, #8
 8008846:	dc16      	bgt.n	8008876 <_strtod_l+0x24e>
 8008848:	230a      	movs	r3, #10
 800884a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800884c:	fb03 2300 	mla	r3, r3, r0, r2
 8008850:	930a      	str	r3, [sp, #40]	@ 0x28
 8008852:	2300      	movs	r3, #0
 8008854:	e018      	b.n	8008888 <_strtod_l+0x260>
 8008856:	4638      	mov	r0, r7
 8008858:	e7da      	b.n	8008810 <_strtod_l+0x1e8>
 800885a:	2b08      	cmp	r3, #8
 800885c:	f103 0301 	add.w	r3, r3, #1
 8008860:	dc03      	bgt.n	800886a <_strtod_l+0x242>
 8008862:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008864:	434e      	muls	r6, r1
 8008866:	960a      	str	r6, [sp, #40]	@ 0x28
 8008868:	e7e7      	b.n	800883a <_strtod_l+0x212>
 800886a:	2b10      	cmp	r3, #16
 800886c:	bfde      	ittt	le
 800886e:	9e08      	ldrle	r6, [sp, #32]
 8008870:	434e      	mulle	r6, r1
 8008872:	9608      	strle	r6, [sp, #32]
 8008874:	e7e1      	b.n	800883a <_strtod_l+0x212>
 8008876:	280f      	cmp	r0, #15
 8008878:	dceb      	bgt.n	8008852 <_strtod_l+0x22a>
 800887a:	230a      	movs	r3, #10
 800887c:	9808      	ldr	r0, [sp, #32]
 800887e:	fb03 2300 	mla	r3, r3, r0, r2
 8008882:	9308      	str	r3, [sp, #32]
 8008884:	e7e5      	b.n	8008852 <_strtod_l+0x22a>
 8008886:	4629      	mov	r1, r5
 8008888:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800888a:	460d      	mov	r5, r1
 800888c:	1c50      	adds	r0, r2, #1
 800888e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008890:	7852      	ldrb	r2, [r2, #1]
 8008892:	4618      	mov	r0, r3
 8008894:	e7b1      	b.n	80087fa <_strtod_l+0x1d2>
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	2301      	movs	r3, #1
 800889c:	e77d      	b.n	800879a <_strtod_l+0x172>
 800889e:	f04f 0c00 	mov.w	ip, #0
 80088a2:	1ca2      	adds	r2, r4, #2
 80088a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80088a6:	78a2      	ldrb	r2, [r4, #2]
 80088a8:	e785      	b.n	80087b6 <_strtod_l+0x18e>
 80088aa:	f04f 0c01 	mov.w	ip, #1
 80088ae:	e7f8      	b.n	80088a2 <_strtod_l+0x27a>
 80088b0:	0800a610 	.word	0x0800a610
 80088b4:	7ff00000 	.word	0x7ff00000
 80088b8:	0800a5f8 	.word	0x0800a5f8
 80088bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088be:	1c51      	adds	r1, r2, #1
 80088c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80088c2:	7852      	ldrb	r2, [r2, #1]
 80088c4:	2a30      	cmp	r2, #48	@ 0x30
 80088c6:	d0f9      	beq.n	80088bc <_strtod_l+0x294>
 80088c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80088cc:	2908      	cmp	r1, #8
 80088ce:	f63f af78 	bhi.w	80087c2 <_strtod_l+0x19a>
 80088d2:	f04f 080a 	mov.w	r8, #10
 80088d6:	3a30      	subs	r2, #48	@ 0x30
 80088d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80088de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088e0:	1c56      	adds	r6, r2, #1
 80088e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80088e4:	7852      	ldrb	r2, [r2, #1]
 80088e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80088ea:	f1be 0f09 	cmp.w	lr, #9
 80088ee:	d939      	bls.n	8008964 <_strtod_l+0x33c>
 80088f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80088f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80088f6:	1a76      	subs	r6, r6, r1
 80088f8:	2e08      	cmp	r6, #8
 80088fa:	dc03      	bgt.n	8008904 <_strtod_l+0x2dc>
 80088fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80088fe:	4588      	cmp	r8, r1
 8008900:	bfa8      	it	ge
 8008902:	4688      	movge	r8, r1
 8008904:	f1bc 0f00 	cmp.w	ip, #0
 8008908:	d001      	beq.n	800890e <_strtod_l+0x2e6>
 800890a:	f1c8 0800 	rsb	r8, r8, #0
 800890e:	2d00      	cmp	r5, #0
 8008910:	d14e      	bne.n	80089b0 <_strtod_l+0x388>
 8008912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008914:	4308      	orrs	r0, r1
 8008916:	f47f aec0 	bne.w	800869a <_strtod_l+0x72>
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f aed6 	bne.w	80086cc <_strtod_l+0xa4>
 8008920:	2a69      	cmp	r2, #105	@ 0x69
 8008922:	d028      	beq.n	8008976 <_strtod_l+0x34e>
 8008924:	dc25      	bgt.n	8008972 <_strtod_l+0x34a>
 8008926:	2a49      	cmp	r2, #73	@ 0x49
 8008928:	d025      	beq.n	8008976 <_strtod_l+0x34e>
 800892a:	2a4e      	cmp	r2, #78	@ 0x4e
 800892c:	f47f aece 	bne.w	80086cc <_strtod_l+0xa4>
 8008930:	499a      	ldr	r1, [pc, #616]	@ (8008b9c <_strtod_l+0x574>)
 8008932:	a819      	add	r0, sp, #100	@ 0x64
 8008934:	f001 fba2 	bl	800a07c <__match>
 8008938:	2800      	cmp	r0, #0
 800893a:	f43f aec7 	beq.w	80086cc <_strtod_l+0xa4>
 800893e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b28      	cmp	r3, #40	@ 0x28
 8008944:	d12e      	bne.n	80089a4 <_strtod_l+0x37c>
 8008946:	4996      	ldr	r1, [pc, #600]	@ (8008ba0 <_strtod_l+0x578>)
 8008948:	aa1c      	add	r2, sp, #112	@ 0x70
 800894a:	a819      	add	r0, sp, #100	@ 0x64
 800894c:	f001 fbaa 	bl	800a0a4 <__hexnan>
 8008950:	2805      	cmp	r0, #5
 8008952:	d127      	bne.n	80089a4 <_strtod_l+0x37c>
 8008954:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008956:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800895a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800895e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008962:	e69a      	b.n	800869a <_strtod_l+0x72>
 8008964:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008966:	fb08 2101 	mla	r1, r8, r1, r2
 800896a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800896e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008970:	e7b5      	b.n	80088de <_strtod_l+0x2b6>
 8008972:	2a6e      	cmp	r2, #110	@ 0x6e
 8008974:	e7da      	b.n	800892c <_strtod_l+0x304>
 8008976:	498b      	ldr	r1, [pc, #556]	@ (8008ba4 <_strtod_l+0x57c>)
 8008978:	a819      	add	r0, sp, #100	@ 0x64
 800897a:	f001 fb7f 	bl	800a07c <__match>
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f aea4 	beq.w	80086cc <_strtod_l+0xa4>
 8008984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008986:	4988      	ldr	r1, [pc, #544]	@ (8008ba8 <_strtod_l+0x580>)
 8008988:	3b01      	subs	r3, #1
 800898a:	a819      	add	r0, sp, #100	@ 0x64
 800898c:	9319      	str	r3, [sp, #100]	@ 0x64
 800898e:	f001 fb75 	bl	800a07c <__match>
 8008992:	b910      	cbnz	r0, 800899a <_strtod_l+0x372>
 8008994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008996:	3301      	adds	r3, #1
 8008998:	9319      	str	r3, [sp, #100]	@ 0x64
 800899a:	f04f 0a00 	mov.w	sl, #0
 800899e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008bac <_strtod_l+0x584>
 80089a2:	e67a      	b.n	800869a <_strtod_l+0x72>
 80089a4:	4882      	ldr	r0, [pc, #520]	@ (8008bb0 <_strtod_l+0x588>)
 80089a6:	f001 f8a7 	bl	8009af8 <nan>
 80089aa:	4682      	mov	sl, r0
 80089ac:	468b      	mov	fp, r1
 80089ae:	e674      	b.n	800869a <_strtod_l+0x72>
 80089b0:	eba8 0309 	sub.w	r3, r8, r9
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	bf08      	it	eq
 80089b8:	462f      	moveq	r7, r5
 80089ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089bc:	2d10      	cmp	r5, #16
 80089be:	462c      	mov	r4, r5
 80089c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c2:	bfa8      	it	ge
 80089c4:	2410      	movge	r4, #16
 80089c6:	f7f7 fd0d 	bl	80003e4 <__aeabi_ui2d>
 80089ca:	2d09      	cmp	r5, #9
 80089cc:	4682      	mov	sl, r0
 80089ce:	468b      	mov	fp, r1
 80089d0:	dc11      	bgt.n	80089f6 <_strtod_l+0x3ce>
 80089d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f43f ae60 	beq.w	800869a <_strtod_l+0x72>
 80089da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089dc:	dd76      	ble.n	8008acc <_strtod_l+0x4a4>
 80089de:	2b16      	cmp	r3, #22
 80089e0:	dc5d      	bgt.n	8008a9e <_strtod_l+0x476>
 80089e2:	4974      	ldr	r1, [pc, #464]	@ (8008bb4 <_strtod_l+0x58c>)
 80089e4:	4652      	mov	r2, sl
 80089e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ea:	465b      	mov	r3, fp
 80089ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f0:	f7f7 fd72 	bl	80004d8 <__aeabi_dmul>
 80089f4:	e7d9      	b.n	80089aa <_strtod_l+0x382>
 80089f6:	4b6f      	ldr	r3, [pc, #444]	@ (8008bb4 <_strtod_l+0x58c>)
 80089f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008a00:	f7f7 fd6a 	bl	80004d8 <__aeabi_dmul>
 8008a04:	4682      	mov	sl, r0
 8008a06:	9808      	ldr	r0, [sp, #32]
 8008a08:	468b      	mov	fp, r1
 8008a0a:	f7f7 fceb 	bl	80003e4 <__aeabi_ui2d>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4650      	mov	r0, sl
 8008a14:	4659      	mov	r1, fp
 8008a16:	f7f7 fba9 	bl	800016c <__adddf3>
 8008a1a:	2d0f      	cmp	r5, #15
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	468b      	mov	fp, r1
 8008a20:	ddd7      	ble.n	80089d2 <_strtod_l+0x3aa>
 8008a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a24:	1b2c      	subs	r4, r5, r4
 8008a26:	441c      	add	r4, r3
 8008a28:	2c00      	cmp	r4, #0
 8008a2a:	f340 8096 	ble.w	8008b5a <_strtod_l+0x532>
 8008a2e:	f014 030f 	ands.w	r3, r4, #15
 8008a32:	d00a      	beq.n	8008a4a <_strtod_l+0x422>
 8008a34:	495f      	ldr	r1, [pc, #380]	@ (8008bb4 <_strtod_l+0x58c>)
 8008a36:	4652      	mov	r2, sl
 8008a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a40:	465b      	mov	r3, fp
 8008a42:	f7f7 fd49 	bl	80004d8 <__aeabi_dmul>
 8008a46:	4682      	mov	sl, r0
 8008a48:	468b      	mov	fp, r1
 8008a4a:	f034 040f 	bics.w	r4, r4, #15
 8008a4e:	d073      	beq.n	8008b38 <_strtod_l+0x510>
 8008a50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008a54:	dd48      	ble.n	8008ae8 <_strtod_l+0x4c0>
 8008a56:	2400      	movs	r4, #0
 8008a58:	46a0      	mov	r8, r4
 8008a5a:	46a1      	mov	r9, r4
 8008a5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a5e:	2322      	movs	r3, #34	@ 0x22
 8008a60:	f04f 0a00 	mov.w	sl, #0
 8008a64:	9a05      	ldr	r2, [sp, #20]
 8008a66:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008bac <_strtod_l+0x584>
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f43f ae13 	beq.w	800869a <_strtod_l+0x72>
 8008a74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a76:	9805      	ldr	r0, [sp, #20]
 8008a78:	f7ff f94c 	bl	8007d14 <_Bfree>
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	9805      	ldr	r0, [sp, #20]
 8008a80:	f7ff f948 	bl	8007d14 <_Bfree>
 8008a84:	4641      	mov	r1, r8
 8008a86:	9805      	ldr	r0, [sp, #20]
 8008a88:	f7ff f944 	bl	8007d14 <_Bfree>
 8008a8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a8e:	9805      	ldr	r0, [sp, #20]
 8008a90:	f7ff f940 	bl	8007d14 <_Bfree>
 8008a94:	4621      	mov	r1, r4
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	f7ff f93c 	bl	8007d14 <_Bfree>
 8008a9c:	e5fd      	b.n	800869a <_strtod_l+0x72>
 8008a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	dbbc      	blt.n	8008a22 <_strtod_l+0x3fa>
 8008aa8:	4c42      	ldr	r4, [pc, #264]	@ (8008bb4 <_strtod_l+0x58c>)
 8008aaa:	f1c5 050f 	rsb	r5, r5, #15
 8008aae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ab8:	465b      	mov	r3, fp
 8008aba:	f7f7 fd0d 	bl	80004d8 <__aeabi_dmul>
 8008abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac0:	1b5d      	subs	r5, r3, r5
 8008ac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ac6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008aca:	e791      	b.n	80089f0 <_strtod_l+0x3c8>
 8008acc:	3316      	adds	r3, #22
 8008ace:	dba8      	blt.n	8008a22 <_strtod_l+0x3fa>
 8008ad0:	4b38      	ldr	r3, [pc, #224]	@ (8008bb4 <_strtod_l+0x58c>)
 8008ad2:	eba9 0808 	sub.w	r8, r9, r8
 8008ad6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ada:	4650      	mov	r0, sl
 8008adc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	f7f7 fe23 	bl	800072c <__aeabi_ddiv>
 8008ae6:	e760      	b.n	80089aa <_strtod_l+0x382>
 8008ae8:	4b33      	ldr	r3, [pc, #204]	@ (8008bb8 <_strtod_l+0x590>)
 8008aea:	4650      	mov	r0, sl
 8008aec:	9308      	str	r3, [sp, #32]
 8008aee:	2300      	movs	r3, #0
 8008af0:	4659      	mov	r1, fp
 8008af2:	461e      	mov	r6, r3
 8008af4:	1124      	asrs	r4, r4, #4
 8008af6:	2c01      	cmp	r4, #1
 8008af8:	dc21      	bgt.n	8008b3e <_strtod_l+0x516>
 8008afa:	b10b      	cbz	r3, 8008b00 <_strtod_l+0x4d8>
 8008afc:	4682      	mov	sl, r0
 8008afe:	468b      	mov	fp, r1
 8008b00:	492d      	ldr	r1, [pc, #180]	@ (8008bb8 <_strtod_l+0x590>)
 8008b02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008b06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008b0a:	4652      	mov	r2, sl
 8008b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b10:	465b      	mov	r3, fp
 8008b12:	f7f7 fce1 	bl	80004d8 <__aeabi_dmul>
 8008b16:	4b25      	ldr	r3, [pc, #148]	@ (8008bac <_strtod_l+0x584>)
 8008b18:	460a      	mov	r2, r1
 8008b1a:	400b      	ands	r3, r1
 8008b1c:	4927      	ldr	r1, [pc, #156]	@ (8008bbc <_strtod_l+0x594>)
 8008b1e:	4682      	mov	sl, r0
 8008b20:	428b      	cmp	r3, r1
 8008b22:	d898      	bhi.n	8008a56 <_strtod_l+0x42e>
 8008b24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf86      	itte	hi
 8008b2c:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b30:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008bc0 <_strtod_l+0x598>
 8008b34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9308      	str	r3, [sp, #32]
 8008b3c:	e07a      	b.n	8008c34 <_strtod_l+0x60c>
 8008b3e:	07e2      	lsls	r2, r4, #31
 8008b40:	d505      	bpl.n	8008b4e <_strtod_l+0x526>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fcc6 	bl	80004d8 <__aeabi_dmul>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	3601      	adds	r6, #1
 8008b52:	3208      	adds	r2, #8
 8008b54:	1064      	asrs	r4, r4, #1
 8008b56:	9208      	str	r2, [sp, #32]
 8008b58:	e7cd      	b.n	8008af6 <_strtod_l+0x4ce>
 8008b5a:	d0ed      	beq.n	8008b38 <_strtod_l+0x510>
 8008b5c:	4264      	negs	r4, r4
 8008b5e:	f014 020f 	ands.w	r2, r4, #15
 8008b62:	d00a      	beq.n	8008b7a <_strtod_l+0x552>
 8008b64:	4b13      	ldr	r3, [pc, #76]	@ (8008bb4 <_strtod_l+0x58c>)
 8008b66:	4650      	mov	r0, sl
 8008b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b6c:	4659      	mov	r1, fp
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fddb 	bl	800072c <__aeabi_ddiv>
 8008b76:	4682      	mov	sl, r0
 8008b78:	468b      	mov	fp, r1
 8008b7a:	1124      	asrs	r4, r4, #4
 8008b7c:	d0dc      	beq.n	8008b38 <_strtod_l+0x510>
 8008b7e:	2c1f      	cmp	r4, #31
 8008b80:	dd20      	ble.n	8008bc4 <_strtod_l+0x59c>
 8008b82:	2400      	movs	r4, #0
 8008b84:	46a0      	mov	r8, r4
 8008b86:	46a1      	mov	r9, r4
 8008b88:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b8a:	2322      	movs	r3, #34	@ 0x22
 8008b8c:	9a05      	ldr	r2, [sp, #20]
 8008b8e:	f04f 0a00 	mov.w	sl, #0
 8008b92:	f04f 0b00 	mov.w	fp, #0
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e768      	b.n	8008a6c <_strtod_l+0x444>
 8008b9a:	bf00      	nop
 8008b9c:	0800a3e7 	.word	0x0800a3e7
 8008ba0:	0800a5fc 	.word	0x0800a5fc
 8008ba4:	0800a3df 	.word	0x0800a3df
 8008ba8:	0800a416 	.word	0x0800a416
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	0800a7a5 	.word	0x0800a7a5
 8008bb4:	0800a530 	.word	0x0800a530
 8008bb8:	0800a508 	.word	0x0800a508
 8008bbc:	7ca00000 	.word	0x7ca00000
 8008bc0:	7fefffff 	.word	0x7fefffff
 8008bc4:	f014 0310 	ands.w	r3, r4, #16
 8008bc8:	bf18      	it	ne
 8008bca:	236a      	movne	r3, #106	@ 0x6a
 8008bcc:	4650      	mov	r0, sl
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4ea9      	ldr	r6, [pc, #676]	@ (8008e7c <_strtod_l+0x854>)
 8008bd6:	07e2      	lsls	r2, r4, #31
 8008bd8:	d504      	bpl.n	8008be4 <_strtod_l+0x5bc>
 8008bda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bde:	f7f7 fc7b 	bl	80004d8 <__aeabi_dmul>
 8008be2:	2301      	movs	r3, #1
 8008be4:	1064      	asrs	r4, r4, #1
 8008be6:	f106 0608 	add.w	r6, r6, #8
 8008bea:	d1f4      	bne.n	8008bd6 <_strtod_l+0x5ae>
 8008bec:	b10b      	cbz	r3, 8008bf2 <_strtod_l+0x5ca>
 8008bee:	4682      	mov	sl, r0
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	b1b3      	cbz	r3, 8008c24 <_strtod_l+0x5fc>
 8008bf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008bfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	4659      	mov	r1, fp
 8008c02:	dd0f      	ble.n	8008c24 <_strtod_l+0x5fc>
 8008c04:	2b1f      	cmp	r3, #31
 8008c06:	dd57      	ble.n	8008cb8 <_strtod_l+0x690>
 8008c08:	2b34      	cmp	r3, #52	@ 0x34
 8008c0a:	bfd8      	it	le
 8008c0c:	f04f 33ff 	movle.w	r3, #4294967295
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	bfcf      	iteee	gt
 8008c16:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008c1a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008c1e:	4093      	lslle	r3, r2
 8008c20:	ea03 0b01 	andle.w	fp, r3, r1
 8008c24:	2200      	movs	r2, #0
 8008c26:	2300      	movs	r3, #0
 8008c28:	4650      	mov	r0, sl
 8008c2a:	4659      	mov	r1, fp
 8008c2c:	f7f7 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1a6      	bne.n	8008b82 <_strtod_l+0x55a>
 8008c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c36:	463a      	mov	r2, r7
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	9805      	ldr	r0, [sp, #20]
 8008c40:	f7ff f8d0 	bl	8007de4 <__s2b>
 8008c44:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f43f af05 	beq.w	8008a56 <_strtod_l+0x42e>
 8008c4c:	2400      	movs	r4, #0
 8008c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c50:	eba9 0308 	sub.w	r3, r9, r8
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	bfa8      	it	ge
 8008c58:	2300      	movge	r3, #0
 8008c5a:	46a0      	mov	r8, r4
 8008c5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c62:	9316      	str	r3, [sp, #88]	@ 0x58
 8008c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c66:	9805      	ldr	r0, [sp, #20]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	f7ff f813 	bl	8007c94 <_Balloc>
 8008c6e:	4681      	mov	r9, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f43f aef4 	beq.w	8008a5e <_strtod_l+0x436>
 8008c76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c78:	300c      	adds	r0, #12
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	f103 010c 	add.w	r1, r3, #12
 8008c80:	3202      	adds	r2, #2
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	f000 ff2a 	bl	8009adc <memcpy>
 8008c88:	ab1c      	add	r3, sp, #112	@ 0x70
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	4652      	mov	r2, sl
 8008c92:	465b      	mov	r3, fp
 8008c94:	9805      	ldr	r0, [sp, #20]
 8008c96:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008c9a:	f7ff fbd5 	bl	8008448 <__d2b>
 8008c9e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f43f aedc 	beq.w	8008a5e <_strtod_l+0x436>
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	9805      	ldr	r0, [sp, #20]
 8008caa:	f7ff f931 	bl	8007f10 <__i2b>
 8008cae:	4680      	mov	r8, r0
 8008cb0:	b948      	cbnz	r0, 8008cc6 <_strtod_l+0x69e>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	e6d2      	b.n	8008a5e <_strtod_l+0x436>
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	ea03 0a0a 	and.w	sl, r3, sl
 8008cc4:	e7ae      	b.n	8008c24 <_strtod_l+0x5fc>
 8008cc6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008cc8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	bfab      	itete	ge
 8008cce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008cd0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008cd2:	18ef      	addge	r7, r5, r3
 8008cd4:	1b5e      	sublt	r6, r3, r5
 8008cd6:	9b08      	ldr	r3, [sp, #32]
 8008cd8:	bfa8      	it	ge
 8008cda:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008cdc:	eba5 0503 	sub.w	r5, r5, r3
 8008ce0:	4415      	add	r5, r2
 8008ce2:	4b67      	ldr	r3, [pc, #412]	@ (8008e80 <_strtod_l+0x858>)
 8008ce4:	f105 35ff 	add.w	r5, r5, #4294967295
 8008ce8:	bfb8      	it	lt
 8008cea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008cec:	429d      	cmp	r5, r3
 8008cee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008cf2:	da50      	bge.n	8008d96 <_strtod_l+0x76e>
 8008cf4:	1b5b      	subs	r3, r3, r5
 8008cf6:	2b1f      	cmp	r3, #31
 8008cf8:	f04f 0101 	mov.w	r1, #1
 8008cfc:	eba2 0203 	sub.w	r2, r2, r3
 8008d00:	dc3d      	bgt.n	8008d7e <_strtod_l+0x756>
 8008d02:	fa01 f303 	lsl.w	r3, r1, r3
 8008d06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d0c:	18bd      	adds	r5, r7, r2
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	42af      	cmp	r7, r5
 8008d12:	4416      	add	r6, r2
 8008d14:	441e      	add	r6, r3
 8008d16:	463b      	mov	r3, r7
 8008d18:	bfa8      	it	ge
 8008d1a:	462b      	movge	r3, r5
 8008d1c:	42b3      	cmp	r3, r6
 8008d1e:	bfa8      	it	ge
 8008d20:	4633      	movge	r3, r6
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bfc2      	ittt	gt
 8008d26:	1aed      	subgt	r5, r5, r3
 8008d28:	1af6      	subgt	r6, r6, r3
 8008d2a:	1aff      	subgt	r7, r7, r3
 8008d2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dd16      	ble.n	8008d60 <_strtod_l+0x738>
 8008d32:	4641      	mov	r1, r8
 8008d34:	461a      	mov	r2, r3
 8008d36:	9805      	ldr	r0, [sp, #20]
 8008d38:	f7ff f9a8 	bl	800808c <__pow5mult>
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d0b7      	beq.n	8008cb2 <_strtod_l+0x68a>
 8008d42:	4601      	mov	r1, r0
 8008d44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d46:	9805      	ldr	r0, [sp, #20]
 8008d48:	f7ff f8f8 	bl	8007f3c <__multiply>
 8008d4c:	900e      	str	r0, [sp, #56]	@ 0x38
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f ae85 	beq.w	8008a5e <_strtod_l+0x436>
 8008d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	f7fe ffdc 	bl	8007d14 <_Bfree>
 8008d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	dc1d      	bgt.n	8008da0 <_strtod_l+0x778>
 8008d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd23      	ble.n	8008db2 <_strtod_l+0x78a>
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008d6e:	9805      	ldr	r0, [sp, #20]
 8008d70:	f7ff f98c 	bl	800808c <__pow5mult>
 8008d74:	4681      	mov	r9, r0
 8008d76:	b9e0      	cbnz	r0, 8008db2 <_strtod_l+0x78a>
 8008d78:	f04f 0900 	mov.w	r9, #0
 8008d7c:	e66f      	b.n	8008a5e <_strtod_l+0x436>
 8008d7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008d82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008d86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008d8a:	35e2      	adds	r5, #226	@ 0xe2
 8008d8c:	fa01 f305 	lsl.w	r3, r1, r5
 8008d90:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008d94:	e7ba      	b.n	8008d0c <_strtod_l+0x6e4>
 8008d96:	2300      	movs	r3, #0
 8008d98:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d9e:	e7b5      	b.n	8008d0c <_strtod_l+0x6e4>
 8008da0:	462a      	mov	r2, r5
 8008da2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	f7ff f9cb 	bl	8008140 <__lshift>
 8008daa:	901a      	str	r0, [sp, #104]	@ 0x68
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1d9      	bne.n	8008d64 <_strtod_l+0x73c>
 8008db0:	e655      	b.n	8008a5e <_strtod_l+0x436>
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	dd07      	ble.n	8008dc6 <_strtod_l+0x79e>
 8008db6:	4649      	mov	r1, r9
 8008db8:	4632      	mov	r2, r6
 8008dba:	9805      	ldr	r0, [sp, #20]
 8008dbc:	f7ff f9c0 	bl	8008140 <__lshift>
 8008dc0:	4681      	mov	r9, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0d8      	beq.n	8008d78 <_strtod_l+0x750>
 8008dc6:	2f00      	cmp	r7, #0
 8008dc8:	dd08      	ble.n	8008ddc <_strtod_l+0x7b4>
 8008dca:	4641      	mov	r1, r8
 8008dcc:	463a      	mov	r2, r7
 8008dce:	9805      	ldr	r0, [sp, #20]
 8008dd0:	f7ff f9b6 	bl	8008140 <__lshift>
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f ae41 	beq.w	8008a5e <_strtod_l+0x436>
 8008ddc:	464a      	mov	r2, r9
 8008dde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008de0:	9805      	ldr	r0, [sp, #20]
 8008de2:	f7ff fa35 	bl	8008250 <__mdiff>
 8008de6:	4604      	mov	r4, r0
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f43f ae38 	beq.w	8008a5e <_strtod_l+0x436>
 8008dee:	68c3      	ldr	r3, [r0, #12]
 8008df0:	4641      	mov	r1, r8
 8008df2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008df4:	2300      	movs	r3, #0
 8008df6:	60c3      	str	r3, [r0, #12]
 8008df8:	f7ff fa0e 	bl	8008218 <__mcmp>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	da45      	bge.n	8008e8c <_strtod_l+0x864>
 8008e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e02:	ea53 030a 	orrs.w	r3, r3, sl
 8008e06:	d16b      	bne.n	8008ee0 <_strtod_l+0x8b8>
 8008e08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d167      	bne.n	8008ee0 <_strtod_l+0x8b8>
 8008e10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e14:	0d1b      	lsrs	r3, r3, #20
 8008e16:	051b      	lsls	r3, r3, #20
 8008e18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e1c:	d960      	bls.n	8008ee0 <_strtod_l+0x8b8>
 8008e1e:	6963      	ldr	r3, [r4, #20]
 8008e20:	b913      	cbnz	r3, 8008e28 <_strtod_l+0x800>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	dd5b      	ble.n	8008ee0 <_strtod_l+0x8b8>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	9805      	ldr	r0, [sp, #20]
 8008e2e:	f7ff f987 	bl	8008140 <__lshift>
 8008e32:	4641      	mov	r1, r8
 8008e34:	4604      	mov	r4, r0
 8008e36:	f7ff f9ef 	bl	8008218 <__mcmp>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	dd50      	ble.n	8008ee0 <_strtod_l+0x8b8>
 8008e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e42:	9a08      	ldr	r2, [sp, #32]
 8008e44:	0d1b      	lsrs	r3, r3, #20
 8008e46:	051b      	lsls	r3, r3, #20
 8008e48:	2a00      	cmp	r2, #0
 8008e4a:	d06a      	beq.n	8008f22 <_strtod_l+0x8fa>
 8008e4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e50:	d867      	bhi.n	8008f22 <_strtod_l+0x8fa>
 8008e52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008e56:	f67f ae98 	bls.w	8008b8a <_strtod_l+0x562>
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <_strtod_l+0x85c>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	f7f7 fb39 	bl	80004d8 <__aeabi_dmul>
 8008e66:	4b08      	ldr	r3, [pc, #32]	@ (8008e88 <_strtod_l+0x860>)
 8008e68:	4682      	mov	sl, r0
 8008e6a:	400b      	ands	r3, r1
 8008e6c:	468b      	mov	fp, r1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f47f ae00 	bne.w	8008a74 <_strtod_l+0x44c>
 8008e74:	2322      	movs	r3, #34	@ 0x22
 8008e76:	9a05      	ldr	r2, [sp, #20]
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e5fb      	b.n	8008a74 <_strtod_l+0x44c>
 8008e7c:	0800a628 	.word	0x0800a628
 8008e80:	fffffc02 	.word	0xfffffc02
 8008e84:	39500000 	.word	0x39500000
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e90:	d165      	bne.n	8008f5e <_strtod_l+0x936>
 8008e92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e98:	b35a      	cbz	r2, 8008ef2 <_strtod_l+0x8ca>
 8008e9a:	4a99      	ldr	r2, [pc, #612]	@ (8009100 <_strtod_l+0xad8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d12b      	bne.n	8008ef8 <_strtod_l+0x8d0>
 8008ea0:	9b08      	ldr	r3, [sp, #32]
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	b303      	cbz	r3, 8008ee8 <_strtod_l+0x8c0>
 8008ea6:	465a      	mov	r2, fp
 8008ea8:	4b96      	ldr	r3, [pc, #600]	@ (8009104 <_strtod_l+0xadc>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb4:	d81b      	bhi.n	8008eee <_strtod_l+0x8c6>
 8008eb6:	0d1b      	lsrs	r3, r3, #20
 8008eb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	d119      	bne.n	8008ef8 <_strtod_l+0x8d0>
 8008ec4:	4b90      	ldr	r3, [pc, #576]	@ (8009108 <_strtod_l+0xae0>)
 8008ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d102      	bne.n	8008ed2 <_strtod_l+0x8aa>
 8008ecc:	3101      	adds	r1, #1
 8008ece:	f43f adc6 	beq.w	8008a5e <_strtod_l+0x436>
 8008ed2:	f04f 0a00 	mov.w	sl, #0
 8008ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8009104 <_strtod_l+0xadc>)
 8008ed8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eda:	401a      	ands	r2, r3
 8008edc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008ee0:	9b08      	ldr	r3, [sp, #32]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1b9      	bne.n	8008e5a <_strtod_l+0x832>
 8008ee6:	e5c5      	b.n	8008a74 <_strtod_l+0x44c>
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	e7e8      	b.n	8008ec0 <_strtod_l+0x898>
 8008eee:	4613      	mov	r3, r2
 8008ef0:	e7e6      	b.n	8008ec0 <_strtod_l+0x898>
 8008ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ef6:	d0a2      	beq.n	8008e3e <_strtod_l+0x816>
 8008ef8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008efa:	b1db      	cbz	r3, 8008f34 <_strtod_l+0x90c>
 8008efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008efe:	4213      	tst	r3, r2
 8008f00:	d0ee      	beq.n	8008ee0 <_strtod_l+0x8b8>
 8008f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f04:	4650      	mov	r0, sl
 8008f06:	4659      	mov	r1, fp
 8008f08:	9a08      	ldr	r2, [sp, #32]
 8008f0a:	b1bb      	cbz	r3, 8008f3c <_strtod_l+0x914>
 8008f0c:	f7ff fb68 	bl	80085e0 <sulp>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f18:	f7f7 f928 	bl	800016c <__adddf3>
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	e7de      	b.n	8008ee0 <_strtod_l+0x8b8>
 8008f22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008f26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f2a:	f04f 3aff 	mov.w	sl, #4294967295
 8008f2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f32:	e7d5      	b.n	8008ee0 <_strtod_l+0x8b8>
 8008f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f36:	ea13 0f0a 	tst.w	r3, sl
 8008f3a:	e7e1      	b.n	8008f00 <_strtod_l+0x8d8>
 8008f3c:	f7ff fb50 	bl	80085e0 <sulp>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f48:	f7f7 f90e 	bl	8000168 <__aeabi_dsub>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	f7f7 fd28 	bl	80009a8 <__aeabi_dcmpeq>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0c1      	beq.n	8008ee0 <_strtod_l+0x8b8>
 8008f5c:	e615      	b.n	8008b8a <_strtod_l+0x562>
 8008f5e:	4641      	mov	r1, r8
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7ff fac9 	bl	80084f8 <__ratio>
 8008f66:	2200      	movs	r2, #0
 8008f68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	f7f7 fd2e 	bl	80009d0 <__aeabi_dcmple>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d06d      	beq.n	8009054 <_strtod_l+0xa2c>
 8008f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d178      	bne.n	8009070 <_strtod_l+0xa48>
 8008f7e:	f1ba 0f00 	cmp.w	sl, #0
 8008f82:	d156      	bne.n	8009032 <_strtod_l+0xa0a>
 8008f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d158      	bne.n	8009040 <_strtod_l+0xa18>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4630      	mov	r0, r6
 8008f92:	4639      	mov	r1, r7
 8008f94:	4b5d      	ldr	r3, [pc, #372]	@ (800910c <_strtod_l+0xae4>)
 8008f96:	f7f7 fd11 	bl	80009bc <__aeabi_dcmplt>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d157      	bne.n	800904e <_strtod_l+0xa26>
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8009110 <_strtod_l+0xae8>)
 8008fa6:	f7f7 fa97 	bl	80004d8 <__aeabi_dmul>
 8008faa:	4606      	mov	r6, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008fb2:	9606      	str	r6, [sp, #24]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fba:	4d52      	ldr	r5, [pc, #328]	@ (8009104 <_strtod_l+0xadc>)
 8008fbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fc2:	401d      	ands	r5, r3
 8008fc4:	4b53      	ldr	r3, [pc, #332]	@ (8009114 <_strtod_l+0xaec>)
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	f040 80aa 	bne.w	8009120 <_strtod_l+0xaf8>
 8008fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	f7ff f9cf 	bl	8008378 <__ulp>
 8008fda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fde:	f7f7 fa7b 	bl	80004d8 <__aeabi_dmul>
 8008fe2:	4652      	mov	r2, sl
 8008fe4:	465b      	mov	r3, fp
 8008fe6:	f7f7 f8c1 	bl	800016c <__adddf3>
 8008fea:	460b      	mov	r3, r1
 8008fec:	4945      	ldr	r1, [pc, #276]	@ (8009104 <_strtod_l+0xadc>)
 8008fee:	4a4a      	ldr	r2, [pc, #296]	@ (8009118 <_strtod_l+0xaf0>)
 8008ff0:	4019      	ands	r1, r3
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	4682      	mov	sl, r0
 8008ff6:	d942      	bls.n	800907e <_strtod_l+0xa56>
 8008ff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ffa:	4b43      	ldr	r3, [pc, #268]	@ (8009108 <_strtod_l+0xae0>)
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d103      	bne.n	8009008 <_strtod_l+0x9e0>
 8009000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009002:	3301      	adds	r3, #1
 8009004:	f43f ad2b 	beq.w	8008a5e <_strtod_l+0x436>
 8009008:	f04f 3aff 	mov.w	sl, #4294967295
 800900c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009108 <_strtod_l+0xae0>
 8009010:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009012:	9805      	ldr	r0, [sp, #20]
 8009014:	f7fe fe7e 	bl	8007d14 <_Bfree>
 8009018:	4649      	mov	r1, r9
 800901a:	9805      	ldr	r0, [sp, #20]
 800901c:	f7fe fe7a 	bl	8007d14 <_Bfree>
 8009020:	4641      	mov	r1, r8
 8009022:	9805      	ldr	r0, [sp, #20]
 8009024:	f7fe fe76 	bl	8007d14 <_Bfree>
 8009028:	4621      	mov	r1, r4
 800902a:	9805      	ldr	r0, [sp, #20]
 800902c:	f7fe fe72 	bl	8007d14 <_Bfree>
 8009030:	e618      	b.n	8008c64 <_strtod_l+0x63c>
 8009032:	f1ba 0f01 	cmp.w	sl, #1
 8009036:	d103      	bne.n	8009040 <_strtod_l+0xa18>
 8009038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800903a:	2b00      	cmp	r3, #0
 800903c:	f43f ada5 	beq.w	8008b8a <_strtod_l+0x562>
 8009040:	2200      	movs	r2, #0
 8009042:	4b36      	ldr	r3, [pc, #216]	@ (800911c <_strtod_l+0xaf4>)
 8009044:	2600      	movs	r6, #0
 8009046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800904a:	4f30      	ldr	r7, [pc, #192]	@ (800910c <_strtod_l+0xae4>)
 800904c:	e7b3      	b.n	8008fb6 <_strtod_l+0x98e>
 800904e:	2600      	movs	r6, #0
 8009050:	4f2f      	ldr	r7, [pc, #188]	@ (8009110 <_strtod_l+0xae8>)
 8009052:	e7ac      	b.n	8008fae <_strtod_l+0x986>
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	4b2d      	ldr	r3, [pc, #180]	@ (8009110 <_strtod_l+0xae8>)
 800905a:	2200      	movs	r2, #0
 800905c:	f7f7 fa3c 	bl	80004d8 <__aeabi_dmul>
 8009060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009062:	4606      	mov	r6, r0
 8009064:	460f      	mov	r7, r1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0a1      	beq.n	8008fae <_strtod_l+0x986>
 800906a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800906e:	e7a2      	b.n	8008fb6 <_strtod_l+0x98e>
 8009070:	2200      	movs	r2, #0
 8009072:	4b26      	ldr	r3, [pc, #152]	@ (800910c <_strtod_l+0xae4>)
 8009074:	4616      	mov	r6, r2
 8009076:	461f      	mov	r7, r3
 8009078:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800907c:	e79b      	b.n	8008fb6 <_strtod_l+0x98e>
 800907e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1c1      	bne.n	8009010 <_strtod_l+0x9e8>
 800908c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009090:	0d1b      	lsrs	r3, r3, #20
 8009092:	051b      	lsls	r3, r3, #20
 8009094:	429d      	cmp	r5, r3
 8009096:	d1bb      	bne.n	8009010 <_strtod_l+0x9e8>
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fe72 	bl	8000d84 <__aeabi_d2lz>
 80090a0:	f7f7 f9ec 	bl	800047c <__aeabi_l2d>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4630      	mov	r0, r6
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7f7 f85c 	bl	8000168 <__aeabi_dsub>
 80090b0:	460b      	mov	r3, r1
 80090b2:	4602      	mov	r2, r0
 80090b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80090b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80090bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090be:	ea46 060a 	orr.w	r6, r6, sl
 80090c2:	431e      	orrs	r6, r3
 80090c4:	d069      	beq.n	800919a <_strtod_l+0xb72>
 80090c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80090f0 <_strtod_l+0xac8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 fc76 	bl	80009bc <__aeabi_dcmplt>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f47f accf 	bne.w	8008a74 <_strtod_l+0x44c>
 80090d6:	a308      	add	r3, pc, #32	@ (adr r3, 80090f8 <_strtod_l+0xad0>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090e0:	f7f7 fc8a 	bl	80009f8 <__aeabi_dcmpgt>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d093      	beq.n	8009010 <_strtod_l+0x9e8>
 80090e8:	e4c4      	b.n	8008a74 <_strtod_l+0x44c>
 80090ea:	bf00      	nop
 80090ec:	f3af 8000 	nop.w
 80090f0:	94a03595 	.word	0x94a03595
 80090f4:	3fdfffff 	.word	0x3fdfffff
 80090f8:	35afe535 	.word	0x35afe535
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	000fffff 	.word	0x000fffff
 8009104:	7ff00000 	.word	0x7ff00000
 8009108:	7fefffff 	.word	0x7fefffff
 800910c:	3ff00000 	.word	0x3ff00000
 8009110:	3fe00000 	.word	0x3fe00000
 8009114:	7fe00000 	.word	0x7fe00000
 8009118:	7c9fffff 	.word	0x7c9fffff
 800911c:	bff00000 	.word	0xbff00000
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	b323      	cbz	r3, 800916e <_strtod_l+0xb46>
 8009124:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009128:	d821      	bhi.n	800916e <_strtod_l+0xb46>
 800912a:	a327      	add	r3, pc, #156	@ (adr r3, 80091c8 <_strtod_l+0xba0>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fc4c 	bl	80009d0 <__aeabi_dcmple>
 8009138:	b1a0      	cbz	r0, 8009164 <_strtod_l+0xb3c>
 800913a:	4639      	mov	r1, r7
 800913c:	4630      	mov	r0, r6
 800913e:	f7f7 fca3 	bl	8000a88 <__aeabi_d2uiz>
 8009142:	2801      	cmp	r0, #1
 8009144:	bf38      	it	cc
 8009146:	2001      	movcc	r0, #1
 8009148:	f7f7 f94c 	bl	80003e4 <__aeabi_ui2d>
 800914c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	b9fb      	cbnz	r3, 8009194 <_strtod_l+0xb6c>
 8009154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009158:	9014      	str	r0, [sp, #80]	@ 0x50
 800915a:	9315      	str	r3, [sp, #84]	@ 0x54
 800915c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009164:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009166:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800916a:	1b5b      	subs	r3, r3, r5
 800916c:	9311      	str	r3, [sp, #68]	@ 0x44
 800916e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009172:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009176:	f7ff f8ff 	bl	8008378 <__ulp>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	f7f7 f9a9 	bl	80004d8 <__aeabi_dmul>
 8009186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800918a:	f7f6 ffef 	bl	800016c <__adddf3>
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	e776      	b.n	8009082 <_strtod_l+0xa5a>
 8009194:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009198:	e7e0      	b.n	800915c <_strtod_l+0xb34>
 800919a:	a30d      	add	r3, pc, #52	@ (adr r3, 80091d0 <_strtod_l+0xba8>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 fc0c 	bl	80009bc <__aeabi_dcmplt>
 80091a4:	e79e      	b.n	80090e4 <_strtod_l+0xabc>
 80091a6:	2300      	movs	r3, #0
 80091a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	f7ff ba77 	b.w	80086a2 <_strtod_l+0x7a>
 80091b4:	2a65      	cmp	r2, #101	@ 0x65
 80091b6:	f43f ab6e 	beq.w	8008896 <_strtod_l+0x26e>
 80091ba:	2a45      	cmp	r2, #69	@ 0x45
 80091bc:	f43f ab6b 	beq.w	8008896 <_strtod_l+0x26e>
 80091c0:	2301      	movs	r3, #1
 80091c2:	f7ff bba6 	b.w	8008912 <_strtod_l+0x2ea>
 80091c6:	bf00      	nop
 80091c8:	ffc00000 	.word	0xffc00000
 80091cc:	41dfffff 	.word	0x41dfffff
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fcfffff 	.word	0x3fcfffff

080091d8 <_strtod_r>:
 80091d8:	4b01      	ldr	r3, [pc, #4]	@ (80091e0 <_strtod_r+0x8>)
 80091da:	f7ff ba25 	b.w	8008628 <_strtod_l>
 80091de:	bf00      	nop
 80091e0:	20000068 	.word	0x20000068

080091e4 <_strtol_l.constprop.0>:
 80091e4:	2b24      	cmp	r3, #36	@ 0x24
 80091e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ea:	4686      	mov	lr, r0
 80091ec:	4690      	mov	r8, r2
 80091ee:	d801      	bhi.n	80091f4 <_strtol_l.constprop.0+0x10>
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d106      	bne.n	8009202 <_strtol_l.constprop.0+0x1e>
 80091f4:	f7fd fdc0 	bl	8006d78 <__errno>
 80091f8:	2316      	movs	r3, #22
 80091fa:	6003      	str	r3, [r0, #0]
 80091fc:	2000      	movs	r0, #0
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	460d      	mov	r5, r1
 8009204:	4833      	ldr	r0, [pc, #204]	@ (80092d4 <_strtol_l.constprop.0+0xf0>)
 8009206:	462a      	mov	r2, r5
 8009208:	f815 4b01 	ldrb.w	r4, [r5], #1
 800920c:	5d06      	ldrb	r6, [r0, r4]
 800920e:	f016 0608 	ands.w	r6, r6, #8
 8009212:	d1f8      	bne.n	8009206 <_strtol_l.constprop.0+0x22>
 8009214:	2c2d      	cmp	r4, #45	@ 0x2d
 8009216:	d12d      	bne.n	8009274 <_strtol_l.constprop.0+0x90>
 8009218:	2601      	movs	r6, #1
 800921a:	782c      	ldrb	r4, [r5, #0]
 800921c:	1c95      	adds	r5, r2, #2
 800921e:	f033 0210 	bics.w	r2, r3, #16
 8009222:	d109      	bne.n	8009238 <_strtol_l.constprop.0+0x54>
 8009224:	2c30      	cmp	r4, #48	@ 0x30
 8009226:	d12a      	bne.n	800927e <_strtol_l.constprop.0+0x9a>
 8009228:	782a      	ldrb	r2, [r5, #0]
 800922a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800922e:	2a58      	cmp	r2, #88	@ 0x58
 8009230:	d125      	bne.n	800927e <_strtol_l.constprop.0+0x9a>
 8009232:	2310      	movs	r3, #16
 8009234:	786c      	ldrb	r4, [r5, #1]
 8009236:	3502      	adds	r5, #2
 8009238:	2200      	movs	r2, #0
 800923a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800923e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009242:	fbbc f9f3 	udiv	r9, ip, r3
 8009246:	4610      	mov	r0, r2
 8009248:	fb03 ca19 	mls	sl, r3, r9, ip
 800924c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009250:	2f09      	cmp	r7, #9
 8009252:	d81b      	bhi.n	800928c <_strtol_l.constprop.0+0xa8>
 8009254:	463c      	mov	r4, r7
 8009256:	42a3      	cmp	r3, r4
 8009258:	dd27      	ble.n	80092aa <_strtol_l.constprop.0+0xc6>
 800925a:	1c57      	adds	r7, r2, #1
 800925c:	d007      	beq.n	800926e <_strtol_l.constprop.0+0x8a>
 800925e:	4581      	cmp	r9, r0
 8009260:	d320      	bcc.n	80092a4 <_strtol_l.constprop.0+0xc0>
 8009262:	d101      	bne.n	8009268 <_strtol_l.constprop.0+0x84>
 8009264:	45a2      	cmp	sl, r4
 8009266:	db1d      	blt.n	80092a4 <_strtol_l.constprop.0+0xc0>
 8009268:	2201      	movs	r2, #1
 800926a:	fb00 4003 	mla	r0, r0, r3, r4
 800926e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009272:	e7eb      	b.n	800924c <_strtol_l.constprop.0+0x68>
 8009274:	2c2b      	cmp	r4, #43	@ 0x2b
 8009276:	bf04      	itt	eq
 8009278:	782c      	ldrbeq	r4, [r5, #0]
 800927a:	1c95      	addeq	r5, r2, #2
 800927c:	e7cf      	b.n	800921e <_strtol_l.constprop.0+0x3a>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1da      	bne.n	8009238 <_strtol_l.constprop.0+0x54>
 8009282:	2c30      	cmp	r4, #48	@ 0x30
 8009284:	bf0c      	ite	eq
 8009286:	2308      	moveq	r3, #8
 8009288:	230a      	movne	r3, #10
 800928a:	e7d5      	b.n	8009238 <_strtol_l.constprop.0+0x54>
 800928c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009290:	2f19      	cmp	r7, #25
 8009292:	d801      	bhi.n	8009298 <_strtol_l.constprop.0+0xb4>
 8009294:	3c37      	subs	r4, #55	@ 0x37
 8009296:	e7de      	b.n	8009256 <_strtol_l.constprop.0+0x72>
 8009298:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800929c:	2f19      	cmp	r7, #25
 800929e:	d804      	bhi.n	80092aa <_strtol_l.constprop.0+0xc6>
 80092a0:	3c57      	subs	r4, #87	@ 0x57
 80092a2:	e7d8      	b.n	8009256 <_strtol_l.constprop.0+0x72>
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295
 80092a8:	e7e1      	b.n	800926e <_strtol_l.constprop.0+0x8a>
 80092aa:	1c53      	adds	r3, r2, #1
 80092ac:	d108      	bne.n	80092c0 <_strtol_l.constprop.0+0xdc>
 80092ae:	2322      	movs	r3, #34	@ 0x22
 80092b0:	4660      	mov	r0, ip
 80092b2:	f8ce 3000 	str.w	r3, [lr]
 80092b6:	f1b8 0f00 	cmp.w	r8, #0
 80092ba:	d0a0      	beq.n	80091fe <_strtol_l.constprop.0+0x1a>
 80092bc:	1e69      	subs	r1, r5, #1
 80092be:	e006      	b.n	80092ce <_strtol_l.constprop.0+0xea>
 80092c0:	b106      	cbz	r6, 80092c4 <_strtol_l.constprop.0+0xe0>
 80092c2:	4240      	negs	r0, r0
 80092c4:	f1b8 0f00 	cmp.w	r8, #0
 80092c8:	d099      	beq.n	80091fe <_strtol_l.constprop.0+0x1a>
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	d1f6      	bne.n	80092bc <_strtol_l.constprop.0+0xd8>
 80092ce:	f8c8 1000 	str.w	r1, [r8]
 80092d2:	e794      	b.n	80091fe <_strtol_l.constprop.0+0x1a>
 80092d4:	0800a651 	.word	0x0800a651

080092d8 <_strtol_r>:
 80092d8:	f7ff bf84 	b.w	80091e4 <_strtol_l.constprop.0>

080092dc <__ssputs_r>:
 80092dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	461f      	mov	r7, r3
 80092e2:	688e      	ldr	r6, [r1, #8]
 80092e4:	4682      	mov	sl, r0
 80092e6:	42be      	cmp	r6, r7
 80092e8:	460c      	mov	r4, r1
 80092ea:	4690      	mov	r8, r2
 80092ec:	680b      	ldr	r3, [r1, #0]
 80092ee:	d82d      	bhi.n	800934c <__ssputs_r+0x70>
 80092f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092f8:	d026      	beq.n	8009348 <__ssputs_r+0x6c>
 80092fa:	6965      	ldr	r5, [r4, #20]
 80092fc:	6909      	ldr	r1, [r1, #16]
 80092fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009302:	eba3 0901 	sub.w	r9, r3, r1
 8009306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800930a:	1c7b      	adds	r3, r7, #1
 800930c:	444b      	add	r3, r9
 800930e:	106d      	asrs	r5, r5, #1
 8009310:	429d      	cmp	r5, r3
 8009312:	bf38      	it	cc
 8009314:	461d      	movcc	r5, r3
 8009316:	0553      	lsls	r3, r2, #21
 8009318:	d527      	bpl.n	800936a <__ssputs_r+0x8e>
 800931a:	4629      	mov	r1, r5
 800931c:	f7fe fc2e 	bl	8007b7c <_malloc_r>
 8009320:	4606      	mov	r6, r0
 8009322:	b360      	cbz	r0, 800937e <__ssputs_r+0xa2>
 8009324:	464a      	mov	r2, r9
 8009326:	6921      	ldr	r1, [r4, #16]
 8009328:	f000 fbd8 	bl	8009adc <memcpy>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	6126      	str	r6, [r4, #16]
 800933a:	444e      	add	r6, r9
 800933c:	6026      	str	r6, [r4, #0]
 800933e:	463e      	mov	r6, r7
 8009340:	6165      	str	r5, [r4, #20]
 8009342:	eba5 0509 	sub.w	r5, r5, r9
 8009346:	60a5      	str	r5, [r4, #8]
 8009348:	42be      	cmp	r6, r7
 800934a:	d900      	bls.n	800934e <__ssputs_r+0x72>
 800934c:	463e      	mov	r6, r7
 800934e:	4632      	mov	r2, r6
 8009350:	4641      	mov	r1, r8
 8009352:	6820      	ldr	r0, [r4, #0]
 8009354:	f000 fb63 	bl	8009a1e <memmove>
 8009358:	2000      	movs	r0, #0
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	1b9b      	subs	r3, r3, r6
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	4433      	add	r3, r6
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936a:	462a      	mov	r2, r5
 800936c:	f000 ff47 	bl	800a1fe <_realloc_r>
 8009370:	4606      	mov	r6, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d1e0      	bne.n	8009338 <__ssputs_r+0x5c>
 8009376:	4650      	mov	r0, sl
 8009378:	6921      	ldr	r1, [r4, #16]
 800937a:	f7fe fb8d 	bl	8007a98 <_free_r>
 800937e:	230c      	movs	r3, #12
 8009380:	f8ca 3000 	str.w	r3, [sl]
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f04f 30ff 	mov.w	r0, #4294967295
 800938a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	e7e9      	b.n	8009366 <__ssputs_r+0x8a>
	...

08009394 <_svfiprintf_r>:
 8009394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009398:	4698      	mov	r8, r3
 800939a:	898b      	ldrh	r3, [r1, #12]
 800939c:	4607      	mov	r7, r0
 800939e:	061b      	lsls	r3, r3, #24
 80093a0:	460d      	mov	r5, r1
 80093a2:	4614      	mov	r4, r2
 80093a4:	b09d      	sub	sp, #116	@ 0x74
 80093a6:	d510      	bpl.n	80093ca <_svfiprintf_r+0x36>
 80093a8:	690b      	ldr	r3, [r1, #16]
 80093aa:	b973      	cbnz	r3, 80093ca <_svfiprintf_r+0x36>
 80093ac:	2140      	movs	r1, #64	@ 0x40
 80093ae:	f7fe fbe5 	bl	8007b7c <_malloc_r>
 80093b2:	6028      	str	r0, [r5, #0]
 80093b4:	6128      	str	r0, [r5, #16]
 80093b6:	b930      	cbnz	r0, 80093c6 <_svfiprintf_r+0x32>
 80093b8:	230c      	movs	r3, #12
 80093ba:	603b      	str	r3, [r7, #0]
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295
 80093c0:	b01d      	add	sp, #116	@ 0x74
 80093c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	2340      	movs	r3, #64	@ 0x40
 80093c8:	616b      	str	r3, [r5, #20]
 80093ca:	2300      	movs	r3, #0
 80093cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ce:	2320      	movs	r3, #32
 80093d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093d4:	2330      	movs	r3, #48	@ 0x30
 80093d6:	f04f 0901 	mov.w	r9, #1
 80093da:	f8cd 800c 	str.w	r8, [sp, #12]
 80093de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009578 <_svfiprintf_r+0x1e4>
 80093e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093e6:	4623      	mov	r3, r4
 80093e8:	469a      	mov	sl, r3
 80093ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ee:	b10a      	cbz	r2, 80093f4 <_svfiprintf_r+0x60>
 80093f0:	2a25      	cmp	r2, #37	@ 0x25
 80093f2:	d1f9      	bne.n	80093e8 <_svfiprintf_r+0x54>
 80093f4:	ebba 0b04 	subs.w	fp, sl, r4
 80093f8:	d00b      	beq.n	8009412 <_svfiprintf_r+0x7e>
 80093fa:	465b      	mov	r3, fp
 80093fc:	4622      	mov	r2, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff ff6b 	bl	80092dc <__ssputs_r>
 8009406:	3001      	adds	r0, #1
 8009408:	f000 80a7 	beq.w	800955a <_svfiprintf_r+0x1c6>
 800940c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800940e:	445a      	add	r2, fp
 8009410:	9209      	str	r2, [sp, #36]	@ 0x24
 8009412:	f89a 3000 	ldrb.w	r3, [sl]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 809f 	beq.w	800955a <_svfiprintf_r+0x1c6>
 800941c:	2300      	movs	r3, #0
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009426:	f10a 0a01 	add.w	sl, sl, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	9307      	str	r3, [sp, #28]
 800942e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009432:	931a      	str	r3, [sp, #104]	@ 0x68
 8009434:	4654      	mov	r4, sl
 8009436:	2205      	movs	r2, #5
 8009438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943c:	484e      	ldr	r0, [pc, #312]	@ (8009578 <_svfiprintf_r+0x1e4>)
 800943e:	f7fd fcc8 	bl	8006dd2 <memchr>
 8009442:	9a04      	ldr	r2, [sp, #16]
 8009444:	b9d8      	cbnz	r0, 800947e <_svfiprintf_r+0xea>
 8009446:	06d0      	lsls	r0, r2, #27
 8009448:	bf44      	itt	mi
 800944a:	2320      	movmi	r3, #32
 800944c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009450:	0711      	lsls	r1, r2, #28
 8009452:	bf44      	itt	mi
 8009454:	232b      	movmi	r3, #43	@ 0x2b
 8009456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800945a:	f89a 3000 	ldrb.w	r3, [sl]
 800945e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009460:	d015      	beq.n	800948e <_svfiprintf_r+0xfa>
 8009462:	4654      	mov	r4, sl
 8009464:	2000      	movs	r0, #0
 8009466:	f04f 0c0a 	mov.w	ip, #10
 800946a:	9a07      	ldr	r2, [sp, #28]
 800946c:	4621      	mov	r1, r4
 800946e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009472:	3b30      	subs	r3, #48	@ 0x30
 8009474:	2b09      	cmp	r3, #9
 8009476:	d94b      	bls.n	8009510 <_svfiprintf_r+0x17c>
 8009478:	b1b0      	cbz	r0, 80094a8 <_svfiprintf_r+0x114>
 800947a:	9207      	str	r2, [sp, #28]
 800947c:	e014      	b.n	80094a8 <_svfiprintf_r+0x114>
 800947e:	eba0 0308 	sub.w	r3, r0, r8
 8009482:	fa09 f303 	lsl.w	r3, r9, r3
 8009486:	4313      	orrs	r3, r2
 8009488:	46a2      	mov	sl, r4
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	e7d2      	b.n	8009434 <_svfiprintf_r+0xa0>
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	1d19      	adds	r1, r3, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	9103      	str	r1, [sp, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfbb      	ittet	lt
 800949a:	425b      	neglt	r3, r3
 800949c:	f042 0202 	orrlt.w	r2, r2, #2
 80094a0:	9307      	strge	r3, [sp, #28]
 80094a2:	9307      	strlt	r3, [sp, #28]
 80094a4:	bfb8      	it	lt
 80094a6:	9204      	strlt	r2, [sp, #16]
 80094a8:	7823      	ldrb	r3, [r4, #0]
 80094aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ac:	d10a      	bne.n	80094c4 <_svfiprintf_r+0x130>
 80094ae:	7863      	ldrb	r3, [r4, #1]
 80094b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b2:	d132      	bne.n	800951a <_svfiprintf_r+0x186>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	3402      	adds	r4, #2
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9203      	str	r2, [sp, #12]
 80094be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094c2:	9305      	str	r3, [sp, #20]
 80094c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800957c <_svfiprintf_r+0x1e8>
 80094c8:	2203      	movs	r2, #3
 80094ca:	4650      	mov	r0, sl
 80094cc:	7821      	ldrb	r1, [r4, #0]
 80094ce:	f7fd fc80 	bl	8006dd2 <memchr>
 80094d2:	b138      	cbz	r0, 80094e4 <_svfiprintf_r+0x150>
 80094d4:	2240      	movs	r2, #64	@ 0x40
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	eba0 000a 	sub.w	r0, r0, sl
 80094dc:	4082      	lsls	r2, r0
 80094de:	4313      	orrs	r3, r2
 80094e0:	3401      	adds	r4, #1
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e8:	2206      	movs	r2, #6
 80094ea:	4825      	ldr	r0, [pc, #148]	@ (8009580 <_svfiprintf_r+0x1ec>)
 80094ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094f0:	f7fd fc6f 	bl	8006dd2 <memchr>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d036      	beq.n	8009566 <_svfiprintf_r+0x1d2>
 80094f8:	4b22      	ldr	r3, [pc, #136]	@ (8009584 <_svfiprintf_r+0x1f0>)
 80094fa:	bb1b      	cbnz	r3, 8009544 <_svfiprintf_r+0x1b0>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	3307      	adds	r3, #7
 8009500:	f023 0307 	bic.w	r3, r3, #7
 8009504:	3308      	adds	r3, #8
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800950a:	4433      	add	r3, r6
 800950c:	9309      	str	r3, [sp, #36]	@ 0x24
 800950e:	e76a      	b.n	80093e6 <_svfiprintf_r+0x52>
 8009510:	460c      	mov	r4, r1
 8009512:	2001      	movs	r0, #1
 8009514:	fb0c 3202 	mla	r2, ip, r2, r3
 8009518:	e7a8      	b.n	800946c <_svfiprintf_r+0xd8>
 800951a:	2300      	movs	r3, #0
 800951c:	f04f 0c0a 	mov.w	ip, #10
 8009520:	4619      	mov	r1, r3
 8009522:	3401      	adds	r4, #1
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4620      	mov	r0, r4
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	3a30      	subs	r2, #48	@ 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d903      	bls.n	800953a <_svfiprintf_r+0x1a6>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c6      	beq.n	80094c4 <_svfiprintf_r+0x130>
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	e7c4      	b.n	80094c4 <_svfiprintf_r+0x130>
 800953a:	4604      	mov	r4, r0
 800953c:	2301      	movs	r3, #1
 800953e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009542:	e7f0      	b.n	8009526 <_svfiprintf_r+0x192>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	462a      	mov	r2, r5
 800954a:	4638      	mov	r0, r7
 800954c:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <_svfiprintf_r+0x1f4>)
 800954e:	a904      	add	r1, sp, #16
 8009550:	f7fc fbc8 	bl	8005ce4 <_printf_float>
 8009554:	1c42      	adds	r2, r0, #1
 8009556:	4606      	mov	r6, r0
 8009558:	d1d6      	bne.n	8009508 <_svfiprintf_r+0x174>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	065b      	lsls	r3, r3, #25
 800955e:	f53f af2d 	bmi.w	80093bc <_svfiprintf_r+0x28>
 8009562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009564:	e72c      	b.n	80093c0 <_svfiprintf_r+0x2c>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4638      	mov	r0, r7
 800956e:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <_svfiprintf_r+0x1f4>)
 8009570:	a904      	add	r1, sp, #16
 8009572:	f7fc fe55 	bl	8006220 <_printf_i>
 8009576:	e7ed      	b.n	8009554 <_svfiprintf_r+0x1c0>
 8009578:	0800a751 	.word	0x0800a751
 800957c:	0800a757 	.word	0x0800a757
 8009580:	0800a75b 	.word	0x0800a75b
 8009584:	08005ce5 	.word	0x08005ce5
 8009588:	080092dd 	.word	0x080092dd

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	b410      	push	{r4}
 8009590:	3b01      	subs	r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da07      	bge.n	80095a8 <__sfputc_r+0x1c>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d102      	bne.n	80095a8 <__sfputc_r+0x1c>
 80095a2:	bc10      	pop	{r4}
 80095a4:	f7fd bb01 	b.w	8006baa <__swbuf_r>
 80095a8:	6813      	ldr	r3, [r2, #0]
 80095aa:	1c58      	adds	r0, r3, #1
 80095ac:	6010      	str	r0, [r2, #0]
 80095ae:	7019      	strb	r1, [r3, #0]
 80095b0:	4608      	mov	r0, r1
 80095b2:	bc10      	pop	{r4}
 80095b4:	4770      	bx	lr

080095b6 <__sfputs_r>:
 80095b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b8:	4606      	mov	r6, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	18d5      	adds	r5, r2, r3
 80095c0:	42ac      	cmp	r4, r5
 80095c2:	d101      	bne.n	80095c8 <__sfputs_r+0x12>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e007      	b.n	80095d8 <__sfputs_r+0x22>
 80095c8:	463a      	mov	r2, r7
 80095ca:	4630      	mov	r0, r6
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	f7ff ffdc 	bl	800958c <__sfputc_r>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d1f3      	bne.n	80095c0 <__sfputs_r+0xa>
 80095d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095dc <_vfiprintf_r>:
 80095dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	460d      	mov	r5, r1
 80095e2:	4614      	mov	r4, r2
 80095e4:	4698      	mov	r8, r3
 80095e6:	4606      	mov	r6, r0
 80095e8:	b09d      	sub	sp, #116	@ 0x74
 80095ea:	b118      	cbz	r0, 80095f4 <_vfiprintf_r+0x18>
 80095ec:	6a03      	ldr	r3, [r0, #32]
 80095ee:	b90b      	cbnz	r3, 80095f4 <_vfiprintf_r+0x18>
 80095f0:	f7fd f9d2 	bl	8006998 <__sinit>
 80095f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095f6:	07d9      	lsls	r1, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_vfiprintf_r+0x2a>
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	059a      	lsls	r2, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_vfiprintf_r+0x2a>
 8009600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009602:	f7fd fbe4 	bl	8006dce <__retarget_lock_acquire_recursive>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	071b      	lsls	r3, r3, #28
 800960a:	d501      	bpl.n	8009610 <_vfiprintf_r+0x34>
 800960c:	692b      	ldr	r3, [r5, #16]
 800960e:	b99b      	cbnz	r3, 8009638 <_vfiprintf_r+0x5c>
 8009610:	4629      	mov	r1, r5
 8009612:	4630      	mov	r0, r6
 8009614:	f7fd fb08 	bl	8006c28 <__swsetup_r>
 8009618:	b170      	cbz	r0, 8009638 <_vfiprintf_r+0x5c>
 800961a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800961c:	07dc      	lsls	r4, r3, #31
 800961e:	d504      	bpl.n	800962a <_vfiprintf_r+0x4e>
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	b01d      	add	sp, #116	@ 0x74
 8009626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	0598      	lsls	r0, r3, #22
 800962e:	d4f7      	bmi.n	8009620 <_vfiprintf_r+0x44>
 8009630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009632:	f7fd fbcd 	bl	8006dd0 <__retarget_lock_release_recursive>
 8009636:	e7f3      	b.n	8009620 <_vfiprintf_r+0x44>
 8009638:	2300      	movs	r3, #0
 800963a:	9309      	str	r3, [sp, #36]	@ 0x24
 800963c:	2320      	movs	r3, #32
 800963e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009642:	2330      	movs	r3, #48	@ 0x30
 8009644:	f04f 0901 	mov.w	r9, #1
 8009648:	f8cd 800c 	str.w	r8, [sp, #12]
 800964c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80097f8 <_vfiprintf_r+0x21c>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009654:	4623      	mov	r3, r4
 8009656:	469a      	mov	sl, r3
 8009658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965c:	b10a      	cbz	r2, 8009662 <_vfiprintf_r+0x86>
 800965e:	2a25      	cmp	r2, #37	@ 0x25
 8009660:	d1f9      	bne.n	8009656 <_vfiprintf_r+0x7a>
 8009662:	ebba 0b04 	subs.w	fp, sl, r4
 8009666:	d00b      	beq.n	8009680 <_vfiprintf_r+0xa4>
 8009668:	465b      	mov	r3, fp
 800966a:	4622      	mov	r2, r4
 800966c:	4629      	mov	r1, r5
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ffa1 	bl	80095b6 <__sfputs_r>
 8009674:	3001      	adds	r0, #1
 8009676:	f000 80a7 	beq.w	80097c8 <_vfiprintf_r+0x1ec>
 800967a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800967c:	445a      	add	r2, fp
 800967e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009680:	f89a 3000 	ldrb.w	r3, [sl]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 809f 	beq.w	80097c8 <_vfiprintf_r+0x1ec>
 800968a:	2300      	movs	r3, #0
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009694:	f10a 0a01 	add.w	sl, sl, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	9307      	str	r3, [sp, #28]
 800969c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096a2:	4654      	mov	r4, sl
 80096a4:	2205      	movs	r2, #5
 80096a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096aa:	4853      	ldr	r0, [pc, #332]	@ (80097f8 <_vfiprintf_r+0x21c>)
 80096ac:	f7fd fb91 	bl	8006dd2 <memchr>
 80096b0:	9a04      	ldr	r2, [sp, #16]
 80096b2:	b9d8      	cbnz	r0, 80096ec <_vfiprintf_r+0x110>
 80096b4:	06d1      	lsls	r1, r2, #27
 80096b6:	bf44      	itt	mi
 80096b8:	2320      	movmi	r3, #32
 80096ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096be:	0713      	lsls	r3, r2, #28
 80096c0:	bf44      	itt	mi
 80096c2:	232b      	movmi	r3, #43	@ 0x2b
 80096c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096c8:	f89a 3000 	ldrb.w	r3, [sl]
 80096cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ce:	d015      	beq.n	80096fc <_vfiprintf_r+0x120>
 80096d0:	4654      	mov	r4, sl
 80096d2:	2000      	movs	r0, #0
 80096d4:	f04f 0c0a 	mov.w	ip, #10
 80096d8:	9a07      	ldr	r2, [sp, #28]
 80096da:	4621      	mov	r1, r4
 80096dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e0:	3b30      	subs	r3, #48	@ 0x30
 80096e2:	2b09      	cmp	r3, #9
 80096e4:	d94b      	bls.n	800977e <_vfiprintf_r+0x1a2>
 80096e6:	b1b0      	cbz	r0, 8009716 <_vfiprintf_r+0x13a>
 80096e8:	9207      	str	r2, [sp, #28]
 80096ea:	e014      	b.n	8009716 <_vfiprintf_r+0x13a>
 80096ec:	eba0 0308 	sub.w	r3, r0, r8
 80096f0:	fa09 f303 	lsl.w	r3, r9, r3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	46a2      	mov	sl, r4
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	e7d2      	b.n	80096a2 <_vfiprintf_r+0xc6>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	1d19      	adds	r1, r3, #4
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	9103      	str	r1, [sp, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfbb      	ittet	lt
 8009708:	425b      	neglt	r3, r3
 800970a:	f042 0202 	orrlt.w	r2, r2, #2
 800970e:	9307      	strge	r3, [sp, #28]
 8009710:	9307      	strlt	r3, [sp, #28]
 8009712:	bfb8      	it	lt
 8009714:	9204      	strlt	r2, [sp, #16]
 8009716:	7823      	ldrb	r3, [r4, #0]
 8009718:	2b2e      	cmp	r3, #46	@ 0x2e
 800971a:	d10a      	bne.n	8009732 <_vfiprintf_r+0x156>
 800971c:	7863      	ldrb	r3, [r4, #1]
 800971e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009720:	d132      	bne.n	8009788 <_vfiprintf_r+0x1ac>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	3402      	adds	r4, #2
 8009726:	1d1a      	adds	r2, r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	9203      	str	r2, [sp, #12]
 800972c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80097fc <_vfiprintf_r+0x220>
 8009736:	2203      	movs	r2, #3
 8009738:	4650      	mov	r0, sl
 800973a:	7821      	ldrb	r1, [r4, #0]
 800973c:	f7fd fb49 	bl	8006dd2 <memchr>
 8009740:	b138      	cbz	r0, 8009752 <_vfiprintf_r+0x176>
 8009742:	2240      	movs	r2, #64	@ 0x40
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	eba0 000a 	sub.w	r0, r0, sl
 800974a:	4082      	lsls	r2, r0
 800974c:	4313      	orrs	r3, r2
 800974e:	3401      	adds	r4, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	2206      	movs	r2, #6
 8009758:	4829      	ldr	r0, [pc, #164]	@ (8009800 <_vfiprintf_r+0x224>)
 800975a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800975e:	f7fd fb38 	bl	8006dd2 <memchr>
 8009762:	2800      	cmp	r0, #0
 8009764:	d03f      	beq.n	80097e6 <_vfiprintf_r+0x20a>
 8009766:	4b27      	ldr	r3, [pc, #156]	@ (8009804 <_vfiprintf_r+0x228>)
 8009768:	bb1b      	cbnz	r3, 80097b2 <_vfiprintf_r+0x1d6>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	3307      	adds	r3, #7
 800976e:	f023 0307 	bic.w	r3, r3, #7
 8009772:	3308      	adds	r3, #8
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009778:	443b      	add	r3, r7
 800977a:	9309      	str	r3, [sp, #36]	@ 0x24
 800977c:	e76a      	b.n	8009654 <_vfiprintf_r+0x78>
 800977e:	460c      	mov	r4, r1
 8009780:	2001      	movs	r0, #1
 8009782:	fb0c 3202 	mla	r2, ip, r2, r3
 8009786:	e7a8      	b.n	80096da <_vfiprintf_r+0xfe>
 8009788:	2300      	movs	r3, #0
 800978a:	f04f 0c0a 	mov.w	ip, #10
 800978e:	4619      	mov	r1, r3
 8009790:	3401      	adds	r4, #1
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	4620      	mov	r0, r4
 8009796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979a:	3a30      	subs	r2, #48	@ 0x30
 800979c:	2a09      	cmp	r2, #9
 800979e:	d903      	bls.n	80097a8 <_vfiprintf_r+0x1cc>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0c6      	beq.n	8009732 <_vfiprintf_r+0x156>
 80097a4:	9105      	str	r1, [sp, #20]
 80097a6:	e7c4      	b.n	8009732 <_vfiprintf_r+0x156>
 80097a8:	4604      	mov	r4, r0
 80097aa:	2301      	movs	r3, #1
 80097ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b0:	e7f0      	b.n	8009794 <_vfiprintf_r+0x1b8>
 80097b2:	ab03      	add	r3, sp, #12
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	462a      	mov	r2, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <_vfiprintf_r+0x22c>)
 80097bc:	a904      	add	r1, sp, #16
 80097be:	f7fc fa91 	bl	8005ce4 <_printf_float>
 80097c2:	4607      	mov	r7, r0
 80097c4:	1c78      	adds	r0, r7, #1
 80097c6:	d1d6      	bne.n	8009776 <_vfiprintf_r+0x19a>
 80097c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ca:	07d9      	lsls	r1, r3, #31
 80097cc:	d405      	bmi.n	80097da <_vfiprintf_r+0x1fe>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	059a      	lsls	r2, r3, #22
 80097d2:	d402      	bmi.n	80097da <_vfiprintf_r+0x1fe>
 80097d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097d6:	f7fd fafb 	bl	8006dd0 <__retarget_lock_release_recursive>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	065b      	lsls	r3, r3, #25
 80097de:	f53f af1f 	bmi.w	8009620 <_vfiprintf_r+0x44>
 80097e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097e4:	e71e      	b.n	8009624 <_vfiprintf_r+0x48>
 80097e6:	ab03      	add	r3, sp, #12
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	462a      	mov	r2, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	4b06      	ldr	r3, [pc, #24]	@ (8009808 <_vfiprintf_r+0x22c>)
 80097f0:	a904      	add	r1, sp, #16
 80097f2:	f7fc fd15 	bl	8006220 <_printf_i>
 80097f6:	e7e4      	b.n	80097c2 <_vfiprintf_r+0x1e6>
 80097f8:	0800a751 	.word	0x0800a751
 80097fc:	0800a757 	.word	0x0800a757
 8009800:	0800a75b 	.word	0x0800a75b
 8009804:	08005ce5 	.word	0x08005ce5
 8009808:	080095b7 	.word	0x080095b7

0800980c <__sflush_r>:
 800980c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	0716      	lsls	r6, r2, #28
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	d454      	bmi.n	80098c4 <__sflush_r+0xb8>
 800981a:	684b      	ldr	r3, [r1, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dc02      	bgt.n	8009826 <__sflush_r+0x1a>
 8009820:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	dd48      	ble.n	80098b8 <__sflush_r+0xac>
 8009826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009828:	2e00      	cmp	r6, #0
 800982a:	d045      	beq.n	80098b8 <__sflush_r+0xac>
 800982c:	2300      	movs	r3, #0
 800982e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009832:	682f      	ldr	r7, [r5, #0]
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	d030      	beq.n	800989c <__sflush_r+0x90>
 800983a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	0759      	lsls	r1, r3, #29
 8009840:	d505      	bpl.n	800984e <__sflush_r+0x42>
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	1ad2      	subs	r2, r2, r3
 8009846:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009848:	b10b      	cbz	r3, 800984e <__sflush_r+0x42>
 800984a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800984c:	1ad2      	subs	r2, r2, r3
 800984e:	2300      	movs	r3, #0
 8009850:	4628      	mov	r0, r5
 8009852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009854:	6a21      	ldr	r1, [r4, #32]
 8009856:	47b0      	blx	r6
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	d106      	bne.n	800986c <__sflush_r+0x60>
 800985e:	6829      	ldr	r1, [r5, #0]
 8009860:	291d      	cmp	r1, #29
 8009862:	d82b      	bhi.n	80098bc <__sflush_r+0xb0>
 8009864:	4a28      	ldr	r2, [pc, #160]	@ (8009908 <__sflush_r+0xfc>)
 8009866:	410a      	asrs	r2, r1
 8009868:	07d6      	lsls	r6, r2, #31
 800986a:	d427      	bmi.n	80098bc <__sflush_r+0xb0>
 800986c:	2200      	movs	r2, #0
 800986e:	6062      	str	r2, [r4, #4]
 8009870:	6922      	ldr	r2, [r4, #16]
 8009872:	04d9      	lsls	r1, r3, #19
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	d504      	bpl.n	8009882 <__sflush_r+0x76>
 8009878:	1c42      	adds	r2, r0, #1
 800987a:	d101      	bne.n	8009880 <__sflush_r+0x74>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b903      	cbnz	r3, 8009882 <__sflush_r+0x76>
 8009880:	6560      	str	r0, [r4, #84]	@ 0x54
 8009882:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009884:	602f      	str	r7, [r5, #0]
 8009886:	b1b9      	cbz	r1, 80098b8 <__sflush_r+0xac>
 8009888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800988c:	4299      	cmp	r1, r3
 800988e:	d002      	beq.n	8009896 <__sflush_r+0x8a>
 8009890:	4628      	mov	r0, r5
 8009892:	f7fe f901 	bl	8007a98 <_free_r>
 8009896:	2300      	movs	r3, #0
 8009898:	6363      	str	r3, [r4, #52]	@ 0x34
 800989a:	e00d      	b.n	80098b8 <__sflush_r+0xac>
 800989c:	2301      	movs	r3, #1
 800989e:	4628      	mov	r0, r5
 80098a0:	47b0      	blx	r6
 80098a2:	4602      	mov	r2, r0
 80098a4:	1c50      	adds	r0, r2, #1
 80098a6:	d1c9      	bne.n	800983c <__sflush_r+0x30>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c6      	beq.n	800983c <__sflush_r+0x30>
 80098ae:	2b1d      	cmp	r3, #29
 80098b0:	d001      	beq.n	80098b6 <__sflush_r+0xaa>
 80098b2:	2b16      	cmp	r3, #22
 80098b4:	d11d      	bne.n	80098f2 <__sflush_r+0xe6>
 80098b6:	602f      	str	r7, [r5, #0]
 80098b8:	2000      	movs	r0, #0
 80098ba:	e021      	b.n	8009900 <__sflush_r+0xf4>
 80098bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	e01a      	b.n	80098fa <__sflush_r+0xee>
 80098c4:	690f      	ldr	r7, [r1, #16]
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	d0f6      	beq.n	80098b8 <__sflush_r+0xac>
 80098ca:	0793      	lsls	r3, r2, #30
 80098cc:	bf18      	it	ne
 80098ce:	2300      	movne	r3, #0
 80098d0:	680e      	ldr	r6, [r1, #0]
 80098d2:	bf08      	it	eq
 80098d4:	694b      	ldreq	r3, [r1, #20]
 80098d6:	1bf6      	subs	r6, r6, r7
 80098d8:	600f      	str	r7, [r1, #0]
 80098da:	608b      	str	r3, [r1, #8]
 80098dc:	2e00      	cmp	r6, #0
 80098de:	ddeb      	ble.n	80098b8 <__sflush_r+0xac>
 80098e0:	4633      	mov	r3, r6
 80098e2:	463a      	mov	r2, r7
 80098e4:	4628      	mov	r0, r5
 80098e6:	6a21      	ldr	r1, [r4, #32]
 80098e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80098ec:	47e0      	blx	ip
 80098ee:	2800      	cmp	r0, #0
 80098f0:	dc07      	bgt.n	8009902 <__sflush_r+0xf6>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009902:	4407      	add	r7, r0
 8009904:	1a36      	subs	r6, r6, r0
 8009906:	e7e9      	b.n	80098dc <__sflush_r+0xd0>
 8009908:	dfbffffe 	.word	0xdfbffffe

0800990c <_fflush_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	690b      	ldr	r3, [r1, #16]
 8009910:	4605      	mov	r5, r0
 8009912:	460c      	mov	r4, r1
 8009914:	b913      	cbnz	r3, 800991c <_fflush_r+0x10>
 8009916:	2500      	movs	r5, #0
 8009918:	4628      	mov	r0, r5
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	b118      	cbz	r0, 8009926 <_fflush_r+0x1a>
 800991e:	6a03      	ldr	r3, [r0, #32]
 8009920:	b90b      	cbnz	r3, 8009926 <_fflush_r+0x1a>
 8009922:	f7fd f839 	bl	8006998 <__sinit>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0f3      	beq.n	8009916 <_fflush_r+0xa>
 800992e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009930:	07d0      	lsls	r0, r2, #31
 8009932:	d404      	bmi.n	800993e <_fflush_r+0x32>
 8009934:	0599      	lsls	r1, r3, #22
 8009936:	d402      	bmi.n	800993e <_fflush_r+0x32>
 8009938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800993a:	f7fd fa48 	bl	8006dce <__retarget_lock_acquire_recursive>
 800993e:	4628      	mov	r0, r5
 8009940:	4621      	mov	r1, r4
 8009942:	f7ff ff63 	bl	800980c <__sflush_r>
 8009946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009948:	4605      	mov	r5, r0
 800994a:	07da      	lsls	r2, r3, #31
 800994c:	d4e4      	bmi.n	8009918 <_fflush_r+0xc>
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	059b      	lsls	r3, r3, #22
 8009952:	d4e1      	bmi.n	8009918 <_fflush_r+0xc>
 8009954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009956:	f7fd fa3b 	bl	8006dd0 <__retarget_lock_release_recursive>
 800995a:	e7dd      	b.n	8009918 <_fflush_r+0xc>

0800995c <__swhatbuf_r>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	460c      	mov	r4, r1
 8009960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009964:	4615      	mov	r5, r2
 8009966:	2900      	cmp	r1, #0
 8009968:	461e      	mov	r6, r3
 800996a:	b096      	sub	sp, #88	@ 0x58
 800996c:	da0c      	bge.n	8009988 <__swhatbuf_r+0x2c>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	2100      	movs	r1, #0
 8009972:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009976:	bf14      	ite	ne
 8009978:	2340      	movne	r3, #64	@ 0x40
 800997a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800997e:	2000      	movs	r0, #0
 8009980:	6031      	str	r1, [r6, #0]
 8009982:	602b      	str	r3, [r5, #0]
 8009984:	b016      	add	sp, #88	@ 0x58
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	466a      	mov	r2, sp
 800998a:	f000 f875 	bl	8009a78 <_fstat_r>
 800998e:	2800      	cmp	r0, #0
 8009990:	dbed      	blt.n	800996e <__swhatbuf_r+0x12>
 8009992:	9901      	ldr	r1, [sp, #4]
 8009994:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009998:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800999c:	4259      	negs	r1, r3
 800999e:	4159      	adcs	r1, r3
 80099a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099a4:	e7eb      	b.n	800997e <__swhatbuf_r+0x22>

080099a6 <__smakebuf_r>:
 80099a6:	898b      	ldrh	r3, [r1, #12]
 80099a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099aa:	079d      	lsls	r5, r3, #30
 80099ac:	4606      	mov	r6, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	d507      	bpl.n	80099c2 <__smakebuf_r+0x1c>
 80099b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	2301      	movs	r3, #1
 80099bc:	6163      	str	r3, [r4, #20]
 80099be:	b003      	add	sp, #12
 80099c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c2:	466a      	mov	r2, sp
 80099c4:	ab01      	add	r3, sp, #4
 80099c6:	f7ff ffc9 	bl	800995c <__swhatbuf_r>
 80099ca:	9f00      	ldr	r7, [sp, #0]
 80099cc:	4605      	mov	r5, r0
 80099ce:	4639      	mov	r1, r7
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7fe f8d3 	bl	8007b7c <_malloc_r>
 80099d6:	b948      	cbnz	r0, 80099ec <__smakebuf_r+0x46>
 80099d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099dc:	059a      	lsls	r2, r3, #22
 80099de:	d4ee      	bmi.n	80099be <__smakebuf_r+0x18>
 80099e0:	f023 0303 	bic.w	r3, r3, #3
 80099e4:	f043 0302 	orr.w	r3, r3, #2
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	e7e2      	b.n	80099b2 <__smakebuf_r+0xc>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	b15b      	cbz	r3, 8009a16 <__smakebuf_r+0x70>
 80099fe:	4630      	mov	r0, r6
 8009a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a04:	f000 f84a 	bl	8009a9c <_isatty_r>
 8009a08:	b128      	cbz	r0, 8009a16 <__smakebuf_r+0x70>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	f043 0301 	orr.w	r3, r3, #1
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	431d      	orrs	r5, r3
 8009a1a:	81a5      	strh	r5, [r4, #12]
 8009a1c:	e7cf      	b.n	80099be <__smakebuf_r+0x18>

08009a1e <memmove>:
 8009a1e:	4288      	cmp	r0, r1
 8009a20:	b510      	push	{r4, lr}
 8009a22:	eb01 0402 	add.w	r4, r1, r2
 8009a26:	d902      	bls.n	8009a2e <memmove+0x10>
 8009a28:	4284      	cmp	r4, r0
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	d807      	bhi.n	8009a3e <memmove+0x20>
 8009a2e:	1e43      	subs	r3, r0, #1
 8009a30:	42a1      	cmp	r1, r4
 8009a32:	d008      	beq.n	8009a46 <memmove+0x28>
 8009a34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a3c:	e7f8      	b.n	8009a30 <memmove+0x12>
 8009a3e:	4601      	mov	r1, r0
 8009a40:	4402      	add	r2, r0
 8009a42:	428a      	cmp	r2, r1
 8009a44:	d100      	bne.n	8009a48 <memmove+0x2a>
 8009a46:	bd10      	pop	{r4, pc}
 8009a48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a50:	e7f7      	b.n	8009a42 <memmove+0x24>

08009a52 <strncmp>:
 8009a52:	b510      	push	{r4, lr}
 8009a54:	b16a      	cbz	r2, 8009a72 <strncmp+0x20>
 8009a56:	3901      	subs	r1, #1
 8009a58:	1884      	adds	r4, r0, r2
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d103      	bne.n	8009a6e <strncmp+0x1c>
 8009a66:	42a0      	cmp	r0, r4
 8009a68:	d001      	beq.n	8009a6e <strncmp+0x1c>
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	d1f5      	bne.n	8009a5a <strncmp+0x8>
 8009a6e:	1ad0      	subs	r0, r2, r3
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	4610      	mov	r0, r2
 8009a74:	e7fc      	b.n	8009a70 <strncmp+0x1e>
	...

08009a78 <_fstat_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	4d06      	ldr	r5, [pc, #24]	@ (8009a98 <_fstat_r+0x20>)
 8009a7e:	4604      	mov	r4, r0
 8009a80:	4608      	mov	r0, r1
 8009a82:	4611      	mov	r1, r2
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	f7f7 fcd7 	bl	8001438 <_fstat>
 8009a8a:	1c43      	adds	r3, r0, #1
 8009a8c:	d102      	bne.n	8009a94 <_fstat_r+0x1c>
 8009a8e:	682b      	ldr	r3, [r5, #0]
 8009a90:	b103      	cbz	r3, 8009a94 <_fstat_r+0x1c>
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	bd38      	pop	{r3, r4, r5, pc}
 8009a96:	bf00      	nop
 8009a98:	20000434 	.word	0x20000434

08009a9c <_isatty_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4d05      	ldr	r5, [pc, #20]	@ (8009ab8 <_isatty_r+0x1c>)
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	f7f7 fcd5 	bl	8001456 <_isatty>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_isatty_r+0x1a>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_isatty_r+0x1a>
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	20000434 	.word	0x20000434

08009abc <_sbrk_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4d05      	ldr	r5, [pc, #20]	@ (8009ad8 <_sbrk_r+0x1c>)
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f7 fcdc 	bl	8001484 <_sbrk>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_sbrk_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_sbrk_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20000434 	.word	0x20000434

08009adc <memcpy>:
 8009adc:	440a      	add	r2, r1
 8009ade:	4291      	cmp	r1, r2
 8009ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	4770      	bx	lr
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aee:	4291      	cmp	r1, r2
 8009af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af4:	d1f9      	bne.n	8009aea <memcpy+0xe>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <nan>:
 8009af8:	2000      	movs	r0, #0
 8009afa:	4901      	ldr	r1, [pc, #4]	@ (8009b00 <nan+0x8>)
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	7ff80000 	.word	0x7ff80000

08009b04 <__assert_func>:
 8009b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b06:	4614      	mov	r4, r2
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b09      	ldr	r3, [pc, #36]	@ (8009b30 <__assert_func+0x2c>)
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68d8      	ldr	r0, [r3, #12]
 8009b12:	b954      	cbnz	r4, 8009b2a <__assert_func+0x26>
 8009b14:	4b07      	ldr	r3, [pc, #28]	@ (8009b34 <__assert_func+0x30>)
 8009b16:	461c      	mov	r4, r3
 8009b18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b1c:	9100      	str	r1, [sp, #0]
 8009b1e:	462b      	mov	r3, r5
 8009b20:	4905      	ldr	r1, [pc, #20]	@ (8009b38 <__assert_func+0x34>)
 8009b22:	f000 fba7 	bl	800a274 <fiprintf>
 8009b26:	f000 fbb7 	bl	800a298 <abort>
 8009b2a:	4b04      	ldr	r3, [pc, #16]	@ (8009b3c <__assert_func+0x38>)
 8009b2c:	e7f4      	b.n	8009b18 <__assert_func+0x14>
 8009b2e:	bf00      	nop
 8009b30:	20000018 	.word	0x20000018
 8009b34:	0800a7a5 	.word	0x0800a7a5
 8009b38:	0800a777 	.word	0x0800a777
 8009b3c:	0800a76a 	.word	0x0800a76a

08009b40 <_calloc_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	fba1 5402 	umull	r5, r4, r1, r2
 8009b46:	b93c      	cbnz	r4, 8009b58 <_calloc_r+0x18>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7fe f817 	bl	8007b7c <_malloc_r>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <_calloc_r+0x1e>
 8009b52:	2600      	movs	r6, #0
 8009b54:	4630      	mov	r0, r6
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	220c      	movs	r2, #12
 8009b5a:	6002      	str	r2, [r0, #0]
 8009b5c:	e7f9      	b.n	8009b52 <_calloc_r+0x12>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	4621      	mov	r1, r4
 8009b62:	f7fd f8b7 	bl	8006cd4 <memset>
 8009b66:	e7f5      	b.n	8009b54 <_calloc_r+0x14>

08009b68 <rshift>:
 8009b68:	6903      	ldr	r3, [r0, #16]
 8009b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b72:	f100 0414 	add.w	r4, r0, #20
 8009b76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b7a:	dd46      	ble.n	8009c0a <rshift+0xa2>
 8009b7c:	f011 011f 	ands.w	r1, r1, #31
 8009b80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b88:	d10c      	bne.n	8009ba4 <rshift+0x3c>
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	f100 0710 	add.w	r7, r0, #16
 8009b90:	42b1      	cmp	r1, r6
 8009b92:	d335      	bcc.n	8009c00 <rshift+0x98>
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	1eea      	subs	r2, r5, #3
 8009b9a:	4296      	cmp	r6, r2
 8009b9c:	bf38      	it	cc
 8009b9e:	2300      	movcc	r3, #0
 8009ba0:	4423      	add	r3, r4
 8009ba2:	e015      	b.n	8009bd0 <rshift+0x68>
 8009ba4:	46a1      	mov	r9, r4
 8009ba6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009baa:	f1c1 0820 	rsb	r8, r1, #32
 8009bae:	40cf      	lsrs	r7, r1
 8009bb0:	f105 0e04 	add.w	lr, r5, #4
 8009bb4:	4576      	cmp	r6, lr
 8009bb6:	46f4      	mov	ip, lr
 8009bb8:	d816      	bhi.n	8009be8 <rshift+0x80>
 8009bba:	1a9a      	subs	r2, r3, r2
 8009bbc:	0092      	lsls	r2, r2, #2
 8009bbe:	3a04      	subs	r2, #4
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	42ae      	cmp	r6, r5
 8009bc4:	bf38      	it	cc
 8009bc6:	2200      	movcc	r2, #0
 8009bc8:	18a3      	adds	r3, r4, r2
 8009bca:	50a7      	str	r7, [r4, r2]
 8009bcc:	b107      	cbz	r7, 8009bd0 <rshift+0x68>
 8009bce:	3304      	adds	r3, #4
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	eba3 0204 	sub.w	r2, r3, r4
 8009bd6:	bf08      	it	eq
 8009bd8:	2300      	moveq	r3, #0
 8009bda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bde:	6102      	str	r2, [r0, #16]
 8009be0:	bf08      	it	eq
 8009be2:	6143      	streq	r3, [r0, #20]
 8009be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009be8:	f8dc c000 	ldr.w	ip, [ip]
 8009bec:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bf0:	ea4c 0707 	orr.w	r7, ip, r7
 8009bf4:	f849 7b04 	str.w	r7, [r9], #4
 8009bf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bfc:	40cf      	lsrs	r7, r1
 8009bfe:	e7d9      	b.n	8009bb4 <rshift+0x4c>
 8009c00:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c04:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c08:	e7c2      	b.n	8009b90 <rshift+0x28>
 8009c0a:	4623      	mov	r3, r4
 8009c0c:	e7e0      	b.n	8009bd0 <rshift+0x68>

08009c0e <__hexdig_fun>:
 8009c0e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c12:	2b09      	cmp	r3, #9
 8009c14:	d802      	bhi.n	8009c1c <__hexdig_fun+0xe>
 8009c16:	3820      	subs	r0, #32
 8009c18:	b2c0      	uxtb	r0, r0
 8009c1a:	4770      	bx	lr
 8009c1c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c20:	2b05      	cmp	r3, #5
 8009c22:	d801      	bhi.n	8009c28 <__hexdig_fun+0x1a>
 8009c24:	3847      	subs	r0, #71	@ 0x47
 8009c26:	e7f7      	b.n	8009c18 <__hexdig_fun+0xa>
 8009c28:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c2c:	2b05      	cmp	r3, #5
 8009c2e:	d801      	bhi.n	8009c34 <__hexdig_fun+0x26>
 8009c30:	3827      	subs	r0, #39	@ 0x27
 8009c32:	e7f1      	b.n	8009c18 <__hexdig_fun+0xa>
 8009c34:	2000      	movs	r0, #0
 8009c36:	4770      	bx	lr

08009c38 <__gethex>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	468a      	mov	sl, r1
 8009c3e:	4690      	mov	r8, r2
 8009c40:	b085      	sub	sp, #20
 8009c42:	9302      	str	r3, [sp, #8]
 8009c44:	680b      	ldr	r3, [r1, #0]
 8009c46:	9001      	str	r0, [sp, #4]
 8009c48:	1c9c      	adds	r4, r3, #2
 8009c4a:	46a1      	mov	r9, r4
 8009c4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c50:	2830      	cmp	r0, #48	@ 0x30
 8009c52:	d0fa      	beq.n	8009c4a <__gethex+0x12>
 8009c54:	eba9 0303 	sub.w	r3, r9, r3
 8009c58:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c5c:	f7ff ffd7 	bl	8009c0e <__hexdig_fun>
 8009c60:	4605      	mov	r5, r0
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d168      	bne.n	8009d38 <__gethex+0x100>
 8009c66:	2201      	movs	r2, #1
 8009c68:	4648      	mov	r0, r9
 8009c6a:	499f      	ldr	r1, [pc, #636]	@ (8009ee8 <__gethex+0x2b0>)
 8009c6c:	f7ff fef1 	bl	8009a52 <strncmp>
 8009c70:	4607      	mov	r7, r0
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d167      	bne.n	8009d46 <__gethex+0x10e>
 8009c76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c7a:	4626      	mov	r6, r4
 8009c7c:	f7ff ffc7 	bl	8009c0e <__hexdig_fun>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d062      	beq.n	8009d4a <__gethex+0x112>
 8009c84:	4623      	mov	r3, r4
 8009c86:	7818      	ldrb	r0, [r3, #0]
 8009c88:	4699      	mov	r9, r3
 8009c8a:	2830      	cmp	r0, #48	@ 0x30
 8009c8c:	f103 0301 	add.w	r3, r3, #1
 8009c90:	d0f9      	beq.n	8009c86 <__gethex+0x4e>
 8009c92:	f7ff ffbc 	bl	8009c0e <__hexdig_fun>
 8009c96:	fab0 f580 	clz	r5, r0
 8009c9a:	f04f 0b01 	mov.w	fp, #1
 8009c9e:	096d      	lsrs	r5, r5, #5
 8009ca0:	464a      	mov	r2, r9
 8009ca2:	4616      	mov	r6, r2
 8009ca4:	7830      	ldrb	r0, [r6, #0]
 8009ca6:	3201      	adds	r2, #1
 8009ca8:	f7ff ffb1 	bl	8009c0e <__hexdig_fun>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d1f8      	bne.n	8009ca2 <__gethex+0x6a>
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	498c      	ldr	r1, [pc, #560]	@ (8009ee8 <__gethex+0x2b0>)
 8009cb6:	f7ff fecc 	bl	8009a52 <strncmp>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d13f      	bne.n	8009d3e <__gethex+0x106>
 8009cbe:	b944      	cbnz	r4, 8009cd2 <__gethex+0x9a>
 8009cc0:	1c74      	adds	r4, r6, #1
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	7830      	ldrb	r0, [r6, #0]
 8009cc8:	3201      	adds	r2, #1
 8009cca:	f7ff ffa0 	bl	8009c0e <__hexdig_fun>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d1f8      	bne.n	8009cc4 <__gethex+0x8c>
 8009cd2:	1ba4      	subs	r4, r4, r6
 8009cd4:	00a7      	lsls	r7, r4, #2
 8009cd6:	7833      	ldrb	r3, [r6, #0]
 8009cd8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009cdc:	2b50      	cmp	r3, #80	@ 0x50
 8009cde:	d13e      	bne.n	8009d5e <__gethex+0x126>
 8009ce0:	7873      	ldrb	r3, [r6, #1]
 8009ce2:	2b2b      	cmp	r3, #43	@ 0x2b
 8009ce4:	d033      	beq.n	8009d4e <__gethex+0x116>
 8009ce6:	2b2d      	cmp	r3, #45	@ 0x2d
 8009ce8:	d034      	beq.n	8009d54 <__gethex+0x11c>
 8009cea:	2400      	movs	r4, #0
 8009cec:	1c71      	adds	r1, r6, #1
 8009cee:	7808      	ldrb	r0, [r1, #0]
 8009cf0:	f7ff ff8d 	bl	8009c0e <__hexdig_fun>
 8009cf4:	1e43      	subs	r3, r0, #1
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b18      	cmp	r3, #24
 8009cfa:	d830      	bhi.n	8009d5e <__gethex+0x126>
 8009cfc:	f1a0 0210 	sub.w	r2, r0, #16
 8009d00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d04:	f7ff ff83 	bl	8009c0e <__hexdig_fun>
 8009d08:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d0c:	fa5f fc8c 	uxtb.w	ip, ip
 8009d10:	f1bc 0f18 	cmp.w	ip, #24
 8009d14:	f04f 030a 	mov.w	r3, #10
 8009d18:	d91e      	bls.n	8009d58 <__gethex+0x120>
 8009d1a:	b104      	cbz	r4, 8009d1e <__gethex+0xe6>
 8009d1c:	4252      	negs	r2, r2
 8009d1e:	4417      	add	r7, r2
 8009d20:	f8ca 1000 	str.w	r1, [sl]
 8009d24:	b1ed      	cbz	r5, 8009d62 <__gethex+0x12a>
 8009d26:	f1bb 0f00 	cmp.w	fp, #0
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2506      	moveq	r5, #6
 8009d2e:	2500      	movne	r5, #0
 8009d30:	4628      	mov	r0, r5
 8009d32:	b005      	add	sp, #20
 8009d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d38:	2500      	movs	r5, #0
 8009d3a:	462c      	mov	r4, r5
 8009d3c:	e7b0      	b.n	8009ca0 <__gethex+0x68>
 8009d3e:	2c00      	cmp	r4, #0
 8009d40:	d1c7      	bne.n	8009cd2 <__gethex+0x9a>
 8009d42:	4627      	mov	r7, r4
 8009d44:	e7c7      	b.n	8009cd6 <__gethex+0x9e>
 8009d46:	464e      	mov	r6, r9
 8009d48:	462f      	mov	r7, r5
 8009d4a:	2501      	movs	r5, #1
 8009d4c:	e7c3      	b.n	8009cd6 <__gethex+0x9e>
 8009d4e:	2400      	movs	r4, #0
 8009d50:	1cb1      	adds	r1, r6, #2
 8009d52:	e7cc      	b.n	8009cee <__gethex+0xb6>
 8009d54:	2401      	movs	r4, #1
 8009d56:	e7fb      	b.n	8009d50 <__gethex+0x118>
 8009d58:	fb03 0002 	mla	r0, r3, r2, r0
 8009d5c:	e7ce      	b.n	8009cfc <__gethex+0xc4>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	e7de      	b.n	8009d20 <__gethex+0xe8>
 8009d62:	4629      	mov	r1, r5
 8009d64:	eba6 0309 	sub.w	r3, r6, r9
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	2b07      	cmp	r3, #7
 8009d6c:	dc0a      	bgt.n	8009d84 <__gethex+0x14c>
 8009d6e:	9801      	ldr	r0, [sp, #4]
 8009d70:	f7fd ff90 	bl	8007c94 <_Balloc>
 8009d74:	4604      	mov	r4, r0
 8009d76:	b940      	cbnz	r0, 8009d8a <__gethex+0x152>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	21e4      	movs	r1, #228	@ 0xe4
 8009d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8009eec <__gethex+0x2b4>)
 8009d7e:	485c      	ldr	r0, [pc, #368]	@ (8009ef0 <__gethex+0x2b8>)
 8009d80:	f7ff fec0 	bl	8009b04 <__assert_func>
 8009d84:	3101      	adds	r1, #1
 8009d86:	105b      	asrs	r3, r3, #1
 8009d88:	e7ef      	b.n	8009d6a <__gethex+0x132>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f100 0a14 	add.w	sl, r0, #20
 8009d90:	4655      	mov	r5, sl
 8009d92:	469b      	mov	fp, r3
 8009d94:	45b1      	cmp	r9, r6
 8009d96:	d337      	bcc.n	8009e08 <__gethex+0x1d0>
 8009d98:	f845 bb04 	str.w	fp, [r5], #4
 8009d9c:	eba5 050a 	sub.w	r5, r5, sl
 8009da0:	10ad      	asrs	r5, r5, #2
 8009da2:	6125      	str	r5, [r4, #16]
 8009da4:	4658      	mov	r0, fp
 8009da6:	f7fe f867 	bl	8007e78 <__hi0bits>
 8009daa:	016d      	lsls	r5, r5, #5
 8009dac:	f8d8 6000 	ldr.w	r6, [r8]
 8009db0:	1a2d      	subs	r5, r5, r0
 8009db2:	42b5      	cmp	r5, r6
 8009db4:	dd54      	ble.n	8009e60 <__gethex+0x228>
 8009db6:	1bad      	subs	r5, r5, r6
 8009db8:	4629      	mov	r1, r5
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7fe fbef 	bl	800859e <__any_on>
 8009dc0:	4681      	mov	r9, r0
 8009dc2:	b178      	cbz	r0, 8009de4 <__gethex+0x1ac>
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	1e6b      	subs	r3, r5, #1
 8009dca:	1159      	asrs	r1, r3, #5
 8009dcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009dd0:	f003 021f 	and.w	r2, r3, #31
 8009dd4:	fa09 f202 	lsl.w	r2, r9, r2
 8009dd8:	420a      	tst	r2, r1
 8009dda:	d003      	beq.n	8009de4 <__gethex+0x1ac>
 8009ddc:	454b      	cmp	r3, r9
 8009dde:	dc36      	bgt.n	8009e4e <__gethex+0x216>
 8009de0:	f04f 0902 	mov.w	r9, #2
 8009de4:	4629      	mov	r1, r5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff febe 	bl	8009b68 <rshift>
 8009dec:	442f      	add	r7, r5
 8009dee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009df2:	42bb      	cmp	r3, r7
 8009df4:	da42      	bge.n	8009e7c <__gethex+0x244>
 8009df6:	4621      	mov	r1, r4
 8009df8:	9801      	ldr	r0, [sp, #4]
 8009dfa:	f7fd ff8b 	bl	8007d14 <_Bfree>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e02:	25a3      	movs	r5, #163	@ 0xa3
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e793      	b.n	8009d30 <__gethex+0xf8>
 8009e08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e0c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e0e:	d012      	beq.n	8009e36 <__gethex+0x1fe>
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d104      	bne.n	8009e1e <__gethex+0x1e6>
 8009e14:	f845 bb04 	str.w	fp, [r5], #4
 8009e18:	f04f 0b00 	mov.w	fp, #0
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	7830      	ldrb	r0, [r6, #0]
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	f7ff fef4 	bl	8009c0e <__hexdig_fun>
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	f000 000f 	and.w	r0, r0, #15
 8009e2c:	4098      	lsls	r0, r3
 8009e2e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e32:	3304      	adds	r3, #4
 8009e34:	e7ae      	b.n	8009d94 <__gethex+0x15c>
 8009e36:	45b1      	cmp	r9, r6
 8009e38:	d8ea      	bhi.n	8009e10 <__gethex+0x1d8>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	492a      	ldr	r1, [pc, #168]	@ (8009ee8 <__gethex+0x2b0>)
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	f7ff fe06 	bl	8009a52 <strncmp>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1e1      	bne.n	8009e10 <__gethex+0x1d8>
 8009e4c:	e7a2      	b.n	8009d94 <__gethex+0x15c>
 8009e4e:	4620      	mov	r0, r4
 8009e50:	1ea9      	subs	r1, r5, #2
 8009e52:	f7fe fba4 	bl	800859e <__any_on>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0c2      	beq.n	8009de0 <__gethex+0x1a8>
 8009e5a:	f04f 0903 	mov.w	r9, #3
 8009e5e:	e7c1      	b.n	8009de4 <__gethex+0x1ac>
 8009e60:	da09      	bge.n	8009e76 <__gethex+0x23e>
 8009e62:	1b75      	subs	r5, r6, r5
 8009e64:	4621      	mov	r1, r4
 8009e66:	462a      	mov	r2, r5
 8009e68:	9801      	ldr	r0, [sp, #4]
 8009e6a:	f7fe f969 	bl	8008140 <__lshift>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	1b7f      	subs	r7, r7, r5
 8009e72:	f100 0a14 	add.w	sl, r0, #20
 8009e76:	f04f 0900 	mov.w	r9, #0
 8009e7a:	e7b8      	b.n	8009dee <__gethex+0x1b6>
 8009e7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e80:	42bd      	cmp	r5, r7
 8009e82:	dd6f      	ble.n	8009f64 <__gethex+0x32c>
 8009e84:	1bed      	subs	r5, r5, r7
 8009e86:	42ae      	cmp	r6, r5
 8009e88:	dc34      	bgt.n	8009ef4 <__gethex+0x2bc>
 8009e8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d022      	beq.n	8009ed8 <__gethex+0x2a0>
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d024      	beq.n	8009ee0 <__gethex+0x2a8>
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d115      	bne.n	8009ec6 <__gethex+0x28e>
 8009e9a:	42ae      	cmp	r6, r5
 8009e9c:	d113      	bne.n	8009ec6 <__gethex+0x28e>
 8009e9e:	2e01      	cmp	r6, #1
 8009ea0:	d10b      	bne.n	8009eba <__gethex+0x282>
 8009ea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ea6:	9a02      	ldr	r2, [sp, #8]
 8009ea8:	2562      	movs	r5, #98	@ 0x62
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	2301      	movs	r3, #1
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	f8ca 3000 	str.w	r3, [sl]
 8009eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb6:	601c      	str	r4, [r3, #0]
 8009eb8:	e73a      	b.n	8009d30 <__gethex+0xf8>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	1e71      	subs	r1, r6, #1
 8009ebe:	f7fe fb6e 	bl	800859e <__any_on>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d1ed      	bne.n	8009ea2 <__gethex+0x26a>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	9801      	ldr	r0, [sp, #4]
 8009eca:	f7fd ff23 	bl	8007d14 <_Bfree>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ed2:	2550      	movs	r5, #80	@ 0x50
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	e72b      	b.n	8009d30 <__gethex+0xf8>
 8009ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f3      	bne.n	8009ec6 <__gethex+0x28e>
 8009ede:	e7e0      	b.n	8009ea2 <__gethex+0x26a>
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1dd      	bne.n	8009ea2 <__gethex+0x26a>
 8009ee6:	e7ee      	b.n	8009ec6 <__gethex+0x28e>
 8009ee8:	0800a5f8 	.word	0x0800a5f8
 8009eec:	0800a48f 	.word	0x0800a48f
 8009ef0:	0800a7a6 	.word	0x0800a7a6
 8009ef4:	1e6f      	subs	r7, r5, #1
 8009ef6:	f1b9 0f00 	cmp.w	r9, #0
 8009efa:	d130      	bne.n	8009f5e <__gethex+0x326>
 8009efc:	b127      	cbz	r7, 8009f08 <__gethex+0x2d0>
 8009efe:	4639      	mov	r1, r7
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7fe fb4c 	bl	800859e <__any_on>
 8009f06:	4681      	mov	r9, r0
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	1b76      	subs	r6, r6, r5
 8009f0e:	2502      	movs	r5, #2
 8009f10:	117a      	asrs	r2, r7, #5
 8009f12:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f16:	f007 071f 	and.w	r7, r7, #31
 8009f1a:	40bb      	lsls	r3, r7
 8009f1c:	4213      	tst	r3, r2
 8009f1e:	4620      	mov	r0, r4
 8009f20:	bf18      	it	ne
 8009f22:	f049 0902 	orrne.w	r9, r9, #2
 8009f26:	f7ff fe1f 	bl	8009b68 <rshift>
 8009f2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f2e:	f1b9 0f00 	cmp.w	r9, #0
 8009f32:	d047      	beq.n	8009fc4 <__gethex+0x38c>
 8009f34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d015      	beq.n	8009f68 <__gethex+0x330>
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d017      	beq.n	8009f70 <__gethex+0x338>
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d109      	bne.n	8009f58 <__gethex+0x320>
 8009f44:	f019 0f02 	tst.w	r9, #2
 8009f48:	d006      	beq.n	8009f58 <__gethex+0x320>
 8009f4a:	f8da 3000 	ldr.w	r3, [sl]
 8009f4e:	ea49 0903 	orr.w	r9, r9, r3
 8009f52:	f019 0f01 	tst.w	r9, #1
 8009f56:	d10e      	bne.n	8009f76 <__gethex+0x33e>
 8009f58:	f045 0510 	orr.w	r5, r5, #16
 8009f5c:	e032      	b.n	8009fc4 <__gethex+0x38c>
 8009f5e:	f04f 0901 	mov.w	r9, #1
 8009f62:	e7d1      	b.n	8009f08 <__gethex+0x2d0>
 8009f64:	2501      	movs	r5, #1
 8009f66:	e7e2      	b.n	8009f2e <__gethex+0x2f6>
 8009f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f6a:	f1c3 0301 	rsb	r3, r3, #1
 8009f6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0f0      	beq.n	8009f58 <__gethex+0x320>
 8009f76:	f04f 0c00 	mov.w	ip, #0
 8009f7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f7e:	f104 0314 	add.w	r3, r4, #20
 8009f82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f94:	d01b      	beq.n	8009fce <__gethex+0x396>
 8009f96:	3201      	adds	r2, #1
 8009f98:	6002      	str	r2, [r0, #0]
 8009f9a:	2d02      	cmp	r5, #2
 8009f9c:	f104 0314 	add.w	r3, r4, #20
 8009fa0:	d13c      	bne.n	800a01c <__gethex+0x3e4>
 8009fa2:	f8d8 2000 	ldr.w	r2, [r8]
 8009fa6:	3a01      	subs	r2, #1
 8009fa8:	42b2      	cmp	r2, r6
 8009faa:	d109      	bne.n	8009fc0 <__gethex+0x388>
 8009fac:	2201      	movs	r2, #1
 8009fae:	1171      	asrs	r1, r6, #5
 8009fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fb4:	f006 061f 	and.w	r6, r6, #31
 8009fb8:	fa02 f606 	lsl.w	r6, r2, r6
 8009fbc:	421e      	tst	r6, r3
 8009fbe:	d13a      	bne.n	800a036 <__gethex+0x3fe>
 8009fc0:	f045 0520 	orr.w	r5, r5, #32
 8009fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fc6:	601c      	str	r4, [r3, #0]
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	601f      	str	r7, [r3, #0]
 8009fcc:	e6b0      	b.n	8009d30 <__gethex+0xf8>
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009fd4:	d8d9      	bhi.n	8009f8a <__gethex+0x352>
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	459b      	cmp	fp, r3
 8009fda:	db17      	blt.n	800a00c <__gethex+0x3d4>
 8009fdc:	6861      	ldr	r1, [r4, #4]
 8009fde:	9801      	ldr	r0, [sp, #4]
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	f7fd fe57 	bl	8007c94 <_Balloc>
 8009fe6:	4681      	mov	r9, r0
 8009fe8:	b918      	cbnz	r0, 8009ff2 <__gethex+0x3ba>
 8009fea:	4602      	mov	r2, r0
 8009fec:	2184      	movs	r1, #132	@ 0x84
 8009fee:	4b19      	ldr	r3, [pc, #100]	@ (800a054 <__gethex+0x41c>)
 8009ff0:	e6c5      	b.n	8009d7e <__gethex+0x146>
 8009ff2:	6922      	ldr	r2, [r4, #16]
 8009ff4:	f104 010c 	add.w	r1, r4, #12
 8009ff8:	3202      	adds	r2, #2
 8009ffa:	0092      	lsls	r2, r2, #2
 8009ffc:	300c      	adds	r0, #12
 8009ffe:	f7ff fd6d 	bl	8009adc <memcpy>
 800a002:	4621      	mov	r1, r4
 800a004:	9801      	ldr	r0, [sp, #4]
 800a006:	f7fd fe85 	bl	8007d14 <_Bfree>
 800a00a:	464c      	mov	r4, r9
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	6122      	str	r2, [r4, #16]
 800a012:	2201      	movs	r2, #1
 800a014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a018:	615a      	str	r2, [r3, #20]
 800a01a:	e7be      	b.n	8009f9a <__gethex+0x362>
 800a01c:	6922      	ldr	r2, [r4, #16]
 800a01e:	455a      	cmp	r2, fp
 800a020:	dd0b      	ble.n	800a03a <__gethex+0x402>
 800a022:	2101      	movs	r1, #1
 800a024:	4620      	mov	r0, r4
 800a026:	f7ff fd9f 	bl	8009b68 <rshift>
 800a02a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a02e:	3701      	adds	r7, #1
 800a030:	42bb      	cmp	r3, r7
 800a032:	f6ff aee0 	blt.w	8009df6 <__gethex+0x1be>
 800a036:	2501      	movs	r5, #1
 800a038:	e7c2      	b.n	8009fc0 <__gethex+0x388>
 800a03a:	f016 061f 	ands.w	r6, r6, #31
 800a03e:	d0fa      	beq.n	800a036 <__gethex+0x3fe>
 800a040:	4453      	add	r3, sl
 800a042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a046:	f7fd ff17 	bl	8007e78 <__hi0bits>
 800a04a:	f1c6 0620 	rsb	r6, r6, #32
 800a04e:	42b0      	cmp	r0, r6
 800a050:	dbe7      	blt.n	800a022 <__gethex+0x3ea>
 800a052:	e7f0      	b.n	800a036 <__gethex+0x3fe>
 800a054:	0800a48f 	.word	0x0800a48f

0800a058 <L_shift>:
 800a058:	f1c2 0208 	rsb	r2, r2, #8
 800a05c:	0092      	lsls	r2, r2, #2
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	f1c2 0620 	rsb	r6, r2, #32
 800a064:	6843      	ldr	r3, [r0, #4]
 800a066:	6804      	ldr	r4, [r0, #0]
 800a068:	fa03 f506 	lsl.w	r5, r3, r6
 800a06c:	432c      	orrs	r4, r5
 800a06e:	40d3      	lsrs	r3, r2
 800a070:	6004      	str	r4, [r0, #0]
 800a072:	f840 3f04 	str.w	r3, [r0, #4]!
 800a076:	4288      	cmp	r0, r1
 800a078:	d3f4      	bcc.n	800a064 <L_shift+0xc>
 800a07a:	bd70      	pop	{r4, r5, r6, pc}

0800a07c <__match>:
 800a07c:	b530      	push	{r4, r5, lr}
 800a07e:	6803      	ldr	r3, [r0, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a086:	b914      	cbnz	r4, 800a08e <__match+0x12>
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	2001      	movs	r0, #1
 800a08c:	bd30      	pop	{r4, r5, pc}
 800a08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a092:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a096:	2d19      	cmp	r5, #25
 800a098:	bf98      	it	ls
 800a09a:	3220      	addls	r2, #32
 800a09c:	42a2      	cmp	r2, r4
 800a09e:	d0f0      	beq.n	800a082 <__match+0x6>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e7f3      	b.n	800a08c <__match+0x10>

0800a0a4 <__hexnan>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	2500      	movs	r5, #0
 800a0aa:	680b      	ldr	r3, [r1, #0]
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	115e      	asrs	r6, r3, #5
 800a0b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0b4:	f013 031f 	ands.w	r3, r3, #31
 800a0b8:	bf18      	it	ne
 800a0ba:	3604      	addne	r6, #4
 800a0bc:	1f37      	subs	r7, r6, #4
 800a0be:	4690      	mov	r8, r2
 800a0c0:	46b9      	mov	r9, r7
 800a0c2:	463c      	mov	r4, r7
 800a0c4:	46ab      	mov	fp, r5
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	6801      	ldr	r1, [r0, #0]
 800a0ca:	9301      	str	r3, [sp, #4]
 800a0cc:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0d0:	9502      	str	r5, [sp, #8]
 800a0d2:	784a      	ldrb	r2, [r1, #1]
 800a0d4:	1c4b      	adds	r3, r1, #1
 800a0d6:	9303      	str	r3, [sp, #12]
 800a0d8:	b342      	cbz	r2, 800a12c <__hexnan+0x88>
 800a0da:	4610      	mov	r0, r2
 800a0dc:	9105      	str	r1, [sp, #20]
 800a0de:	9204      	str	r2, [sp, #16]
 800a0e0:	f7ff fd95 	bl	8009c0e <__hexdig_fun>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d151      	bne.n	800a18c <__hexnan+0xe8>
 800a0e8:	9a04      	ldr	r2, [sp, #16]
 800a0ea:	9905      	ldr	r1, [sp, #20]
 800a0ec:	2a20      	cmp	r2, #32
 800a0ee:	d818      	bhi.n	800a122 <__hexnan+0x7e>
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	459b      	cmp	fp, r3
 800a0f4:	dd13      	ble.n	800a11e <__hexnan+0x7a>
 800a0f6:	454c      	cmp	r4, r9
 800a0f8:	d206      	bcs.n	800a108 <__hexnan+0x64>
 800a0fa:	2d07      	cmp	r5, #7
 800a0fc:	dc04      	bgt.n	800a108 <__hexnan+0x64>
 800a0fe:	462a      	mov	r2, r5
 800a100:	4649      	mov	r1, r9
 800a102:	4620      	mov	r0, r4
 800a104:	f7ff ffa8 	bl	800a058 <L_shift>
 800a108:	4544      	cmp	r4, r8
 800a10a:	d952      	bls.n	800a1b2 <__hexnan+0x10e>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f1a4 0904 	sub.w	r9, r4, #4
 800a112:	f844 3c04 	str.w	r3, [r4, #-4]
 800a116:	461d      	mov	r5, r3
 800a118:	464c      	mov	r4, r9
 800a11a:	f8cd b008 	str.w	fp, [sp, #8]
 800a11e:	9903      	ldr	r1, [sp, #12]
 800a120:	e7d7      	b.n	800a0d2 <__hexnan+0x2e>
 800a122:	2a29      	cmp	r2, #41	@ 0x29
 800a124:	d157      	bne.n	800a1d6 <__hexnan+0x132>
 800a126:	3102      	adds	r1, #2
 800a128:	f8ca 1000 	str.w	r1, [sl]
 800a12c:	f1bb 0f00 	cmp.w	fp, #0
 800a130:	d051      	beq.n	800a1d6 <__hexnan+0x132>
 800a132:	454c      	cmp	r4, r9
 800a134:	d206      	bcs.n	800a144 <__hexnan+0xa0>
 800a136:	2d07      	cmp	r5, #7
 800a138:	dc04      	bgt.n	800a144 <__hexnan+0xa0>
 800a13a:	462a      	mov	r2, r5
 800a13c:	4649      	mov	r1, r9
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff ff8a 	bl	800a058 <L_shift>
 800a144:	4544      	cmp	r4, r8
 800a146:	d936      	bls.n	800a1b6 <__hexnan+0x112>
 800a148:	4623      	mov	r3, r4
 800a14a:	f1a8 0204 	sub.w	r2, r8, #4
 800a14e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a152:	429f      	cmp	r7, r3
 800a154:	f842 1f04 	str.w	r1, [r2, #4]!
 800a158:	d2f9      	bcs.n	800a14e <__hexnan+0xaa>
 800a15a:	1b3b      	subs	r3, r7, r4
 800a15c:	f023 0303 	bic.w	r3, r3, #3
 800a160:	3304      	adds	r3, #4
 800a162:	3401      	adds	r4, #1
 800a164:	3e03      	subs	r6, #3
 800a166:	42b4      	cmp	r4, r6
 800a168:	bf88      	it	hi
 800a16a:	2304      	movhi	r3, #4
 800a16c:	2200      	movs	r2, #0
 800a16e:	4443      	add	r3, r8
 800a170:	f843 2b04 	str.w	r2, [r3], #4
 800a174:	429f      	cmp	r7, r3
 800a176:	d2fb      	bcs.n	800a170 <__hexnan+0xcc>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	b91b      	cbnz	r3, 800a184 <__hexnan+0xe0>
 800a17c:	4547      	cmp	r7, r8
 800a17e:	d128      	bne.n	800a1d2 <__hexnan+0x12e>
 800a180:	2301      	movs	r3, #1
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	2005      	movs	r0, #5
 800a186:	b007      	add	sp, #28
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	3501      	adds	r5, #1
 800a18e:	2d08      	cmp	r5, #8
 800a190:	f10b 0b01 	add.w	fp, fp, #1
 800a194:	dd06      	ble.n	800a1a4 <__hexnan+0x100>
 800a196:	4544      	cmp	r4, r8
 800a198:	d9c1      	bls.n	800a11e <__hexnan+0x7a>
 800a19a:	2300      	movs	r3, #0
 800a19c:	2501      	movs	r5, #1
 800a19e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1a2:	3c04      	subs	r4, #4
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	f000 000f 	and.w	r0, r0, #15
 800a1aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1ae:	6020      	str	r0, [r4, #0]
 800a1b0:	e7b5      	b.n	800a11e <__hexnan+0x7a>
 800a1b2:	2508      	movs	r5, #8
 800a1b4:	e7b3      	b.n	800a11e <__hexnan+0x7a>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0dd      	beq.n	800a178 <__hexnan+0xd4>
 800a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c0:	f1c3 0320 	rsb	r3, r3, #32
 800a1c4:	40da      	lsrs	r2, r3
 800a1c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1d0:	e7d2      	b.n	800a178 <__hexnan+0xd4>
 800a1d2:	3f04      	subs	r7, #4
 800a1d4:	e7d0      	b.n	800a178 <__hexnan+0xd4>
 800a1d6:	2004      	movs	r0, #4
 800a1d8:	e7d5      	b.n	800a186 <__hexnan+0xe2>

0800a1da <__ascii_mbtowc>:
 800a1da:	b082      	sub	sp, #8
 800a1dc:	b901      	cbnz	r1, 800a1e0 <__ascii_mbtowc+0x6>
 800a1de:	a901      	add	r1, sp, #4
 800a1e0:	b142      	cbz	r2, 800a1f4 <__ascii_mbtowc+0x1a>
 800a1e2:	b14b      	cbz	r3, 800a1f8 <__ascii_mbtowc+0x1e>
 800a1e4:	7813      	ldrb	r3, [r2, #0]
 800a1e6:	600b      	str	r3, [r1, #0]
 800a1e8:	7812      	ldrb	r2, [r2, #0]
 800a1ea:	1e10      	subs	r0, r2, #0
 800a1ec:	bf18      	it	ne
 800a1ee:	2001      	movne	r0, #1
 800a1f0:	b002      	add	sp, #8
 800a1f2:	4770      	bx	lr
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	e7fb      	b.n	800a1f0 <__ascii_mbtowc+0x16>
 800a1f8:	f06f 0001 	mvn.w	r0, #1
 800a1fc:	e7f8      	b.n	800a1f0 <__ascii_mbtowc+0x16>

0800a1fe <_realloc_r>:
 800a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	4680      	mov	r8, r0
 800a204:	4615      	mov	r5, r2
 800a206:	460c      	mov	r4, r1
 800a208:	b921      	cbnz	r1, 800a214 <_realloc_r+0x16>
 800a20a:	4611      	mov	r1, r2
 800a20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	f7fd bcb4 	b.w	8007b7c <_malloc_r>
 800a214:	b92a      	cbnz	r2, 800a222 <_realloc_r+0x24>
 800a216:	f7fd fc3f 	bl	8007a98 <_free_r>
 800a21a:	2400      	movs	r4, #0
 800a21c:	4620      	mov	r0, r4
 800a21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a222:	f000 f840 	bl	800a2a6 <_malloc_usable_size_r>
 800a226:	4285      	cmp	r5, r0
 800a228:	4606      	mov	r6, r0
 800a22a:	d802      	bhi.n	800a232 <_realloc_r+0x34>
 800a22c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a230:	d8f4      	bhi.n	800a21c <_realloc_r+0x1e>
 800a232:	4629      	mov	r1, r5
 800a234:	4640      	mov	r0, r8
 800a236:	f7fd fca1 	bl	8007b7c <_malloc_r>
 800a23a:	4607      	mov	r7, r0
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d0ec      	beq.n	800a21a <_realloc_r+0x1c>
 800a240:	42b5      	cmp	r5, r6
 800a242:	462a      	mov	r2, r5
 800a244:	4621      	mov	r1, r4
 800a246:	bf28      	it	cs
 800a248:	4632      	movcs	r2, r6
 800a24a:	f7ff fc47 	bl	8009adc <memcpy>
 800a24e:	4621      	mov	r1, r4
 800a250:	4640      	mov	r0, r8
 800a252:	f7fd fc21 	bl	8007a98 <_free_r>
 800a256:	463c      	mov	r4, r7
 800a258:	e7e0      	b.n	800a21c <_realloc_r+0x1e>

0800a25a <__ascii_wctomb>:
 800a25a:	4603      	mov	r3, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	b141      	cbz	r1, 800a272 <__ascii_wctomb+0x18>
 800a260:	2aff      	cmp	r2, #255	@ 0xff
 800a262:	d904      	bls.n	800a26e <__ascii_wctomb+0x14>
 800a264:	228a      	movs	r2, #138	@ 0x8a
 800a266:	f04f 30ff 	mov.w	r0, #4294967295
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	4770      	bx	lr
 800a26e:	2001      	movs	r0, #1
 800a270:	700a      	strb	r2, [r1, #0]
 800a272:	4770      	bx	lr

0800a274 <fiprintf>:
 800a274:	b40e      	push	{r1, r2, r3}
 800a276:	b503      	push	{r0, r1, lr}
 800a278:	4601      	mov	r1, r0
 800a27a:	ab03      	add	r3, sp, #12
 800a27c:	4805      	ldr	r0, [pc, #20]	@ (800a294 <fiprintf+0x20>)
 800a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a282:	6800      	ldr	r0, [r0, #0]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	f7ff f9a9 	bl	80095dc <_vfiprintf_r>
 800a28a:	b002      	add	sp, #8
 800a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a290:	b003      	add	sp, #12
 800a292:	4770      	bx	lr
 800a294:	20000018 	.word	0x20000018

0800a298 <abort>:
 800a298:	2006      	movs	r0, #6
 800a29a:	b508      	push	{r3, lr}
 800a29c:	f000 f834 	bl	800a308 <raise>
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	f7f7 f87a 	bl	800139a <_exit>

0800a2a6 <_malloc_usable_size_r>:
 800a2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2aa:	1f18      	subs	r0, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bfbc      	itt	lt
 800a2b0:	580b      	ldrlt	r3, [r1, r0]
 800a2b2:	18c0      	addlt	r0, r0, r3
 800a2b4:	4770      	bx	lr

0800a2b6 <_raise_r>:
 800a2b6:	291f      	cmp	r1, #31
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	d904      	bls.n	800a2ca <_raise_r+0x14>
 800a2c0:	2316      	movs	r3, #22
 800a2c2:	6003      	str	r3, [r0, #0]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2cc:	b112      	cbz	r2, 800a2d4 <_raise_r+0x1e>
 800a2ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2d2:	b94b      	cbnz	r3, 800a2e8 <_raise_r+0x32>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f831 	bl	800a33c <_getpid_r>
 800a2da:	4622      	mov	r2, r4
 800a2dc:	4601      	mov	r1, r0
 800a2de:	4628      	mov	r0, r5
 800a2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e4:	f000 b818 	b.w	800a318 <_kill_r>
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d00a      	beq.n	800a302 <_raise_r+0x4c>
 800a2ec:	1c59      	adds	r1, r3, #1
 800a2ee:	d103      	bne.n	800a2f8 <_raise_r+0x42>
 800a2f0:	2316      	movs	r3, #22
 800a2f2:	6003      	str	r3, [r0, #0]
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e7e7      	b.n	800a2c8 <_raise_r+0x12>
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a300:	4798      	blx	r3
 800a302:	2000      	movs	r0, #0
 800a304:	e7e0      	b.n	800a2c8 <_raise_r+0x12>
	...

0800a308 <raise>:
 800a308:	4b02      	ldr	r3, [pc, #8]	@ (800a314 <raise+0xc>)
 800a30a:	4601      	mov	r1, r0
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	f7ff bfd2 	b.w	800a2b6 <_raise_r>
 800a312:	bf00      	nop
 800a314:	20000018 	.word	0x20000018

0800a318 <_kill_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	2300      	movs	r3, #0
 800a31c:	4d06      	ldr	r5, [pc, #24]	@ (800a338 <_kill_r+0x20>)
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	4611      	mov	r1, r2
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	f7f7 f828 	bl	800137a <_kill>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d102      	bne.n	800a334 <_kill_r+0x1c>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b103      	cbz	r3, 800a334 <_kill_r+0x1c>
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	bd38      	pop	{r3, r4, r5, pc}
 800a336:	bf00      	nop
 800a338:	20000434 	.word	0x20000434

0800a33c <_getpid_r>:
 800a33c:	f7f7 b816 	b.w	800136c <_getpid>

0800a340 <_init>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr

0800a34c <_fini>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr
